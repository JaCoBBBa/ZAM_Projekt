
ZAM_projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e190  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002160  0800e430  0800e430  0000f430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  000122a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  000122a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801059c  0801059c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  080105a0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDescripSection 00000060  240001e4  08010784  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDescripSection 00000060  24000244  080107e4  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000918  240002a4  08010844  000122a4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000bbc  08010844  00012bbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000122a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024a18  00000000  00000000  000122d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046db  00000000  00000000  00036cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bb0  00000000  00000000  0003b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001581  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fb6f  00000000  00000000  0003e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026523  00000000  00000000  0007e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00194883  00000000  00000000  000a458b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00238e0e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008cc0  00000000  00000000  00238e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  00241b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a4 	.word	0x240002a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e418 	.word	0x0800e418

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a8 	.word	0x240002a8
 80002dc:	0800e418 	.word	0x0800e418

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f000 fd94 	bl	80016d0 <bno055_writeData>
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	203d      	movs	r0, #61	@ 0x3d
 8000bc0:	f000 fd86 	bl	80016d0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d103      	bne.n	8000bd2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000bca:	2013      	movs	r0, #19
 8000bcc:	f000 fd74 	bl	80016b8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000bd0:	e002      	b.n	8000bd8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fd70 	bl	80016b8 <bno055_delay>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff ffe3 	bl	8000bb0 <bno055_setOperationMode>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000bf2:	200c      	movs	r0, #12
 8000bf4:	f7ff ffdc 	bl	8000bb0 <bno055_setOperationMode>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000c00:	2120      	movs	r1, #32
 8000c02:	203f      	movs	r0, #63	@ 0x3f
 8000c04:	f000 fd64 	bl	80016d0 <bno055_writeData>
  bno055_delay(700);
 8000c08:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000c0c:	f000 fd54 	bl	80016b8 <bno055_delay>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  bno055_reset();
 8000c1a:	f7ff ffef 	bl	8000bfc <bno055_reset>

  uint8_t id = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fe2b 	bl	8001884 <bno055_readData>
  if (id != BNO055_ID) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c32:	d004      	beq.n	8000c3e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <bno055_setup+0x4c>)
 8000c3a:	f009 fce7 	bl	800a60c <iprintf>
  }
  bno055_setPage(0);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ffa8 	bl	8000b94 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	203f      	movs	r0, #63	@ 0x3f
 8000c48:	f000 fd42 	bl	80016d0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000c4c:	f7ff ffc8 	bl	8000be0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f000 fd31 	bl	80016b8 <bno055_delay>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800e430 	.word	0x0800e430

08000c64 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000c64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c68:	b09e      	sub	sp, #120	@ 0x78
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff8e 	bl	8000b94 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d108      	bne.n	8000c92 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000c80:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c88:	2208      	movs	r2, #8
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fdfa 	bl	8001884 <bno055_readData>
 8000c90:	e007      	b.n	8000ca2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000c92:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fdf1 	bl	8001884 <bno055_readData>

  double scale = 1;
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b81      	ldr	r3, [pc, #516]	@ (8000eac <bno055_getVector+0x248>)
 8000ca8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cb0:	2b0e      	cmp	r3, #14
 8000cb2:	d108      	bne.n	8000cc6 <bno055_getVector+0x62>
    scale = magScale;
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8000eb0 <bno055_getVector+0x24c>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cc0:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000cc4:	e03a      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d007      	beq.n	8000cde <bno055_getVector+0x7a>
 8000cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cd2:	2b28      	cmp	r3, #40	@ 0x28
 8000cd4:	d003      	beq.n	8000cde <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cdc:	d108      	bne.n	8000cf0 <bno055_getVector+0x8c>
    scale = accelScale;
 8000cde:	4b75      	ldr	r3, [pc, #468]	@ (8000eb4 <bno055_getVector+0x250>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cea:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000cee:	e025      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cf4:	2b14      	cmp	r3, #20
 8000cf6:	d108      	bne.n	8000d0a <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb8 <bno055_getVector+0x254>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d04:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d08:	e018      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d0e:	2b1a      	cmp	r3, #26
 8000d10:	d108      	bne.n	8000d24 <bno055_getVector+0xc0>
    scale = eulerScale;
 8000d12:	4b6a      	ldr	r3, [pc, #424]	@ (8000ebc <bno055_getVector+0x258>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d1e:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d22:	e00b      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d28:	2b20      	cmp	r3, #32
 8000d2a:	d107      	bne.n	8000d3c <bno055_getVector+0xd8>
    scale = quaScale;
 8000d2c:	4b64      	ldr	r3, [pc, #400]	@ (8000ec0 <bno055_getVector+0x25c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d38:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f009 fdc9 	bl	800a8dc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d4e:	2b20      	cmp	r3, #32
 8000d50:	d14c      	bne.n	8000dec <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000d52:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d6c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000d70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d74:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000d78:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d92:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000d96:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d9a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000db8:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000dbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dc0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000dde:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000de2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000de6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000dea:	e038      	b.n	8000e5e <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000dec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e06:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e0e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000e12:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e2c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e34:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000e38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e52:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e5a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 8000e5e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000e62:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000e76:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000e7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000e7e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000e82:	ec49 8b14 	vmov	d4, r8, r9
 8000e86:	ec45 4b15 	vmov	d5, r4, r5
 8000e8a:	ec41 0b16 	vmov	d6, r0, r1
 8000e8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e92:	eeb0 0b44 	vmov.f64	d0, d4
 8000e96:	eeb0 1b45 	vmov.f64	d1, d5
 8000e9a:	eeb0 2b46 	vmov.f64	d2, d6
 8000e9e:	eeb0 3b47 	vmov.f64	d3, d7
 8000ea2:	3778      	adds	r7, #120	@ 0x78
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000eaa:	bf00      	nop
 8000eac:	3ff00000 	.word	0x3ff00000
 8000eb0:	2400000e 	.word	0x2400000e
 8000eb4:	24000008 	.word	0x24000008
 8000eb8:	2400000a 	.word	0x2400000a
 8000ebc:	2400000c 	.word	0x2400000c
 8000ec0:	24000010 	.word	0x24000010

08000ec4 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ec8:	b090      	sub	sp, #64	@ 0x40
 8000eca:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000ecc:	2008      	movs	r0, #8
 8000ece:	f7ff fec9 	bl	8000c64 <bno055_getVector>
 8000ed2:	eeb0 4b40 	vmov.f64	d4, d0
 8000ed6:	eeb0 5b41 	vmov.f64	d5, d1
 8000eda:	eeb0 6b42 	vmov.f64	d6, d2
 8000ede:	eeb0 7b43 	vmov.f64	d7, d3
 8000ee2:	ed87 4b08 	vstr	d4, [r7, #32]
 8000ee6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000eea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000eee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000ef2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ef6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000efa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000efe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f02:	ec49 8b14 	vmov	d4, r8, r9
 8000f06:	ec45 4b15 	vmov	d5, r4, r5
 8000f0a:	ec41 0b16 	vmov	d6, r0, r1
 8000f0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f12:	eeb0 0b44 	vmov.f64	d0, d4
 8000f16:	eeb0 1b45 	vmov.f64	d1, d5
 8000f1a:	eeb0 2b46 	vmov.f64	d2, d6
 8000f1e:	eeb0 3b47 	vmov.f64	d3, d7
 8000f22:	3740      	adds	r7, #64	@ 0x40
 8000f24:	46bd      	mov	sp, r7
 8000f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000f2a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8000f2a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8000f32:	200e      	movs	r0, #14
 8000f34:	f7ff fe96 	bl	8000c64 <bno055_getVector>
 8000f38:	eeb0 4b40 	vmov.f64	d4, d0
 8000f3c:	eeb0 5b41 	vmov.f64	d5, d1
 8000f40:	eeb0 6b42 	vmov.f64	d6, d2
 8000f44:	eeb0 7b43 	vmov.f64	d7, d3
 8000f48:	ed87 4b08 	vstr	d4, [r7, #32]
 8000f4c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000f50:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000f54:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000f5c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000f60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f68:	ec49 8b14 	vmov	d4, r8, r9
 8000f6c:	ec45 4b15 	vmov	d5, r4, r5
 8000f70:	ec41 0b16 	vmov	d6, r0, r1
 8000f74:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f78:	eeb0 0b44 	vmov.f64	d0, d4
 8000f7c:	eeb0 1b45 	vmov.f64	d1, d5
 8000f80:	eeb0 2b46 	vmov.f64	d2, d6
 8000f84:	eeb0 3b47 	vmov.f64	d3, d7
 8000f88:	3740      	adds	r7, #64	@ 0x40
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000f90 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b090      	sub	sp, #64	@ 0x40
 8000f96:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f7ff fe63 	bl	8000c64 <bno055_getVector>
 8000f9e:	eeb0 4b40 	vmov.f64	d4, d0
 8000fa2:	eeb0 5b41 	vmov.f64	d5, d1
 8000fa6:	eeb0 6b42 	vmov.f64	d6, d2
 8000faa:	eeb0 7b43 	vmov.f64	d7, d3
 8000fae:	ed87 4b08 	vstr	d4, [r7, #32]
 8000fb2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000fb6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000fba:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000fbe:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000fc2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000fc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000fca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000fce:	ec49 8b14 	vmov	d4, r8, r9
 8000fd2:	ec45 4b15 	vmov	d5, r4, r5
 8000fd6:	ec41 0b16 	vmov	d6, r0, r1
 8000fda:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fde:	eeb0 0b44 	vmov.f64	d0, d4
 8000fe2:	eeb0 1b45 	vmov.f64	d1, d5
 8000fe6:	eeb0 2b46 	vmov.f64	d2, d6
 8000fea:	eeb0 3b47 	vmov.f64	d3, d7
 8000fee:	3740      	adds	r7, #64	@ 0x40
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ff6 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8000ff6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffa:	b090      	sub	sp, #64	@ 0x40
 8000ffc:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000ffe:	201a      	movs	r0, #26
 8001000:	f7ff fe30 	bl	8000c64 <bno055_getVector>
 8001004:	eeb0 4b40 	vmov.f64	d4, d0
 8001008:	eeb0 5b41 	vmov.f64	d5, d1
 800100c:	eeb0 6b42 	vmov.f64	d6, d2
 8001010:	eeb0 7b43 	vmov.f64	d7, d3
 8001014:	ed87 4b08 	vstr	d4, [r7, #32]
 8001018:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800101c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001020:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001024:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001028:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800102c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001034:	ec49 8b14 	vmov	d4, r8, r9
 8001038:	ec45 4b15 	vmov	d5, r4, r5
 800103c:	ec41 0b16 	vmov	d6, r0, r1
 8001040:	ec43 2b17 	vmov	d7, r2, r3
}
 8001044:	eeb0 0b44 	vmov.f64	d0, d4
 8001048:	eeb0 1b45 	vmov.f64	d1, d5
 800104c:	eeb0 2b46 	vmov.f64	d2, d6
 8001050:	eeb0 3b47 	vmov.f64	d3, d7
 8001054:	3740      	adds	r7, #64	@ 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800105c <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 800105c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001060:	b090      	sub	sp, #64	@ 0x40
 8001062:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001064:	2028      	movs	r0, #40	@ 0x28
 8001066:	f7ff fdfd 	bl	8000c64 <bno055_getVector>
 800106a:	eeb0 4b40 	vmov.f64	d4, d0
 800106e:	eeb0 5b41 	vmov.f64	d5, d1
 8001072:	eeb0 6b42 	vmov.f64	d6, d2
 8001076:	eeb0 7b43 	vmov.f64	d7, d3
 800107a:	ed87 4b08 	vstr	d4, [r7, #32]
 800107e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001082:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001086:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800108a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800108e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001092:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001096:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800109a:	ec49 8b14 	vmov	d4, r8, r9
 800109e:	ec45 4b15 	vmov	d5, r4, r5
 80010a2:	ec41 0b16 	vmov	d6, r0, r1
 80010a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010aa:	eeb0 0b44 	vmov.f64	d0, d4
 80010ae:	eeb0 1b45 	vmov.f64	d1, d5
 80010b2:	eeb0 2b46 	vmov.f64	d2, d6
 80010b6:	eeb0 3b47 	vmov.f64	d3, d7
 80010ba:	3740      	adds	r7, #64	@ 0x40
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080010c2 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80010c2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c6:	b090      	sub	sp, #64	@ 0x40
 80010c8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80010ca:	2020      	movs	r0, #32
 80010cc:	f7ff fdca 	bl	8000c64 <bno055_getVector>
 80010d0:	eeb0 4b40 	vmov.f64	d4, d0
 80010d4:	eeb0 5b41 	vmov.f64	d5, d1
 80010d8:	eeb0 6b42 	vmov.f64	d6, d2
 80010dc:	eeb0 7b43 	vmov.f64	d7, d3
 80010e0:	ed87 4b08 	vstr	d4, [r7, #32]
 80010e4:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80010e8:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80010ec:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80010f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80010f4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80010f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001100:	ec49 8b14 	vmov	d4, r8, r9
 8001104:	ec45 4b15 	vmov	d5, r4, r5
 8001108:	ec41 0b16 	vmov	d6, r0, r1
 800110c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001110:	eeb0 0b44 	vmov.f64	d0, d4
 8001114:	eeb0 1b45 	vmov.f64	d1, d5
 8001118:	eeb0 2b46 	vmov.f64	d2, d6
 800111c:	eeb0 3b47 	vmov.f64	d3, d7
 8001120:	3740      	adds	r7, #64	@ 0x40
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001128 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_ETH_Init+0x80>)
 800112e:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <MX_ETH_Init+0x84>)
 8001130:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_ETH_Init+0x88>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_ETH_Init+0x88>)
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_ETH_Init+0x88>)
 8001140:	22e1      	movs	r2, #225	@ 0xe1
 8001142:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_ETH_Init+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_ETH_Init+0x88>)
 800114c:	2200      	movs	r2, #0
 800114e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001150:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_ETH_Init+0x88>)
 8001152:	2200      	movs	r2, #0
 8001154:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_ETH_Init+0x80>)
 8001158:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <MX_ETH_Init+0x88>)
 800115a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_ETH_Init+0x80>)
 800115e:	2201      	movs	r2, #1
 8001160:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_ETH_Init+0x80>)
 8001164:	4a13      	ldr	r2, [pc, #76]	@ (80011b4 <MX_ETH_Init+0x8c>)
 8001166:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_ETH_Init+0x80>)
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <MX_ETH_Init+0x90>)
 800116c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_ETH_Init+0x80>)
 8001170:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001174:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <MX_ETH_Init+0x80>)
 8001178:	f001 fbda 	bl	8002930 <HAL_ETH_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001182:	f000 fee3 	bl	8001f4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001186:	2238      	movs	r2, #56	@ 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_ETH_Init+0x94>)
 800118c:	f009 fba6 	bl	800a8dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_ETH_Init+0x94>)
 8001192:	2221      	movs	r2, #33	@ 0x21
 8001194:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_ETH_Init+0x94>)
 8001198:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800119c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <MX_ETH_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240002f8 	.word	0x240002f8
 80011ac:	40028000 	.word	0x40028000
 80011b0:	240003a8 	.word	0x240003a8
 80011b4:	24000244 	.word	0x24000244
 80011b8:	240001e4 	.word	0x240001e4
 80011bc:	240002c0 	.word	0x240002c0

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a59      	ldr	r2, [pc, #356]	@ (8001344 <HAL_ETH_MspInit+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 80ab 	bne.w	800133a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011e4:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 80011e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ea:	4a57      	ldr	r2, [pc, #348]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 80011ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 80011f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001202:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800120a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001212:	4b4d      	ldr	r3, [pc, #308]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001220:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001226:	4a48      	ldr	r2, [pc, #288]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001230:	4b45      	ldr	r3, [pc, #276]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	4a40      	ldr	r2, [pc, #256]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124e:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001262:	4a39      	ldr	r2, [pc, #228]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126c:	4b36      	ldr	r3, [pc, #216]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 80012a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012b6:	2332      	movs	r3, #50	@ 0x32
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c6:	230b      	movs	r3, #11
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ce:	4619      	mov	r1, r3
 80012d0:	481e      	ldr	r0, [pc, #120]	@ (800134c <HAL_ETH_MspInit+0x18c>)
 80012d2:	f001 ff61 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012d6:	2386      	movs	r3, #134	@ 0x86
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e6:	230b      	movs	r3, #11
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <HAL_ETH_MspInit+0x190>)
 80012f2:	f001 ff51 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001308:	230b      	movs	r3, #11
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4810      	ldr	r0, [pc, #64]	@ (8001354 <HAL_ETH_MspInit+0x194>)
 8001314:	f001 ff40 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001318:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132a:	230b      	movs	r3, #11
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	4619      	mov	r1, r3
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <HAL_ETH_MspInit+0x198>)
 8001336:	f001 ff2f 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3738      	adds	r7, #56	@ 0x38
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40028000 	.word	0x40028000
 8001348:	58024400 	.word	0x58024400
 800134c:	58020800 	.word	0x58020800
 8001350:	58020000 	.word	0x58020000
 8001354:	58020400 	.word	0x58020400
 8001358:	58021800 	.word	0x58021800

0800135c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	4a2e      	ldr	r2, [pc, #184]	@ (8001424 <MX_GPIO_Init+0xc8>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001372:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_GPIO_Init+0xc8>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <MX_GPIO_Init+0xc8>)
 8001400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_GPIO_Init+0xc8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	58024400 	.word	0x58024400

08001428 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_I2C1_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_I2C1_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20D81128;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_I2C1_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <MX_I2C1_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_I2C1_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_I2C1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <MX_I2C1_Init+0x74>)
 8001464:	f002 f876 	bl	8003554 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800146e:	f000 fd6d 	bl	8001f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_I2C1_Init+0x74>)
 8001476:	f003 f8ad 	bl	80045d4 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fd64 	bl	8001f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_I2C1_Init+0x74>)
 8001488:	f003 f8ef 	bl	800466a <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 fd5b 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	240003b0 	.word	0x240003b0
 80014a0:	40005400 	.word	0x40005400
 80014a4:	20d81128 	.word	0x20d81128

080014a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_I2C2_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <MX_I2C2_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20D81128;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_I2C2_Init+0x74>)
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <MX_I2C2_Init+0x7c>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_I2C2_Init+0x74>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_I2C2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_I2C2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <MX_I2C2_Init+0x74>)
 80014e4:	f002 f836 	bl	8003554 <HAL_I2C_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ee:	f000 fd2d 	bl	8001f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <MX_I2C2_Init+0x74>)
 80014f6:	f003 f86d 	bl	80045d4 <HAL_I2CEx_ConfigAnalogFilter>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001500:	f000 fd24 	bl	8001f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_I2C2_Init+0x74>)
 8001508:	f003 f8af 	bl	800466a <HAL_I2CEx_ConfigDigitalFilter>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fd1b 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000404 	.word	0x24000404
 8001520:	40005800 	.word	0x40005800
 8001524:	20d81128 	.word	0x20d81128

08001528 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0bc      	sub	sp, #240	@ 0xf0
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	22c0      	movs	r2, #192	@ 0xc0
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f009 f9c7 	bl	800a8dc <memset>
  if(i2cHandle->Instance==I2C1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_I2C_MspInit+0x160>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d147      	bne.n	80015e8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001558:	f04f 0208 	mov.w	r2, #8
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fa48 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800157a:	f000 fce7 	bl	8001f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b43      	ldr	r3, [pc, #268]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	4a41      	ldr	r2, [pc, #260]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b6:	2304      	movs	r3, #4
 80015b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c0:	4619      	mov	r1, r3
 80015c2:	4833      	ldr	r0, [pc, #204]	@ (8001690 <HAL_I2C_MspInit+0x168>)
 80015c4:	f001 fde8 	bl	8003198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <HAL_I2C_MspInit+0x164>)
 80015ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <HAL_I2C_MspInit+0x164>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015d8:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <HAL_I2C_MspInit+0x164>)
 80015da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015e6:	e04b      	b.n	8001680 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <HAL_I2C_MspInit+0x16c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d146      	bne.n	8001680 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015f2:	f04f 0208 	mov.w	r2, #8
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f9fb 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001614:	f000 fc9a 	bl	8001f4c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_I2C_MspInit+0x164>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_I2C_MspInit+0x164>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001636:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800163a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001650:	2304      	movs	r3, #4
 8001652:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <HAL_I2C_MspInit+0x168>)
 800165e:	f001 fd9b 	bl	8003198 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001668:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_I2C_MspInit+0x164>)
 800166a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800166e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_I2C_MspInit+0x164>)
 8001674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
}
 8001680:	bf00      	nop
 8001682:	37f0      	adds	r7, #240	@ 0xf0
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40005400 	.word	0x40005400
 800168c:	58024400 	.word	0x58024400
 8001690:	58020400 	.word	0x58020400
 8001694:	40005800 	.word	0x40005800

08001698 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <bno055_assignI2C+0x1c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	24000458 	.word	0x24000458

080016b8 <bno055_delay>:

void bno055_delay(int time) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 ffe0 	bl	8002688 <HAL_Delay>
#endif
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	733b      	strb	r3, [r7, #12]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <bno055_writeData+0x168>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	230a      	movs	r3, #10
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2302      	movs	r3, #2
 80016f6:	2152      	movs	r1, #82	@ 0x52
 80016f8:	f001 ffc8 	bl	800368c <HAL_I2C_Master_Transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
//  HAL_I2C_Mem_Write(_bno055_i2c_port, BNO055_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, sizeof(data), HAL_MAX_DELAY);
  if (status == HAL_OK) {
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8092 	beq.w	800182c <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d103      	bne.n	8001716 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800170e:	484b      	ldr	r0, [pc, #300]	@ (800183c <bno055_writeData+0x16c>)
 8001710:	f008 ffe4 	bl	800a6dc <puts>
 8001714:	e012      	b.n	800173c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d103      	bne.n	8001724 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800171c:	4848      	ldr	r0, [pc, #288]	@ (8001840 <bno055_writeData+0x170>)
 800171e:	f008 ffdd 	bl	800a6dc <puts>
 8001722:	e00b      	b.n	800173c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d103      	bne.n	8001732 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800172a:	4846      	ldr	r0, [pc, #280]	@ (8001844 <bno055_writeData+0x174>)
 800172c:	f008 ffd6 	bl	800a6dc <puts>
 8001730:	e004      	b.n	800173c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	4619      	mov	r1, r3
 8001736:	4844      	ldr	r0, [pc, #272]	@ (8001848 <bno055_writeData+0x178>)
 8001738:	f008 ff68 	bl	800a60c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800173c:	4b3e      	ldr	r3, [pc, #248]	@ (8001838 <bno055_writeData+0x168>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fbed 	bl	8003f20 <HAL_I2C_GetError>
 8001746:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d070      	beq.n	8001830 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d103      	bne.n	800175c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001754:	483d      	ldr	r0, [pc, #244]	@ (800184c <bno055_writeData+0x17c>)
 8001756:	f008 ffc1 	bl	800a6dc <puts>
 800175a:	e021      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d103      	bne.n	800176a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001762:	483b      	ldr	r0, [pc, #236]	@ (8001850 <bno055_writeData+0x180>)
 8001764:	f008 ffba 	bl	800a6dc <puts>
 8001768:	e01a      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d103      	bne.n	8001778 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001770:	4838      	ldr	r0, [pc, #224]	@ (8001854 <bno055_writeData+0x184>)
 8001772:	f008 ffb3 	bl	800a6dc <puts>
 8001776:	e013      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d103      	bne.n	8001786 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800177e:	4836      	ldr	r0, [pc, #216]	@ (8001858 <bno055_writeData+0x188>)
 8001780:	f008 ffac 	bl	800a6dc <puts>
 8001784:	e00c      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b10      	cmp	r3, #16
 800178a:	d103      	bne.n	8001794 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800178c:	4833      	ldr	r0, [pc, #204]	@ (800185c <bno055_writeData+0x18c>)
 800178e:	f008 ffa5 	bl	800a6dc <puts>
 8001792:	e005      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b20      	cmp	r3, #32
 8001798:	d102      	bne.n	80017a0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800179a:	4831      	ldr	r0, [pc, #196]	@ (8001860 <bno055_writeData+0x190>)
 800179c:	f008 ff9e 	bl	800a6dc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <bno055_writeData+0x168>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fbad 	bl	8003f04 <HAL_I2C_GetState>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017b4:	482b      	ldr	r0, [pc, #172]	@ (8001864 <bno055_writeData+0x194>)
 80017b6:	f008 ff91 	bl	800a6dc <puts>
 80017ba:	e03a      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d103      	bne.n	80017ca <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017c2:	4828      	ldr	r0, [pc, #160]	@ (8001864 <bno055_writeData+0x194>)
 80017c4:	f008 ff8a 	bl	800a6dc <puts>
 80017c8:	e033      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b24      	cmp	r3, #36	@ 0x24
 80017ce:	d103      	bne.n	80017d8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80017d0:	4825      	ldr	r0, [pc, #148]	@ (8001868 <bno055_writeData+0x198>)
 80017d2:	f008 ff83 	bl	800a6dc <puts>
 80017d6:	e02c      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b21      	cmp	r3, #33	@ 0x21
 80017dc:	d103      	bne.n	80017e6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80017de:	4823      	ldr	r0, [pc, #140]	@ (800186c <bno055_writeData+0x19c>)
 80017e0:	f008 ff7c 	bl	800a6dc <puts>
 80017e4:	e025      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b22      	cmp	r3, #34	@ 0x22
 80017ea:	d103      	bne.n	80017f4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80017ec:	4820      	ldr	r0, [pc, #128]	@ (8001870 <bno055_writeData+0x1a0>)
 80017ee:	f008 ff75 	bl	800a6dc <puts>
 80017f2:	e01e      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b28      	cmp	r3, #40	@ 0x28
 80017f8:	d103      	bne.n	8001802 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80017fa:	481e      	ldr	r0, [pc, #120]	@ (8001874 <bno055_writeData+0x1a4>)
 80017fc:	f008 ff6e 	bl	800a6dc <puts>
 8001800:	e017      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b29      	cmp	r3, #41	@ 0x29
 8001806:	d103      	bne.n	8001810 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001808:	481b      	ldr	r0, [pc, #108]	@ (8001878 <bno055_writeData+0x1a8>)
 800180a:	f008 ff67 	bl	800a6dc <puts>
 800180e:	e010      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b2a      	cmp	r3, #42	@ 0x2a
 8001814:	d103      	bne.n	800181e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001816:	4819      	ldr	r0, [pc, #100]	@ (800187c <bno055_writeData+0x1ac>)
 8001818:	f008 ff60 	bl	800a6dc <puts>
 800181c:	e009      	b.n	8001832 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b60      	cmp	r3, #96	@ 0x60
 8001822:	d106      	bne.n	8001832 <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <bno055_writeData+0x1b0>)
 8001826:	f008 ff59 	bl	800a6dc <puts>
 800182a:	e002      	b.n	8001832 <bno055_writeData+0x162>
    return;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <bno055_writeData+0x162>
    return;
 8001830:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24000458 	.word	0x24000458
 800183c:	0800e46c 	.word	0x0800e46c
 8001840:	0800e490 	.word	0x0800e490
 8001844:	0800e4b8 	.word	0x0800e4b8
 8001848:	0800e4dc 	.word	0x0800e4dc
 800184c:	0800e4f4 	.word	0x0800e4f4
 8001850:	0800e508 	.word	0x0800e508
 8001854:	0800e51c 	.word	0x0800e51c
 8001858:	0800e530 	.word	0x0800e530
 800185c:	0800e544 	.word	0x0800e544
 8001860:	0800e558 	.word	0x0800e558
 8001864:	0800e570 	.word	0x0800e570
 8001868:	0800e588 	.word	0x0800e588
 800186c:	0800e59c 	.word	0x0800e59c
 8001870:	0800e5b4 	.word	0x0800e5b4
 8001874:	0800e5cc 	.word	0x0800e5cc
 8001878:	0800e5e4 	.word	0x0800e5e4
 800187c:	0800e604 	.word	0x0800e604
 8001880:	0800e624 	.word	0x0800e624

08001884 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af02      	add	r7, sp, #8
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <bno055_readData+0x40>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	1dfa      	adds	r2, r7, #7
 800189a:	2364      	movs	r3, #100	@ 0x64
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	2152      	movs	r1, #82	@ 0x52
 80018a2:	f001 fef3 	bl	800368c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <bno055_readData+0x40>)
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2264      	movs	r2, #100	@ 0x64
 80018b0:	9200      	str	r2, [sp, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	2152      	movs	r1, #82	@ 0x52
 80018b6:	f002 f801 	bl	80038bc <HAL_I2C_Master_Receive>
                         100);
//   HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
//   I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000458 	.word	0x24000458

080018c8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d102      	bne.n	80018dc <__io_putchar+0x14>
		__io_putchar('\r');
 80018d6:	200d      	movs	r0, #13
 80018d8:	f7ff fff6 	bl	80018c8 <__io_putchar>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80018dc:	1d39      	adds	r1, r7, #4
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	2201      	movs	r2, #1
 80018e4:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <__io_putchar+0x2c>)
 80018e6:	f006 f9e5 	bl	8007cb4 <HAL_UART_Transmit>
	return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	240004f4 	.word	0x240004f4

080018f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b0c6      	sub	sp, #280	@ 0x118
 80018fe:	af06      	add	r7, sp, #24
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001904:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001908:	bf00      	nop
 800190a:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <main+0xec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <main+0x2c>
 8001916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001920:	2b00      	cmp	r3, #0
 8001922:	dcf2      	bgt.n	800190a <main+0x12>
		;
	if (timeout < 0) {
 8001924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001928:	2b00      	cmp	r3, #0
 800192a:	da01      	bge.n	8001930 <main+0x38>
		Error_Handler();
 800192c:	f000 fb0e 	bl	8001f4c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001930:	f000 fe18 	bl	8002564 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001934:	f000 fa90 	bl	8001e58 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001938:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <main+0xec>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a29      	ldr	r2, [pc, #164]	@ (80019e4 <main+0xec>)
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <main+0xec>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800195a:	2000      	movs	r0, #0
 800195c:	f001 fdcc 	bl	80034f8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f001 fde2 	bl	800352c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800196c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001970:	bf00      	nop
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <main+0xec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <main+0x94>
 800197e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001988:	2b00      	cmp	r3, #0
 800198a:	dcf2      	bgt.n	8001972 <main+0x7a>
		;
	if (timeout < 0) {
 800198c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001990:	2b00      	cmp	r3, #0
 8001992:	da01      	bge.n	8001998 <main+0xa0>
		Error_Handler();
 8001994:	f000 fada 	bl	8001f4c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001998:	f7ff fce0 	bl	800135c <MX_GPIO_Init>
	MX_ETH_Init();
 800199c:	f7ff fbc4 	bl	8001128 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80019a0:	f000 fc52 	bl	8002248 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80019a4:	f000 fd06 	bl	80023b4 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 80019a8:	f7ff fd3e 	bl	8001428 <MX_I2C1_Init>
	MX_TIM6_Init();
 80019ac:	f000 fbee 	bl	800218c <MX_TIM6_Init>
	MX_I2C2_Init();
 80019b0:	f7ff fd7a 	bl	80014a8 <MX_I2C2_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LPS22HH_Init();
 80019b4:	f007 fe48 	bl	8009648 <LPS22HH_Init>
	HAL_Delay(3000); // dla inicjalizacji, wazne jak korzystam z usredniania w ukladzie - by sam mogl przeliczy inicjalne probki i wpisac do fifo itp
 80019b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80019bc:	f000 fe64 	bl	8002688 <HAL_Delay>

	struct values_lps result_lps = lps_read_val();
 80019c0:	f007 fdd8 	bl	8009574 <lps_read_val>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	eef0 7a60 	vmov.f32	s15, s1
 80019cc:	ed87 7a39 	vstr	s14, [r7, #228]	@ 0xe4
 80019d0:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
	p0 = result_lps.pressure;
 80019d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80019d8:	4a03      	ldr	r2, [pc, #12]	@ (80019e8 <main+0xf0>)
 80019da:	6013      	str	r3, [r2, #0]

	// wypełnienie tablicy filtra frdniej kraczacej poczatkowymi danymi
	for (int i = 0; i < FILTER_SIZE; i++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80019e2:	e010      	b.n	8001a06 <main+0x10e>
 80019e4:	58024400 	.word	0x58024400
 80019e8:	24000490 	.word	0x24000490
		pressure_values[i] = p0; // Wypełnienie tablicy pierwszym pomiarem
 80019ec:	4bda      	ldr	r3, [pc, #872]	@ (8001d58 <main+0x460>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	49da      	ldr	r1, [pc, #872]	@ (8001d5c <main+0x464>)
 80019f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FILTER_SIZE; i++) {
 80019fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a00:	3301      	adds	r3, #1
 8001a02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	ddee      	ble.n	80019ec <main+0xf4>
	}
	filter_index = 0; // Reset indeksu
 8001a0e:	4bd4      	ldr	r3, [pc, #848]	@ (8001d60 <main+0x468>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
	KalmanFilter kf;
	// Inicjalizacja filtru Kalmana
	//pierwsza stała w tym przypadku to przybliżenie niepewności dotyczącej modelu procesu, czyli tego, jak zmienia się stan między kolejnymi iteracjami.
	//druga stała w tym przypadku to szacowanie niepewności w odczytach czujnika (np. szumu w pomiarze ciśnienia atmosferycznego).
	kalman_init(&kf, p0, 1.0f, 1.0f);// Wariancja procesu i pomiaru (dopasuj do aplikacji)
 8001a14:	4bd0      	ldr	r3, [pc, #832]	@ (8001d58 <main+0x460>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001a1e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001a22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fe78 	bl	8009720 <kalman_init>

	//	//ACC init
	bno055_assignI2C(&hi2c2);
 8001a30:	48cc      	ldr	r0, [pc, #816]	@ (8001d64 <main+0x46c>)
 8001a32:	f7ff fe31 	bl	8001698 <bno055_assignI2C>
	bno055_setup();
 8001a36:	f7ff f8ed 	bl	8000c14 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001a3a:	f7ff f8d8 	bl	8000bee <bno055_setOperationModeNDOF>
	HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a42:	f000 fe21 	bl	8002688 <HAL_Delay>
//
//		HAL_Delay(100);

		//Wersja z dodaniem warunków i semi fuzja danych -----------------------------------------------------------------------------------------------------------
		// 1) Odczyt barometru i obliczenie wysokości
		struct values_lps result_lps = lps_read_val();
 8001a46:	f007 fd95 	bl	8009574 <lps_read_val>
 8001a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4e:	eef0 7a60 	vmov.f32	s15, s1
 8001a52:	ed87 7a31 	vstr	s14, [r7, #196]	@ 0xc4
 8001a56:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
		t = result_lps.temp;
 8001a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5e:	4ac2      	ldr	r2, [pc, #776]	@ (8001d68 <main+0x470>)
 8001a60:	6013      	str	r3, [r2, #0]
		p = result_lps.pressure;
 8001a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a66:	4ac1      	ldr	r2, [pc, #772]	@ (8001d6c <main+0x474>)
 8001a68:	6013      	str	r3, [r2, #0]

		float filtered_pressure = apply_moving_average(pressure_values,
 8001a6a:	4bc0      	ldr	r3, [pc, #768]	@ (8001d6c <main+0x474>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	220a      	movs	r2, #10
 8001a76:	49ba      	ldr	r1, [pc, #744]	@ (8001d60 <main+0x468>)
 8001a78:	48b8      	ldr	r0, [pc, #736]	@ (8001d5c <main+0x464>)
 8001a7a:	f007 fe0b 	bl	8009694 <apply_moving_average>
 8001a7e:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
				&filter_index, FILTER_SIZE, p);
		float filtered_pressure_Kalman = kalman_update(&kf, p);
 8001a82:	4bba      	ldr	r3, [pc, #744]	@ (8001d6c <main+0x474>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fe66 	bl	8009762 <kalman_update>
 8001a96:	ed87 0a3c 	vstr	s0, [r7, #240]	@ 0xf0

		// liczenie
		h = 44330.0 * (1.0 - pow(p / p0, 0.1903));
 8001a9a:	4bb4      	ldr	r3, [pc, #720]	@ (8001d6c <main+0x474>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	4bad      	ldr	r3, [pc, #692]	@ (8001d58 <main+0x460>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aae:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8001d48 <main+0x450>
 8001ab2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab6:	f00c f9e7 	bl	800de88 <pow>
 8001aba:	eeb0 7b40 	vmov.f64	d7, d0
 8001abe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001ac2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ac6:	ed9f 6ba2 	vldr	d6, [pc, #648]	@ 8001d50 <main+0x458>
 8001aca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ad2:	4ba7      	ldr	r3, [pc, #668]	@ (8001d70 <main+0x478>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
		h_over_filter = 44330.0 * (1.0 - pow(filtered_pressure / p0, 0.1903));
 8001ad8:	4b9f      	ldr	r3, [pc, #636]	@ (8001d58 <main+0x460>)
 8001ada:	ed93 7a00 	vldr	s14, [r3]
 8001ade:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8001ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aea:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001d48 <main+0x450>
 8001aee:	eeb0 0b47 	vmov.f64	d0, d7
 8001af2:	f00c f9c9 	bl	800de88 <pow>
 8001af6:	eeb0 7b40 	vmov.f64	d7, d0
 8001afa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001afe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b02:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8001d50 <main+0x458>
 8001b06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b0e:	4b99      	ldr	r3, [pc, #612]	@ (8001d74 <main+0x47c>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]
		h_over_Kalman = 44330.0
				* (1.0 - pow(filtered_pressure_Kalman / p0, 0.1903));
 8001b14:	4b90      	ldr	r3, [pc, #576]	@ (8001d58 <main+0x460>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b26:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8001d48 <main+0x450>
 8001b2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b2e:	f00c f9ab 	bl	800de88 <pow>
 8001b32:	eeb0 7b40 	vmov.f64	d7, d0
 8001b36:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001b3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b3e:	ed9f 6b84 	vldr	d6, [pc, #528]	@ 8001d50 <main+0x458>
 8001b42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		h_over_Kalman = 44330.0
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d78 <main+0x480>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]

		// 2) Sprawdzam przyspieszenie liniowe z BNO055
		bno055_vector_t linAccel = bno055_getVectorLinearAccel();
 8001b50:	f7ff fa84 	bl	800105c <bno055_getVectorLinearAccel>
 8001b54:	eeb0 4b40 	vmov.f64	d4, d0
 8001b58:	eeb0 5b41 	vmov.f64	d5, d1
 8001b5c:	eeb0 6b42 	vmov.f64	d6, d2
 8001b60:	eeb0 7b43 	vmov.f64	d7, d3
 8001b64:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b6c:	ed83 4b00 	vstr	d4, [r3]
 8001b70:	ed83 5b02 	vstr	d5, [r3, #8]
 8001b74:	ed83 6b04 	vstr	d6, [r3, #16]
 8001b78:	ed83 7b06 	vstr	d7, [r3, #24]
		//tu jest to przeliczenie - ktore pozniej jest brane pod uwage przy sprawdzenu ruchu - czuli oblicznay jest wypadkowy wektor
		float linAccelMagnitude = sqrtf(
				linAccel.x * linAccel.x + linAccel.y * linAccel.y
 8001b7c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b84:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b88:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b90:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b98:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ba0:	ed93 5b04 	vldr	d5, [r3, #16]
 8001ba4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001ba8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bac:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
						+ linAccel.z * linAccel.z);
 8001bb8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001bbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bc0:	ed93 5b06 	vldr	d5, [r3, #24]
 8001bc4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001bc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bcc:	ed93 7b06 	vldr	d7, [r3, #24]
 8001bd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
		float linAccelMagnitude = sqrtf(
 8001bd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00c f900 	bl	800dde4 <sqrtf>
 8001be4:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec

		// 3) Jeśli czujnik prawie w ogóle się nie porusza, to zamrażam wysokość:
		// treshold wyzwalania to #define NO_MOTION_THRESHOLD  0.05f - czyli 0.05 m/s²

		printf("Wypadkowy wektor: %f\n", linAccelMagnitude);
 8001be8:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf0:	ec53 2b17 	vmov	r2, r3, d7
 8001bf4:	4861      	ldr	r0, [pc, #388]	@ (8001d7c <main+0x484>)
 8001bf6:	f008 fd09 	bl	800a60c <iprintf>

		if (linAccelMagnitude > NO_MOTION_THRESHOLD) {
 8001bfa:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	dd03      	ble.n	8001c14 <main+0x31c>
			//h_over_Kalman = stable_altitude;
			changing_altitude = h_over_Kalman;
 8001c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001d78 <main+0x480>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5b      	ldr	r2, [pc, #364]	@ (8001d80 <main+0x488>)
 8001c12:	6013      	str	r3, [r2, #0]
		} else {
			//stable_altitude = h_over_Kalman;
		}

		// 4)  wyniki
		printf("T = %.1f*C\n", t);
 8001c14:	4b54      	ldr	r3, [pc, #336]	@ (8001d68 <main+0x470>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c1e:	ec53 2b17 	vmov	r2, r3, d7
 8001c22:	4858      	ldr	r0, [pc, #352]	@ (8001d84 <main+0x48c>)
 8001c24:	f008 fcf2 	bl	800a60c <iprintf>
		printf("p = %.1f hPa\n", p);
 8001c28:	4b50      	ldr	r3, [pc, #320]	@ (8001d6c <main+0x474>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c32:	ec53 2b17 	vmov	r2, r3, d7
 8001c36:	4854      	ldr	r0, [pc, #336]	@ (8001d88 <main+0x490>)
 8001c38:	f008 fce8 	bl	800a60c <iprintf>
		printf("h przed filtracją           = %.2f m\n", h);
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <main+0x478>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c46:	ec53 2b17 	vmov	r2, r3, d7
 8001c4a:	4850      	ldr	r0, [pc, #320]	@ (8001d8c <main+0x494>)
 8001c4c:	f008 fcde 	bl	800a60c <iprintf>
		printf("h po filtracji (krocząca)   = %.2f m\n", h_over_filter);
 8001c50:	4b48      	ldr	r3, [pc, #288]	@ (8001d74 <main+0x47c>)
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c5a:	ec53 2b17 	vmov	r2, r3, d7
 8001c5e:	484c      	ldr	r0, [pc, #304]	@ (8001d90 <main+0x498>)
 8001c60:	f008 fcd4 	bl	800a60c <iprintf>
		printf("h po filtracji (Kalman)     = %.2f m\n", h_over_Kalman);
 8001c64:	4b44      	ldr	r3, [pc, #272]	@ (8001d78 <main+0x480>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6e:	ec53 2b17 	vmov	r2, r3, d7
 8001c72:	4848      	ldr	r0, [pc, #288]	@ (8001d94 <main+0x49c>)
 8001c74:	f008 fcca 	bl	800a60c <iprintf>
		printf("h po zlaczeniu danych       = %.2f m\n", changing_altitude);
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <main+0x488>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c82:	ec53 2b17 	vmov	r2, r3, d7
 8001c86:	4844      	ldr	r0, [pc, #272]	@ (8001d98 <main+0x4a0>)
 8001c88:	f008 fcc0 	bl	800a60c <iprintf>
		// Dane z akcelerometru "raw" (dla podglądu)
		bno055_vector_t accel = bno055_getVectorAccelerometer();
 8001c8c:	f7ff f91a 	bl	8000ec4 <bno055_getVectorAccelerometer>
 8001c90:	eeb0 4b40 	vmov.f64	d4, d0
 8001c94:	eeb0 5b41 	vmov.f64	d5, d1
 8001c98:	eeb0 6b42 	vmov.f64	d6, d2
 8001c9c:	eeb0 7b43 	vmov.f64	d7, d3
 8001ca0:	ed87 4b08 	vstr	d4, [r7, #32]
 8001ca4:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001ca8:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001cac:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
		printf("Accel Raw - X: %.2f Y: %.2f Z: %.2f (m/s²)\r\n", accel.x,
 8001cb0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001cb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cc0:	e9cd 2300 	strd	r2, r3, [sp]
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	4834      	ldr	r0, [pc, #208]	@ (8001d9c <main+0x4a4>)
 8001cca:	f008 fc9f 	bl	800a60c <iprintf>
				accel.y, accel.z);

		// Kąty Eulera po fuzji danych
		bno055_vector_t euler = bno055_getVectorEuler();
 8001cce:	f7ff f992 	bl	8000ff6 <bno055_getVectorEuler>
 8001cd2:	eeb0 4b40 	vmov.f64	d4, d0
 8001cd6:	eeb0 5b41 	vmov.f64	d5, d1
 8001cda:	eeb0 6b42 	vmov.f64	d6, d2
 8001cde:	eeb0 7b43 	vmov.f64	d7, d3
 8001ce2:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8001ce6:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8001cea:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8001cee:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
		printf("Euler - Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", euler.x,
 8001cf2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001cf6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d02:	e9cd 2300 	strd	r2, r3, [sp]
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	4825      	ldr	r0, [pc, #148]	@ (8001da0 <main+0x4a8>)
 8001d0c:	f008 fc7e 	bl	800a60c <iprintf>
				euler.y, euler.z);

		// Kwaterniony
		bno055_vector_t quat = bno055_getVectorQuaternion();
 8001d10:	f7ff f9d7 	bl	80010c2 <bno055_getVectorQuaternion>
 8001d14:	eeb0 4b40 	vmov.f64	d4, d0
 8001d18:	eeb0 5b41 	vmov.f64	d5, d1
 8001d1c:	eeb0 6b42 	vmov.f64	d6, d2
 8001d20:	eeb0 7b43 	vmov.f64	d7, d3
 8001d24:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
 8001d28:	ed87 5b1a 	vstr	d5, [r7, #104]	@ 0x68
 8001d2c:	ed87 6b1c 	vstr	d6, [r7, #112]	@ 0x70
 8001d30:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
		printf("Quaternion - W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", quat.w,
 8001d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001d38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001d3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d40:	e030      	b.n	8001da4 <main+0x4ac>
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	1a36e2eb 	.word	0x1a36e2eb
 8001d4c:	3fc85bc0 	.word	0x3fc85bc0
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40e5a540 	.word	0x40e5a540
 8001d58:	24000490 	.word	0x24000490
 8001d5c:	2400045c 	.word	0x2400045c
 8001d60:	24000484 	.word	0x24000484
 8001d64:	24000404 	.word	0x24000404
 8001d68:	24000488 	.word	0x24000488
 8001d6c:	2400048c 	.word	0x2400048c
 8001d70:	24000494 	.word	0x24000494
 8001d74:	24000498 	.word	0x24000498
 8001d78:	2400049c 	.word	0x2400049c
 8001d7c:	0800e680 	.word	0x0800e680
 8001d80:	240004a0 	.word	0x240004a0
 8001d84:	0800e698 	.word	0x0800e698
 8001d88:	0800e6a4 	.word	0x0800e6a4
 8001d8c:	0800e6b4 	.word	0x0800e6b4
 8001d90:	0800e6dc 	.word	0x0800e6dc
 8001d94:	0800e704 	.word	0x0800e704
 8001d98:	0800e72c 	.word	0x0800e72c
 8001d9c:	0800e754 	.word	0x0800e754
 8001da0:	0800e784 	.word	0x0800e784
 8001da4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001da8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001db0:	e9cd 2300 	strd	r2, r3, [sp]
 8001db4:	4642      	mov	r2, r8
 8001db6:	464b      	mov	r3, r9
 8001db8:	4824      	ldr	r0, [pc, #144]	@ (8001e4c <main+0x554>)
 8001dba:	f008 fc27 	bl	800a60c <iprintf>
				quat.x, quat.y, quat.z);


		// Dane surowe z magnetometru
		bno055_vector_t mag = bno055_getVectorMagnetometer();
 8001dbe:	f7ff f8b4 	bl	8000f2a <bno055_getVectorMagnetometer>
 8001dc2:	eeb0 4b40 	vmov.f64	d4, d0
 8001dc6:	eeb0 5b41 	vmov.f64	d5, d1
 8001dca:	eeb0 6b42 	vmov.f64	d6, d2
 8001dce:	eeb0 7b43 	vmov.f64	d7, d3
 8001dd2:	ed87 4b20 	vstr	d4, [r7, #128]	@ 0x80
 8001dd6:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8001dda:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8001dde:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98
		printf("Magnetometer Raw - X: %.2f Y: %.2f Z: %.2f (µT)\r\n", mag.x,
 8001de2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001de6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001dea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001df2:	e9cd 2300 	strd	r2, r3, [sp]
 8001df6:	4622      	mov	r2, r4
 8001df8:	462b      	mov	r3, r5
 8001dfa:	4815      	ldr	r0, [pc, #84]	@ (8001e50 <main+0x558>)
 8001dfc:	f008 fc06 	bl	800a60c <iprintf>
				mag.y, mag.z);

		// Dane surowe z żyroskopu
		bno055_vector_t gyro = bno055_getVectorGyroscope();
 8001e00:	f7ff f8c6 	bl	8000f90 <bno055_getVectorGyroscope>
 8001e04:	eeb0 4b40 	vmov.f64	d4, d0
 8001e08:	eeb0 5b41 	vmov.f64	d5, d1
 8001e0c:	eeb0 6b42 	vmov.f64	d6, d2
 8001e10:	eeb0 7b43 	vmov.f64	d7, d3
 8001e14:	ed87 4b28 	vstr	d4, [r7, #160]	@ 0xa0
 8001e18:	ed87 5b2a 	vstr	d5, [r7, #168]	@ 0xa8
 8001e1c:	ed87 6b2c 	vstr	d6, [r7, #176]	@ 0xb0
 8001e20:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8
		printf("Gyro Raw - X: %.2f Y: %.2f Z: %.2f (°/s)\r\n", gyro.x, gyro.y,
 8001e24:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8001e28:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001e2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e34:	e9cd 2300 	strd	r2, r3, [sp]
 8001e38:	4622      	mov	r2, r4
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <main+0x55c>)
 8001e3e:	f008 fbe5 	bl	800a60c <iprintf>
				gyro.z);

		//dla serial plota
//		printf("%.2f %.2f %.2f\r\n", accel.x, accel.y, accel.z);
		HAL_Delay(100);
 8001e42:	2064      	movs	r0, #100	@ 0x64
 8001e44:	f000 fc20 	bl	8002688 <HAL_Delay>
	while (1) {
 8001e48:	e5fd      	b.n	8001a46 <main+0x14e>
 8001e4a:	bf00      	nop
 8001e4c:	0800e7b4 	.word	0x0800e7b4
 8001e50:	0800e7e4 	.word	0x0800e7e4
 8001e54:	0800e818 	.word	0x0800e818

08001e58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09c      	sub	sp, #112	@ 0x70
 8001e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e62:	224c      	movs	r2, #76	@ 0x4c
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f008 fd38 	bl	800a8dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2220      	movs	r2, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f008 fd32 	bl	800a8dc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001e78:	2004      	movs	r0, #4
 8001e7a:	f002 fd73 	bl	8004964 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <SystemClock_Config+0xec>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	4a2f      	ldr	r2, [pc, #188]	@ (8001f44 <SystemClock_Config+0xec>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <SystemClock_Config+0xec>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <SystemClock_Config+0xf0>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <SystemClock_Config+0xf0>)
 8001e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <SystemClock_Config+0xf0>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001eb0:	bf00      	nop
 8001eb2:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <SystemClock_Config+0xf0>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ebe:	d1f8      	bne.n	8001eb2 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ec4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001ed6:	2364      	movs	r3, #100	@ 0x64
 8001ed8:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 13;
 8001ede:	230d      	movs	r3, #13
 8001ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fd9e 	bl	8004a38 <HAL_RCC_OscConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xae>
		Error_Handler();
 8001f02:	f000 f823 	bl	8001f4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f06:	233f      	movs	r3, #63	@ 0x3f
 8001f08:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f12:	2308      	movs	r3, #8
 8001f14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f16:	2340      	movs	r3, #64	@ 0x40
 8001f18:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f1a:	2340      	movs	r3, #64	@ 0x40
 8001f1c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f22:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f24:	2340      	movs	r3, #64	@ 0x40
 8001f26:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 f9dd 	bl	80052ec <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xe4>
		Error_Handler();
 8001f38:	f000 f808 	bl	8001f4c <Error_Handler>
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	3770      	adds	r7, #112	@ 0x70
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58000400 	.word	0x58000400
 8001f48:	58024800 	.word	0x58024800

08001f4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <Error_Handler+0x8>

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_MspInit+0x30>)
 8001f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f64:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <HAL_MspInit+0x30>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_MspInit+0x30>)
 8001f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58024400 	.word	0x58024400

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe2:	f000 fb31 	bl	8002648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <TIM6_DAC_IRQHandler+0x10>)
 8001ff2:	f005 fb8a 	bl	800770a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	240004a8 	.word	0x240004a8

08002000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_kill>:

int _kill(int pid, int sig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800201a:	f008 fcb1 	bl	800a980 <__errno>
 800201e:	4603      	mov	r3, r0
 8002020:	2216      	movs	r2, #22
 8002022:	601a      	str	r2, [r3, #0]
  return -1;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_exit>:

void _exit (int status)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ffe7 	bl	8002010 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002042:	bf00      	nop
 8002044:	e7fd      	b.n	8002042 <_exit+0x12>

08002046 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e00a      	b.n	800206e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002058:	f3af 8000 	nop.w
 800205c:	4601      	mov	r1, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf0      	blt.n	8002058 <_read+0x12>
  }

  return len;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e009      	b.n	80020a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fc14 	bl	80018c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf1      	blt.n	8002092 <_write+0x12>
  }
  return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_close>:

int _close(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e0:	605a      	str	r2, [r3, #4]
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f008 fc16 	bl	800a980 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24080000 	.word	0x24080000
 8002180:	00000400 	.word	0x00000400
 8002184:	240004a4 	.word	0x240004a4
 8002188:	24000bc0 	.word	0x24000bc0

0800218c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_TIM6_Init+0x64>)
 800219e:	4a15      	ldr	r2, [pc, #84]	@ (80021f4 <MX_TIM6_Init+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80021a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021b2:	2263      	movs	r2, #99	@ 0x63
 80021b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021bc:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021be:	f005 fa4d 	bl	800765c <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80021c8:	f7ff fec0 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_TIM6_Init+0x64>)
 80021da:	f005 fc6f 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80021e4:	f7ff feb2 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	240004a8 	.word	0x240004a8
 80021f4:	40001000 	.word	0x40001000

080021f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0e      	ldr	r2, [pc, #56]	@ (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d116      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_TIM_Base_MspInit+0x4c>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <HAL_TIM_Base_MspInit+0x4c>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_TIM_Base_MspInit+0x4c>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2107      	movs	r1, #7
 800222c:	2036      	movs	r0, #54	@ 0x36
 800222e:	f000 fb4a 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002232:	2036      	movs	r0, #54	@ 0x36
 8002234:	f000 fb61 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40001000 	.word	0x40001000
 8002244:	58024400 	.word	0x58024400

08002248 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800224c:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 800224e:	4a23      	ldr	r2, [pc, #140]	@ (80022dc <MX_USART3_UART_Init+0x94>)
 8002250:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002266:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002290:	4811      	ldr	r0, [pc, #68]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 8002292:	f005 fcbf 	bl	8007c14 <HAL_UART_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800229c:	f7ff fe56 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a0:	2100      	movs	r1, #0
 80022a2:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 80022a4:	f006 fd55 	bl	8008d52 <HAL_UARTEx_SetTxFifoThreshold>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022ae:	f7ff fe4d 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b2:	2100      	movs	r1, #0
 80022b4:	4808      	ldr	r0, [pc, #32]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 80022b6:	f006 fd8a 	bl	8008dce <HAL_UARTEx_SetRxFifoThreshold>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022c0:	f7ff fe44 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <MX_USART3_UART_Init+0x90>)
 80022c6:	f006 fd0b 	bl	8008ce0 <HAL_UARTEx_DisableFifoMode>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022d0:	f7ff fe3c 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	240004f4 	.word	0x240004f4
 80022dc:	40004800 	.word	0x40004800

080022e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0ba      	sub	sp, #232	@ 0xe8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	22c0      	movs	r2, #192	@ 0xc0
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f008 faeb 	bl	800a8dc <memset>
  if(uartHandle->Instance==USART3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_UART_MspInit+0xc8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d146      	bne.n	800239e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002310:	f04f 0202 	mov.w	r2, #2
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fb6c 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002332:	f7ff fe0b 	bl	8001f4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 8002338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800233c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 800233e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002342:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 8002348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800234c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_UART_MspInit+0xcc>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002372:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800238c:	2307      	movs	r3, #7
 800238e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002392:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <HAL_UART_MspInit+0xd0>)
 800239a:	f000 fefd 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800239e:	bf00      	nop
 80023a0:	37e8      	adds	r7, #232	@ 0xe8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40004800 	.word	0x40004800
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58020c00 	.word	0x58020c00

080023b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023b8:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80023bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80023be:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023c0:	2209      	movs	r2, #9
 80023c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023d2:	2202      	movs	r2, #2
 80023d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023d8:	2201      	movs	r2, #1
 80023da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80023e8:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	@ (8002410 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023fc:	f002 f981 	bl	8004702 <HAL_PCD_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002406:	f7ff fda1 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	24000588 	.word	0x24000588
 8002414:	40080000 	.word	0x40080000

08002418 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0ba      	sub	sp, #232	@ 0xe8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	22c0      	movs	r2, #192	@ 0xc0
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f008 fa4f 	bl	800a8dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a30      	ldr	r2, [pc, #192]	@ (8002504 <HAL_PCD_MspInit+0xec>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d159      	bne.n	80024fc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002448:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002454:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4618      	mov	r0, r3
 8002462:	f003 facf 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800246c:	f7ff fd6e 	bl	8001f4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002470:	f002 fad2 	bl	8004a18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247a:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002492:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024ac:	230a      	movs	r3, #10
 80024ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4814      	ldr	r0, [pc, #80]	@ (800250c <HAL_PCD_MspInit+0xf4>)
 80024ba:	f000 fe6d 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024d6:	4619      	mov	r1, r3
 80024d8:	480c      	ldr	r0, [pc, #48]	@ (800250c <HAL_PCD_MspInit+0xf4>)
 80024da:	f000 fe5d 	bl	8003198 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 80024e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024e4:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 80024e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_PCD_MspInit+0xf0>)
 80024f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80024fc:	bf00      	nop
 80024fe:	37e8      	adds	r7, #232	@ 0xe8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40080000 	.word	0x40080000
 8002508:	58024400 	.word	0x58024400
 800250c:	58020000 	.word	0x58020000

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002548 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002514:	f7fe faa8 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002518:	480c      	ldr	r0, [pc, #48]	@ (800254c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800251a:	490d      	ldr	r1, [pc, #52]	@ (8002550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002520:	e002      	b.n	8002528 <LoopCopyDataInit>

08002522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002526:	3304      	adds	r3, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800252c:	d3f9      	bcc.n	8002522 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002530:	4c0a      	ldr	r4, [pc, #40]	@ (800255c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002534:	e001      	b.n	800253a <LoopFillZerobss>

08002536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002538:	3204      	adds	r2, #4

0800253a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800253c:	d3fb      	bcc.n	8002536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253e:	f008 fa25 	bl	800a98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7ff f9d9 	bl	80018f8 <main>
  bx  lr
 8002546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002548:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800254c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002550:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002554:	080105a0 	.word	0x080105a0
  ldr r2, =_sbss
 8002558:	240002a4 	.word	0x240002a4
  ldr r4, =_ebss
 800255c:	24000bbc 	.word	0x24000bbc

08002560 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC3_IRQHandler>
	...

08002564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256a:	2003      	movs	r0, #3
 800256c:	f000 f9a0 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002570:	f003 f872 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_Init+0x68>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	4913      	ldr	r1, [pc, #76]	@ (80025d0 <HAL_Init+0x6c>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <HAL_Init+0x68>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <HAL_Init+0x6c>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_Init+0x70>)
 80025a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a8:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_Init+0x74>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 f814 	bl	80025dc <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e002      	b.n	80025c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025be:	f7ff fccb 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	58024400 	.word	0x58024400
 80025d0:	0800e874 	.word	0x0800e874
 80025d4:	24000004 	.word	0x24000004
 80025d8:	24000000 	.word	0x24000000

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_InitTick+0x60>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e021      	b.n	8002634 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025f0:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_InitTick+0x64>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_InitTick+0x60>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f985 	bl	8002916 <HAL_SYSTICK_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00e      	b.n	8002634 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b0f      	cmp	r3, #15
 800261a:	d80a      	bhi.n	8002632 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800261c:	2200      	movs	r2, #0
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f000 f94f 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002628:	4a06      	ldr	r2, [pc, #24]	@ (8002644 <HAL_InitTick+0x68>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	24000018 	.word	0x24000018
 8002640:	24000000 	.word	0x24000000
 8002644:	24000014 	.word	0x24000014

08002648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_IncTick+0x20>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_IncTick+0x24>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_IncTick+0x24>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	24000018 	.word	0x24000018
 800266c:	24000a6c 	.word	0x24000a6c

08002670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_GetTick+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	24000a6c 	.word	0x24000a6c

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff ffee 	bl	8002670 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d005      	beq.n	80026ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_Delay+0x44>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ae:	bf00      	nop
 80026b0:	f7ff ffde 	bl	8002670 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8f7      	bhi.n	80026b0 <HAL_Delay+0x28>
  {
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	24000018 	.word	0x24000018

080026d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_GetREVID+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0c1b      	lsrs	r3, r3, #16
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	5c001000 	.word	0x5c001000

080026e8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80026f8:	4904      	ldr	r1, [pc, #16]	@ (800270c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	58000400 	.word	0x58000400

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <__NVIC_SetPriorityGrouping+0x40>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	4313      	orrs	r3, r2
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <__NVIC_SetPriorityGrouping+0x40>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00
 8002754:	05fa0000 	.word	0x05fa0000

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff40 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff90 	bl	8002804 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5f 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff33 	bl	8002774 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa4 	bl	800286c <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0e3      	b.n	8002b0a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7fe fc33 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b14 <HAL_ETH_Init+0x1e4>)
 800295c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002960:	4a6c      	ldr	r2, [pc, #432]	@ (8002b14 <HAL_ETH_Init+0x1e4>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800296a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <HAL_ETH_Init+0x1e4>)
 800296c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7a1b      	ldrb	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff feb1 	bl	80026e8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002986:	e003      	b.n	8002990 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002988:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800298c:	f7ff feac 	bl	80026e8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <HAL_ETH_Init+0x1e8>)
 8002992:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ac:	f7ff fe60 	bl	8002670 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029b2:	e011      	b.n	80029d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029b4:	f7ff fe5c 	bl	8002670 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029c2:	d909      	bls.n	80029d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	22e0      	movs	r2, #224	@ 0xe0
 80029d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e098      	b.n	8002b0a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e4      	bne.n	80029b4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f89e 	bl	8002b2c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029f0:	f002 ffac 	bl	800594c <HAL_RCC_GetHCLKFreq>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <HAL_ETH_Init+0x1ec>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	0c9a      	lsrs	r2, r3, #18
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3a01      	subs	r2, #1
 8002a04:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fa81 	bl	8002f10 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002a1a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a2a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	22e0      	movs	r2, #224	@ 0xe0
 8002a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e05d      	b.n	8002b0a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_ETH_Init+0x1f0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6952      	ldr	r2, [r2, #20]
 8002a62:	0051      	lsls	r1, r2, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a6e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fae9 	bl	800304a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb2f 	bl	80030dc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3305      	adds	r3, #5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021a      	lsls	r2, r3, #8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	061a      	lsls	r2, r3, #24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002abc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002aca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002acc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_ETH_Init+0x1f4>)
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <HAL_ETH_Init+0x1f8>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2210      	movs	r2, #16
 8002b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	58024400 	.word	0x58024400
 8002b18:	58000400 	.word	0x58000400
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	ffff8001 	.word	0xffff8001
 8002b24:	0c020060 	.word	0x0c020060
 8002b28:	0c20c000 	.word	0x0c20c000

08002b2c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b46:	f002 ff01 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8002b4a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d804      	bhi.n	8002b5e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e022      	b.n	8002ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d204      	bcs.n	8002b70 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e019      	b.n	8002ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d915      	bls.n	8002ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d804      	bhi.n	8002b8a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e00c      	b.n	8002ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bc8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d804      	bhi.n	8002b9c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e003      	b.n	8002ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	02160ebf 	.word	0x02160ebf
 8002bbc:	03938700 	.word	0x03938700
 8002bc0:	05f5e0ff 	.word	0x05f5e0ff
 8002bc4:	08f0d17f 	.word	0x08f0d17f
 8002bc8:	0ee6b27f 	.word	0x0ee6b27f

08002bcc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002be6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	7b1b      	ldrb	r3, [r3, #12]
 8002bec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	7b5b      	ldrb	r3, [r3, #13]
 8002bf4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	7b9b      	ldrb	r3, [r3, #14]
 8002bfc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	7bdb      	ldrb	r3, [r3, #15]
 8002c04:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	7c12      	ldrb	r2, [r2, #16]
 8002c0c:	2a00      	cmp	r2, #0
 8002c0e:	d102      	bne.n	8002c16 <ETH_SetMACConfig+0x4a>
 8002c10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002c14:	e000      	b.n	8002c18 <ETH_SetMACConfig+0x4c>
 8002c16:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	7c52      	ldrb	r2, [r2, #17]
 8002c1e:	2a00      	cmp	r2, #0
 8002c20:	d102      	bne.n	8002c28 <ETH_SetMACConfig+0x5c>
 8002c22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c26:	e000      	b.n	8002c2a <ETH_SetMACConfig+0x5e>
 8002c28:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	7c9b      	ldrb	r3, [r3, #18]
 8002c30:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c32:	431a      	orrs	r2, r3
               macconf->Speed |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c38:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	7f1b      	ldrb	r3, [r3, #28]
 8002c44:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7f5b      	ldrb	r3, [r3, #29]
 8002c4c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	7f92      	ldrb	r2, [r2, #30]
 8002c54:	2a00      	cmp	r2, #0
 8002c56:	d102      	bne.n	8002c5e <ETH_SetMACConfig+0x92>
 8002c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c5c:	e000      	b.n	8002c60 <ETH_SetMACConfig+0x94>
 8002c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	7fdb      	ldrb	r3, [r3, #31]
 8002c66:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	d102      	bne.n	8002c7a <ETH_SetMACConfig+0xae>
 8002c74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c78:	e000      	b.n	8002c7c <ETH_SetMACConfig+0xb0>
 8002c7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c7c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c8a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002c8c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b56      	ldr	r3, [pc, #344]	@ (8002df8 <ETH_SetMACConfig+0x22c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	68f9      	ldr	r1, [r7, #12]
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cb6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cc0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002cca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ccc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d102      	bne.n	8002cde <ETH_SetMACConfig+0x112>
 8002cd8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cdc:	e000      	b.n	8002ce0 <ETH_SetMACConfig+0x114>
 8002cde:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ce0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4b42      	ldr	r3, [pc, #264]	@ (8002dfc <ETH_SetMACConfig+0x230>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	68f9      	ldr	r1, [r7, #12]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d04:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <ETH_SetMACConfig+0x234>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d28:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d101      	bne.n	8002d3e <ETH_SetMACConfig+0x172>
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	e000      	b.n	8002d40 <ETH_SetMACConfig+0x174>
 8002d3e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d40:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d52:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002d68:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002d70:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	f023 0103 	bic.w	r1, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002d96:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	d101      	bne.n	8002dba <ETH_SetMACConfig+0x1ee>
 8002db6:	2240      	movs	r2, #64	@ 0x40
 8002db8:	e000      	b.n	8002dbc <ETH_SetMACConfig+0x1f0>
 8002dba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002dbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002dc4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002dce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002ddc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	00048083 	.word	0x00048083
 8002dfc:	c0f88000 	.word	0xc0f88000
 8002e00:	fffffef0 	.word	0xfffffef0

08002e04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <ETH_SetDMAConfig+0xf8>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6811      	ldr	r1, [r2, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e2a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	7b1b      	ldrb	r3, [r3, #12]
 8002e3c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f00 <ETH_SetDMAConfig+0xfc>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e5c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7b5b      	ldrb	r3, [r3, #13]
 8002e62:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e74:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002e78:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <ETH_SetDMAConfig+0x100>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	430b      	orrs	r3, r1
 8002e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e88:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7d1b      	ldrb	r3, [r3, #20]
 8002e94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7f5b      	ldrb	r3, [r3, #29]
 8002e9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eaa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002eae:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <ETH_SetDMAConfig+0x104>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ebe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	7f1b      	ldrb	r3, [r3, #28]
 8002ec6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <ETH_SetDMAConfig+0x108>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eec:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	ffff87fd 	.word	0xffff87fd
 8002f00:	ffff2ffe 	.word	0xffff2ffe
 8002f04:	fffec000 	.word	0xfffec000
 8002f08:	ffc0efef 	.word	0xffc0efef
 8002f0c:	7fc0ffff 	.word	0x7fc0ffff

08002f10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b0a4      	sub	sp, #144	@ 0x90
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f50:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002f68:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002f6c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002f92:	2300      	movs	r3, #0
 8002f94:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fba:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fc4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002fea:	2300      	movs	r3, #0
 8002fec:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fde6 	bl	8002bcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003000:	2301      	movs	r3, #1
 8003002:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003004:	2301      	movs	r3, #1
 8003006:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800301a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800301e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003024:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003028:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003030:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fee1 	bl	8002e04 <ETH_SetDMAConfig>
}
 8003042:	bf00      	nop
 8003044:	3790      	adds	r7, #144	@ 0x90
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e01d      	b.n	8003094 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	3206      	adds	r2, #6
 800308a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d9de      	bls.n	8003058 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a8:	461a      	mov	r2, r3
 80030aa:	2303      	movs	r3, #3
 80030ac:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030bc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030cc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e023      	b.n	8003132 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	3212      	adds	r2, #18
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d9d8      	bls.n	80030ea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800315e:	461a      	mov	r2, r3
 8003160:	2303      	movs	r3, #3
 8003162:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003172:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003186:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031a6:	4b89      	ldr	r3, [pc, #548]	@ (80033cc <HAL_GPIO_Init+0x234>)
 80031a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031aa:	e194      	b.n	80034d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8186 	beq.w	80034d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d005      	beq.n	80031dc <HAL_GPIO_Init+0x44>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d130      	bne.n	800323e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003212:	2201      	movs	r2, #1
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0201 	and.w	r2, r3, #1
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b03      	cmp	r3, #3
 8003248:	d017      	beq.n	800327a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d123      	bne.n	80032ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	08da      	lsrs	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3208      	adds	r2, #8
 80032c8:	69b9      	ldr	r1, [r7, #24]
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0203 	and.w	r2, r3, #3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80e0 	beq.w	80034d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003310:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <HAL_GPIO_Init+0x238>)
 8003312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003316:	4a2e      	ldr	r2, [pc, #184]	@ (80033d0 <HAL_GPIO_Init+0x238>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003320:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_GPIO_Init+0x238>)
 8003322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332e:	4a29      	ldr	r2, [pc, #164]	@ (80033d4 <HAL_GPIO_Init+0x23c>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a20      	ldr	r2, [pc, #128]	@ (80033d8 <HAL_GPIO_Init+0x240>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d052      	beq.n	8003400 <HAL_GPIO_Init+0x268>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_GPIO_Init+0x244>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0x22e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_GPIO_Init+0x248>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x22a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1d      	ldr	r2, [pc, #116]	@ (80033e4 <HAL_GPIO_Init+0x24c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_GPIO_Init+0x250>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <HAL_GPIO_Init+0x254>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1a      	ldr	r2, [pc, #104]	@ (80033f0 <HAL_GPIO_Init+0x258>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x21a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_GPIO_Init+0x25c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x216>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_GPIO_Init+0x260>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x212>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_GPIO_Init+0x264>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x20e>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e02d      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033a6:	230a      	movs	r3, #10
 80033a8:	e02b      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e029      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e027      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e025      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e023      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e021      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033be:	2303      	movs	r3, #3
 80033c0:	e01f      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e01d      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e01b      	b.n	8003402 <HAL_GPIO_Init+0x26a>
 80033ca:	bf00      	nop
 80033cc:	58000080 	.word	0x58000080
 80033d0:	58024400 	.word	0x58024400
 80033d4:	58000400 	.word	0x58000400
 80033d8:	58020000 	.word	0x58020000
 80033dc:	58020400 	.word	0x58020400
 80033e0:	58020800 	.word	0x58020800
 80033e4:	58020c00 	.word	0x58020c00
 80033e8:	58021000 	.word	0x58021000
 80033ec:	58021400 	.word	0x58021400
 80033f0:	58021800 	.word	0x58021800
 80033f4:	58021c00 	.word	0x58021c00
 80033f8:	58022000 	.word	0x58022000
 80033fc:	58022400 	.word	0x58022400
 8003400:	2300      	movs	r3, #0
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	f002 0203 	and.w	r2, r2, #3
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	4093      	lsls	r3, r2
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003412:	4938      	ldr	r1, [pc, #224]	@ (80034f4 <HAL_GPIO_Init+0x35c>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003446:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f ae63 	bne.w	80031ac <HAL_GPIO_Init+0x14>
  }
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	3724      	adds	r7, #36	@ 0x24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	58000400 	.word	0x58000400

080034f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003500:	4a08      	ldr	r2, [pc, #32]	@ (8003524 <HAL_HSEM_FastTake+0x2c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3320      	adds	r3, #32
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_HSEM_FastTake+0x30>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58026400 	.word	0x58026400
 8003528:	80000300 	.word	0x80000300

0800352c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003536:	4906      	ldr	r1, [pc, #24]	@ (8003550 <HAL_HSEM_Release+0x24>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	58026400 	.word	0x58026400

08003554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08b      	b.n	800367e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd ffd4 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	e006      	b.n	80035dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d108      	bne.n	80035f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	e007      	b.n	8003606 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <HAL_I2C_Init+0x134>)
 8003612:	430b      	orrs	r3, r1
 8003614:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003624:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	02008000 	.word	0x02008000

0800368c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	461a      	mov	r2, r3
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
 800369c:	4613      	mov	r3, r2
 800369e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	f040 80fd 	bne.w	80038a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_I2C_Master_Transmit+0x30>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0f6      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036c4:	f7fe ffd4 	bl	8002670 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2319      	movs	r3, #25
 80036d0:	2201      	movs	r2, #1
 80036d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fcfa 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0e1      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2221      	movs	r2, #33	@ 0x21
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2210      	movs	r2, #16
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	893a      	ldrh	r2, [r7, #8]
 8003706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2bff      	cmp	r3, #255	@ 0xff
 8003716:	d906      	bls.n	8003726 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	22ff      	movs	r2, #255	@ 0xff
 800371c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800371e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e007      	b.n	8003736 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003730:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003734:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d024      	beq.n	8003788 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	8979      	ldrh	r1, [r7, #10]
 800377a:	4b4e      	ldr	r3, [pc, #312]	@ (80038b4 <HAL_I2C_Master_Transmit+0x228>)
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fef5 	bl	8004570 <I2C_TransferConfig>
 8003786:	e066      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	b2da      	uxtb	r2, r3
 800378e:	8979      	ldrh	r1, [r7, #10]
 8003790:	4b48      	ldr	r3, [pc, #288]	@ (80038b4 <HAL_I2C_Master_Transmit+0x228>)
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 feea 	bl	8004570 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800379c:	e05b      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fced 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07b      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d034      	beq.n	8003856 <HAL_I2C_Master_Transmit+0x1ca>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d130      	bne.n	8003856 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2180      	movs	r1, #128	@ 0x80
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fc66 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e04d      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2bff      	cmp	r3, #255	@ 0xff
 8003816:	d90e      	bls.n	8003836 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	22ff      	movs	r2, #255	@ 0xff
 800381c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fe9e 	bl	8004570 <I2C_TransferConfig>
 8003834:	e00f      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fe8d 	bl	8004570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d19e      	bne.n	800379e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	6a39      	ldr	r1, [r7, #32]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fcd3 	bl	8004210 <I2C_WaitOnSTOPFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01a      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2220      	movs	r2, #32
 800387a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <HAL_I2C_Master_Transmit+0x22c>)
 8003888:	400b      	ands	r3, r1
 800388a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	80002000 	.word	0x80002000
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	461a      	mov	r2, r3
 80038c8:	460b      	mov	r3, r1
 80038ca:	817b      	strh	r3, [r7, #10]
 80038cc:	4613      	mov	r3, r2
 80038ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	f040 80db 	bne.w	8003a94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2C_Master_Receive+0x30>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0d4      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038f4:	f7fe febc 	bl	8002670 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2319      	movs	r3, #25
 8003900:	2201      	movs	r2, #1
 8003902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fbe2 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0bf      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2222      	movs	r2, #34	@ 0x22
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2210      	movs	r2, #16
 8003922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	893a      	ldrh	r2, [r7, #8]
 8003936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2bff      	cmp	r3, #255	@ 0xff
 8003946:	d90e      	bls.n	8003966 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	22ff      	movs	r2, #255	@ 0xff
 800394c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_I2C_Master_Receive+0x1e4>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fe06 	bl	8004570 <I2C_TransferConfig>
 8003964:	e06d      	b.n	8003a42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	b2da      	uxtb	r2, r3
 8003976:	8979      	ldrh	r1, [r7, #10]
 8003978:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <HAL_I2C_Master_Receive+0x1e4>)
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fdf5 	bl	8004570 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003986:	e05c      	b.n	8003a42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6a39      	ldr	r1, [r7, #32]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc83 	bl	8004298 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e07c      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d034      	beq.n	8003a42 <HAL_I2C_Master_Receive+0x186>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d130      	bne.n	8003a42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fb70 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e04d      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2bff      	cmp	r3, #255	@ 0xff
 8003a02:	d90e      	bls.n	8003a22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	22ff      	movs	r2, #255	@ 0xff
 8003a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fda8 	bl	8004570 <I2C_TransferConfig>
 8003a20:	e00f      	b.n	8003a42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fd97 	bl	8004570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d19d      	bne.n	8003988 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	6a39      	ldr	r1, [r7, #32]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fbdd 	bl	8004210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e01a      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2220      	movs	r2, #32
 8003a66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <HAL_I2C_Master_Receive+0x1e8>)
 8003a74:	400b      	ands	r3, r1
 8003a76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	80002400 	.word	0x80002400
 8003aa4:	fe00e800 	.word	0xfe00e800

08003aa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	f040 80f9 	bne.w	8003cc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_I2C_Mem_Write+0x34>
 8003ad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0ed      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Mem_Write+0x4e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e0e6      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003afe:	f7fe fdb7 	bl	8002670 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fadd 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0d1      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2221      	movs	r2, #33	@ 0x21
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b48:	88f8      	ldrh	r0, [r7, #6]
 8003b4a:	893a      	ldrh	r2, [r7, #8]
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4603      	mov	r3, r0
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f9ed 	bl	8003f38 <I2C_RequestMemoryWrite>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0a9      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2bff      	cmp	r3, #255	@ 0xff
 8003b78:	d90e      	bls.n	8003b98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	22ff      	movs	r2, #255	@ 0xff
 8003b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fced 	bl	8004570 <I2C_TransferConfig>
 8003b96:	e00f      	b.n	8003bb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	8979      	ldrh	r1, [r7, #10]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fcdc 	bl	8004570 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fae0 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e07b      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d034      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d130      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fa59 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04d      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	@ 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	22ff      	movs	r2, #255	@ 0xff
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fc91 	bl	8004570 <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fc80 	bl	8004570 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19e      	bne.n	8003bb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fac6 	bl	8004210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e01a      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2220      	movs	r2, #32
 8003c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <HAL_I2C_Mem_Write+0x224>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	fe00e800 	.word	0xfe00e800

08003cd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80fd 	bne.w	8003ef2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2C_Mem_Read+0x34>
 8003cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0f1      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Read+0x4e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0ea      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d26:	f7fe fca3 	bl	8002670 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f9c9 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d5      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2222      	movs	r2, #34	@ 0x22
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d70:	88f8      	ldrh	r0, [r7, #6]
 8003d72:	893a      	ldrh	r2, [r7, #8]
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f92d 	bl	8003fe0 <I2C_RequestMemoryRead>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ad      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	@ 0xff
 8003da0:	d90e      	bls.n	8003dc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	@ 0xff
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_I2C_Mem_Read+0x22c>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fbd9 	bl	8004570 <I2C_TransferConfig>
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003efc <HAL_I2C_Mem_Read+0x22c>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fbc8 	bl	8004570 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	2200      	movs	r2, #0
 8003de8:	2104      	movs	r1, #4
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f970 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07c      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d034      	beq.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d130      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f941 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04d      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2bff      	cmp	r3, #255	@ 0xff
 8003e60:	d90e      	bls.n	8003e80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	@ 0xff
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	8979      	ldrh	r1, [r7, #10]
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb79 	bl	8004570 <I2C_TransferConfig>
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	8979      	ldrh	r1, [r7, #10]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fb68 	bl	8004570 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d19a      	bne.n	8003de0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f9ae 	bl	8004210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e01a      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_I2C_Mem_Read+0x230>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	80002400 	.word	0x80002400
 8003f00:	fe00e800 	.word	0xfe00e800

08003f04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	8979      	ldrh	r1, [r7, #10]
 8003f58:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <I2C_RequestMemoryWrite+0xa4>)
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fb05 	bl	8004570 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f909 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e02c      	b.n	8003fd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d105      	bne.n	8003f8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f80:	893b      	ldrh	r3, [r7, #8]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f8a:	e015      	b.n	8003fb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f8c:	893b      	ldrh	r3, [r7, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8ef 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e012      	b.n	8003fd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fae:	893b      	ldrh	r3, [r7, #8]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2180      	movs	r1, #128	@ 0x80
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f884 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	80002000 	.word	0x80002000

08003fe0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <I2C_RequestMemoryRead+0xa4>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fab2 	bl	8004570 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8b6 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e02c      	b.n	800407a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004030:	e015      	b.n	800405e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	b29b      	uxth	r3, r3
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	69b9      	ldr	r1, [r7, #24]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f89c 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e012      	b.n	800407a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004054:	893b      	ldrh	r3, [r7, #8]
 8004056:	b2da      	uxtb	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	@ 0x40
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f831 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	80002000 	.word	0x80002000

08004088 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d103      	bne.n	80040a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d007      	beq.n	80040c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	619a      	str	r2, [r3, #24]
  }
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e0:	e03b      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f962 	bl	80043b0 <I2C_IsErrorOccurred>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e041      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d02d      	beq.n	800415a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe fab7 	bl	8002670 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <I2C_WaitOnFlagUntilTimeout+0x44>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d122      	bne.n	800415a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	429a      	cmp	r2, r3
 8004130:	d113      	bne.n	800415a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d0b4      	beq.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800418e:	e033      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f90b 	bl	80043b0 <I2C_IsErrorOccurred>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e031      	b.n	8004208 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d025      	beq.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fe fa60 	bl	8002670 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11a      	bne.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d013      	beq.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d1c4      	bne.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800421c:	e02f      	b.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8c4 	bl	80043b0 <I2C_IsErrorOccurred>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e02d      	b.n	800428e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fe fa1d 	bl	8002670 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11a      	bne.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b20      	cmp	r3, #32
 8004254:	d013      	beq.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e007      	b.n	800428e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b20      	cmp	r3, #32
 800428a:	d1c8      	bne.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042a8:	e071      	b.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f87e 	bl	80043b0 <I2C_IsErrorOccurred>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d13b      	bne.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d138      	bne.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d105      	bne.n	80042ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d121      	bne.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2204      	movs	r2, #4
 8004306:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2220      	movs	r2, #32
 800430e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800431c:	400b      	ands	r3, r1
 800431e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
 800433c:	e002      	b.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004344:	f7fe f994 	bl	8002670 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d116      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00f      	beq.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d002      	beq.n	80043a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d083      	beq.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	fe00e800 	.word	0xfe00e800

080043b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	@ 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d068      	beq.n	80044ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2210      	movs	r2, #16
 80043e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043e4:	e049      	b.n	800447a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d045      	beq.n	800447a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fe f93f 	bl	8002670 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_IsErrorOccurred+0x54>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d13a      	bne.n	800447a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004416:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004426:	d121      	bne.n	800446c <I2C_IsErrorOccurred+0xbc>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800442e:	d01d      	beq.n	800446c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b20      	cmp	r3, #32
 8004434:	d01a      	beq.n	800446c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004444:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004446:	f7fe f913 	bl	8002670 <HAL_GetTick>
 800444a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444c:	e00e      	b.n	800446c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800444e:	f7fe f90f 	bl	8002670 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b19      	cmp	r3, #25
 800445a:	d907      	bls.n	800446c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	f043 0320 	orr.w	r3, r3, #32
 8004462:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800446a:	e006      	b.n	800447a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d1e9      	bne.n	800444e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b20      	cmp	r3, #32
 8004486:	d003      	beq.n	8004490 <I2C_IsErrorOccurred+0xe0>
 8004488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0aa      	beq.n	80043e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2220      	movs	r2, #32
 800449e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800451c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01c      	beq.n	800455e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fdaf 	bl	8004088 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <I2C_IsErrorOccurred+0x1bc>)
 8004536:	400b      	ands	r3, r1
 8004538:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800455e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004562:	4618      	mov	r0, r3
 8004564:	3728      	adds	r7, #40	@ 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	fe00e800 	.word	0xfe00e800

08004570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	817b      	strh	r3, [r7, #10]
 800457e:	4613      	mov	r3, r2
 8004580:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004582:	897b      	ldrh	r3, [r7, #10]
 8004584:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004588:	7a7b      	ldrb	r3, [r7, #9]
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004590:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	4313      	orrs	r3, r2
 800459a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800459e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	0d5b      	lsrs	r3, r3, #21
 80045aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <I2C_TransferConfig+0x60>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	43db      	mvns	r3, r3
 80045b4:	ea02 0103 	and.w	r1, r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	03ff63ff 	.word	0x03ff63ff

080045d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d138      	bne.n	800465c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e032      	b.n	800465e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	@ 0x24
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004626:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	d139      	bne.n	80046f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800468a:	2302      	movs	r3, #2
 800468c:	e033      	b.n	80046f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2224      	movs	r2, #36	@ 0x24
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af02      	add	r7, sp, #8
 8004708:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0fe      	b.n	8004912 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fd fe75 	bl	8002418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2203      	movs	r2, #3
 8004732:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f004 fc46 	bl	8008fcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7c1a      	ldrb	r2, [r3, #16]
 8004748:	f88d 2000 	strb.w	r2, [sp]
 800474c:	3304      	adds	r3, #4
 800474e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004750:	f004 fbca 	bl	8008ee8 <USB_CoreInit>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0d5      	b.n	8004912 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f004 fc3e 	bl	8008fee <USB_SetCurrentMode>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0c6      	b.n	8004912 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e04a      	b.n	8004820 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3315      	adds	r3, #21
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3314      	adds	r3, #20
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	b298      	uxth	r0, r3
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	332e      	adds	r3, #46	@ 0x2e
 80047c6:	4602      	mov	r2, r0
 80047c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3318      	adds	r3, #24
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047de:	7bfa      	ldrb	r2, [r7, #15]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	331c      	adds	r3, #28
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3320      	adds	r3, #32
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3324      	adds	r3, #36	@ 0x24
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	3301      	adds	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	429a      	cmp	r2, r3
 8004828:	d3af      	bcc.n	800478a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e044      	b.n	80048ba <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004830:	7bfa      	ldrb	r2, [r7, #15]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	3301      	adds	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3b5      	bcc.n	8004830 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	7c1a      	ldrb	r2, [r3, #16]
 80048cc:	f88d 2000 	strb.w	r2, [sp]
 80048d0:	3304      	adds	r3, #4
 80048d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d4:	f004 fbd8 	bl	8009088 <USB_DevInit>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e013      	b.n	8004912 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7b1b      	ldrb	r3, [r3, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f80b 	bl	800491c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f004 fd93 	bl	8009436 <USB_DevDisconnect>

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800494a:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_PCDEx_ActivateLPM+0x44>)
 800494c:	4313      	orrs	r3, r2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	10000003 	.word	0x10000003

08004964 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800496c:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	2b06      	cmp	r3, #6
 8004976:	d00a      	beq.n	800498e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004978:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e040      	b.n	8004a0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e03e      	b.n	8004a0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800498e:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004996:	491f      	ldr	r1, [pc, #124]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4313      	orrs	r3, r2
 800499c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800499e:	f7fd fe67 	bl	8002670 <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049a4:	e009      	b.n	80049ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049a6:	f7fd fe63 	bl	8002670 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049b4:	d901      	bls.n	80049ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e028      	b.n	8004a0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ba:	4b16      	ldr	r3, [pc, #88]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c6:	d1ee      	bne.n	80049a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b1e      	cmp	r3, #30
 80049cc:	d008      	beq.n	80049e0 <HAL_PWREx_ConfigSupply+0x7c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80049d2:	d005      	beq.n	80049e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b1d      	cmp	r3, #29
 80049d8:	d002      	beq.n	80049e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80049de:	d114      	bne.n	8004a0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80049e0:	f7fd fe46 	bl	8002670 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049e6:	e009      	b.n	80049fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049e8:	f7fd fe42 	bl	8002670 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f6:	d901      	bls.n	80049fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <HAL_PWREx_ConfigSupply+0xb0>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d1ee      	bne.n	80049e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024800 	.word	0x58024800

08004a18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	60d3      	str	r3, [r2, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	58024800 	.word	0x58024800

08004a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	@ 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f000 bc48 	b.w	80052dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8088 	beq.w	8004b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	4b99      	ldr	r3, [pc, #612]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a64:	4b96      	ldr	r3, [pc, #600]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d007      	beq.n	8004a80 <HAL_RCC_OscConfig+0x48>
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	2b18      	cmp	r3, #24
 8004a74:	d111      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62>
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d06d      	beq.n	8004b68 <HAL_RCC_OscConfig+0x130>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d169      	bne.n	8004b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f000 bc21 	b.w	80052dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x7a>
 8004aa4:	4b86      	ldr	r3, [pc, #536]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a85      	ldr	r2, [pc, #532]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e02e      	b.n	8004b10 <HAL_RCC_OscConfig+0xd8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x9c>
 8004aba:	4b81      	ldr	r3, [pc, #516]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a80      	ldr	r2, [pc, #512]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e01d      	b.n	8004b10 <HAL_RCC_OscConfig+0xd8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0xc0>
 8004ade:	4b78      	ldr	r3, [pc, #480]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a77      	ldr	r2, [pc, #476]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b75      	ldr	r3, [pc, #468]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a74      	ldr	r2, [pc, #464]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCC_OscConfig+0xd8>
 8004af8:	4b71      	ldr	r3, [pc, #452]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a70      	ldr	r2, [pc, #448]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a6d      	ldr	r2, [pc, #436]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fdaa 	bl	8002670 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fda6 	bl	8002670 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e3d4      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe8>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd fd96 	bl	8002670 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fd fd92 	bl	8002670 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e3c0      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b5a:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x110>
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80ca 	beq.w	8004d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b78:	4b51      	ldr	r3, [pc, #324]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b82:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCC_OscConfig+0x166>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b18      	cmp	r3, #24
 8004b92:	d156      	bne.n	8004c42 <HAL_RCC_OscConfig+0x20a>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d151      	bne.n	8004c42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9e:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x17e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e392      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb6:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0219 	bic.w	r2, r3, #25
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	493f      	ldr	r1, [pc, #252]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fd52 	bl	8002670 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd fd4e 	bl	8002670 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e37c      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	f7fd fd6f 	bl	80026d0 <HAL_GetREVID>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d817      	bhi.n	8004c2c <HAL_RCC_OscConfig+0x1f4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d108      	bne.n	8004c16 <HAL_RCC_OscConfig+0x1de>
 8004c04:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c14:	e07a      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	4926      	ldr	r1, [pc, #152]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c2a:	e06f      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	4921      	ldr	r1, [pc, #132]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	e064      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d047      	beq.n	8004cda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0219 	bic.w	r2, r3, #25
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	491a      	ldr	r1, [pc, #104]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fd08 	bl	8002670 <HAL_GetTick>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fd fd04 	bl	8002670 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e332      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	f7fd fd25 	bl	80026d0 <HAL_GetREVID>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d819      	bhi.n	8004cc4 <HAL_RCC_OscConfig+0x28c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d108      	bne.n	8004caa <HAL_RCC_OscConfig+0x272>
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ca0:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca6:	6053      	str	r3, [r2, #4]
 8004ca8:	e030      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	031b      	lsls	r3, r3, #12
 8004cb8:	4901      	ldr	r1, [pc, #4]	@ (8004cc0 <HAL_RCC_OscConfig+0x288>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
 8004cbe:	e025      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	4b9a      	ldr	r3, [pc, #616]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	4997      	ldr	r1, [pc, #604]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	e018      	b.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b95      	ldr	r3, [pc, #596]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a94      	ldr	r2, [pc, #592]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fcc3 	bl	8002670 <HAL_GetTick>
 8004cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fd fcbf 	bl	8002670 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e2ed      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d00:	4b8b      	ldr	r3, [pc, #556]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80a9 	beq.w	8004e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1a:	4b85      	ldr	r3, [pc, #532]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d24:	4b82      	ldr	r3, [pc, #520]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCC_OscConfig+0x308>
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b18      	cmp	r3, #24
 8004d34:	d13a      	bne.n	8004dac <HAL_RCC_OscConfig+0x374>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d135      	bne.n	8004dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d40:	4b7b      	ldr	r3, [pc, #492]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x320>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b80      	cmp	r3, #128	@ 0x80
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e2c1      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d58:	f7fd fcba 	bl	80026d0 <HAL_GetREVID>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d817      	bhi.n	8004d96 <HAL_RCC_OscConfig+0x35e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d108      	bne.n	8004d80 <HAL_RCC_OscConfig+0x348>
 8004d6e:	4b70      	ldr	r3, [pc, #448]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d76:	4a6e      	ldr	r2, [pc, #440]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d7e:	e075      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d80:	4b6b      	ldr	r3, [pc, #428]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	069b      	lsls	r3, r3, #26
 8004d8e:	4968      	ldr	r1, [pc, #416]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d94:	e06a      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d96:	4b66      	ldr	r3, [pc, #408]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	4962      	ldr	r1, [pc, #392]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004daa:	e05f      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d042      	beq.n	8004e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004db4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a5d      	ldr	r2, [pc, #372]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fc56 	bl	8002670 <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fc52 	bl	8002670 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e280      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dda:	4b55      	ldr	r3, [pc, #340]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004de6:	f7fd fc73 	bl	80026d0 <HAL_GetREVID>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d817      	bhi.n	8004e24 <HAL_RCC_OscConfig+0x3ec>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d108      	bne.n	8004e0e <HAL_RCC_OscConfig+0x3d6>
 8004dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e04:	4a4a      	ldr	r2, [pc, #296]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e0a:	6053      	str	r3, [r2, #4]
 8004e0c:	e02e      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
 8004e0e:	4b48      	ldr	r3, [pc, #288]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	4944      	ldr	r1, [pc, #272]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
 8004e22:	e023      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
 8004e24:	4b42      	ldr	r3, [pc, #264]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	493f      	ldr	r1, [pc, #252]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60cb      	str	r3, [r1, #12]
 8004e38:	e018      	b.n	8004e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fd fc13 	bl	8002670 <HAL_GetTick>
 8004e4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e4e:	f7fd fc0f 	bl	8002670 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e23d      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e60:	4b33      	ldr	r3, [pc, #204]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d036      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d019      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e80:	4b2b      	ldr	r3, [pc, #172]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e84:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fd fbf0 	bl	8002670 <HAL_GetTick>
 8004e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e94:	f7fd fbec 	bl	8002670 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e21a      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ea6:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x45c>
 8004eb2:	e018      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fbd6 	bl	8002670 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fd fbd2 	bl	8002670 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e200      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d039      	beq.n	8004f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f06:	f7fd fbb3 	bl	8002670 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f0e:	f7fd fbaf 	bl	8002670 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1dd      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f20:	4b03      	ldr	r3, [pc, #12]	@ (8004f30 <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x4d6>
 8004f2c:	e01b      	b.n	8004f66 <HAL_RCC_OscConfig+0x52e>
 8004f2e:	bf00      	nop
 8004f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f34:	4b9b      	ldr	r3, [pc, #620]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a9a      	ldr	r2, [pc, #616]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f40:	f7fd fb96 	bl	8002670 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f48:	f7fd fb92 	bl	8002670 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1c0      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f5a:	4b92      	ldr	r3, [pc, #584]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8081 	beq.w	8005076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f74:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <HAL_RCC_OscConfig+0x770>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a8b      	ldr	r2, [pc, #556]	@ (80051a8 <HAL_RCC_OscConfig+0x770>)
 8004f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f80:	f7fd fb76 	bl	8002670 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f88:	f7fd fb72 	bl	8002670 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	@ 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1a0      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9a:	4b83      	ldr	r3, [pc, #524]	@ (80051a8 <HAL_RCC_OscConfig+0x770>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d106      	bne.n	8004fbc <HAL_RCC_OscConfig+0x584>
 8004fae:	4b7d      	ldr	r3, [pc, #500]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fba:	e02d      	b.n	8005018 <HAL_RCC_OscConfig+0x5e0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCC_OscConfig+0x5a6>
 8004fc4:	4b77      	ldr	r3, [pc, #476]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a76      	ldr	r2, [pc, #472]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd0:	4b74      	ldr	r3, [pc, #464]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	4a73      	ldr	r2, [pc, #460]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fdc:	e01c      	b.n	8005018 <HAL_RCC_OscConfig+0x5e0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c8>
 8004fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a6e      	ldr	r2, [pc, #440]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0x5e0>
 8005000:	4b68      	ldr	r3, [pc, #416]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005004:	4a67      	ldr	r2, [pc, #412]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	6713      	str	r3, [r2, #112]	@ 0x70
 800500c:	4b65      	ldr	r3, [pc, #404]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	4a64      	ldr	r2, [pc, #400]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005012:	f023 0304 	bic.w	r3, r3, #4
 8005016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fd fb26 	bl	8002670 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005026:	e00a      	b.n	800503e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005028:	f7fd fb22 	bl	8002670 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e14e      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503e:	4b59      	ldr	r3, [pc, #356]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ee      	beq.n	8005028 <HAL_RCC_OscConfig+0x5f0>
 800504a:	e014      	b.n	8005076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd fb10 	bl	8002670 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005052:	e00a      	b.n	800506a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fd fb0c 	bl	8002670 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e138      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800506a:	4b4e      	ldr	r3, [pc, #312]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1ee      	bne.n	8005054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 812d 	beq.w	80052da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005080:	4b48      	ldr	r3, [pc, #288]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005088:	2b18      	cmp	r3, #24
 800508a:	f000 80bd 	beq.w	8005208 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	2b02      	cmp	r3, #2
 8005094:	f040 809e 	bne.w	80051d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005098:	4b42      	ldr	r3, [pc, #264]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a41      	ldr	r2, [pc, #260]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fae4 	bl	8002670 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd fae0 	bl	8002670 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e10e      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050be:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ca:	4b36      	ldr	r3, [pc, #216]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <HAL_RCC_OscConfig+0x774>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050da:	0112      	lsls	r2, r2, #4
 80050dc:	430a      	orrs	r2, r1
 80050de:	4931      	ldr	r1, [pc, #196]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	3b01      	subs	r3, #1
 80050ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f2:	3b01      	subs	r3, #1
 80050f4:	025b      	lsls	r3, r3, #9
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	3b01      	subs	r3, #1
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	3b01      	subs	r3, #1
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005114:	4923      	ldr	r1, [pc, #140]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800511a:	4b22      	ldr	r3, [pc, #136]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005126:	4b1f      	ldr	r3, [pc, #124]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800512a:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <HAL_RCC_OscConfig+0x778>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	491b      	ldr	r1, [pc, #108]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800513a:	4b1a      	ldr	r3, [pc, #104]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	f023 020c 	bic.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	4917      	ldr	r1, [pc, #92]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800514c:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	f023 0202 	bic.w	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005158:	4912      	ldr	r1, [pc, #72]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800515e:	4b11      	ldr	r3, [pc, #68]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	4a10      	ldr	r2, [pc, #64]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	4a0d      	ldr	r2, [pc, #52]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	4a0a      	ldr	r2, [pc, #40]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 800517c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005182:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	4a07      	ldr	r2, [pc, #28]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518e:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <HAL_RCC_OscConfig+0x76c>)
 8005194:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fd fa69 	bl	8002670 <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051a0:	e011      	b.n	80051c6 <HAL_RCC_OscConfig+0x78e>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
 80051a8:	58024800 	.word	0x58024800
 80051ac:	fffffc0c 	.word	0xfffffc0c
 80051b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fd fa5c 	bl	8002670 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e08a      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c6:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x77c>
 80051d2:	e082      	b.n	80052da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d4:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80051da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fa46 	bl	8002670 <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fd fa42 	bl	8002670 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e070      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051fa:	4b3a      	ldr	r3, [pc, #232]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x7b0>
 8005206:	e068      	b.n	80052da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005208:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800520e:	4b35      	ldr	r3, [pc, #212]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d031      	beq.n	8005280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0203 	and.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d12a      	bne.n	8005280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d122      	bne.n	8005280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005244:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d11a      	bne.n	8005280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	0a5b      	lsrs	r3, r3, #9
 800524e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d111      	bne.n	8005280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d108      	bne.n	8005280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e02b      	b.n	80052dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 8005286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005288:	08db      	lsrs	r3, r3, #3
 800528a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800528e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d01f      	beq.n	80052da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800529a:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	4a11      	ldr	r2, [pc, #68]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052a6:	f7fd f9e3 	bl	8002670 <HAL_GetTick>
 80052aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052ac:	bf00      	nop
 80052ae:	f7fd f9df 	bl	8002670 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d0f9      	beq.n	80052ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ba:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052be:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <HAL_RCC_OscConfig+0x8b0>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052c6:	00d2      	lsls	r2, r2, #3
 80052c8:	4906      	ldr	r1, [pc, #24]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	4a04      	ldr	r2, [pc, #16]	@ (80052e4 <HAL_RCC_OscConfig+0x8ac>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3730      	adds	r7, #48	@ 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58024400 	.word	0x58024400
 80052e8:	ffff0007 	.word	0xffff0007

080052ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e19c      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005300:	4b8a      	ldr	r3, [pc, #552]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d910      	bls.n	8005330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530e:	4b87      	ldr	r3, [pc, #540]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 020f 	bic.w	r2, r3, #15
 8005316:	4985      	ldr	r1, [pc, #532]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b83      	ldr	r3, [pc, #524]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e184      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	4b7b      	ldr	r3, [pc, #492]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005348:	429a      	cmp	r2, r3
 800534a:	d908      	bls.n	800535e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800534c:	4b78      	ldr	r3, [pc, #480]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	4975      	ldr	r1, [pc, #468]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800535a:	4313      	orrs	r3, r2
 800535c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	4b70      	ldr	r3, [pc, #448]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005376:	429a      	cmp	r2, r3
 8005378:	d908      	bls.n	800538c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800537a:	4b6d      	ldr	r3, [pc, #436]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	496a      	ldr	r1, [pc, #424]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	4b64      	ldr	r3, [pc, #400]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d908      	bls.n	80053ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053a8:	4b61      	ldr	r3, [pc, #388]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	495e      	ldr	r1, [pc, #376]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d908      	bls.n	80053e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053d6:	4b56      	ldr	r3, [pc, #344]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4953      	ldr	r1, [pc, #332]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	429a      	cmp	r2, r3
 8005402:	d908      	bls.n	8005416 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005404:	4b4a      	ldr	r3, [pc, #296]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f023 020f 	bic.w	r2, r3, #15
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4947      	ldr	r1, [pc, #284]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005412:	4313      	orrs	r3, r2
 8005414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d055      	beq.n	80054ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005422:	4b43      	ldr	r3, [pc, #268]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4940      	ldr	r1, [pc, #256]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005430:	4313      	orrs	r3, r2
 8005432:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d107      	bne.n	800544c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800543c:	4b3c      	ldr	r3, [pc, #240]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d121      	bne.n	800548c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0f6      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d107      	bne.n	8005464 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005454:	4b36      	ldr	r3, [pc, #216]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d115      	bne.n	800548c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0ea      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800546c:	4b30      	ldr	r3, [pc, #192]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0de      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547c:	4b2c      	ldr	r3, [pc, #176]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0d6      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800548c:	4b28      	ldr	r3, [pc, #160]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f023 0207 	bic.w	r2, r3, #7
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4925      	ldr	r1, [pc, #148]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549e:	f7fd f8e7 	bl	8002670 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a4:	e00a      	b.n	80054bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a6:	f7fd f8e3 	bl	8002670 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e0be      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d1eb      	bne.n	80054a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	4b14      	ldr	r3, [pc, #80]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d208      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ea:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f023 020f 	bic.w	r2, r3, #15
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	490e      	ldr	r1, [pc, #56]	@ (8005530 <HAL_RCC_ClockConfig+0x244>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d214      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550a:	4b08      	ldr	r3, [pc, #32]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 020f 	bic.w	r2, r3, #15
 8005512:	4906      	ldr	r1, [pc, #24]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b04      	ldr	r3, [pc, #16]	@ (800552c <HAL_RCC_ClockConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e086      	b.n	800563a <HAL_RCC_ClockConfig+0x34e>
 800552c:	52002000 	.word	0x52002000
 8005530:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	4b3f      	ldr	r3, [pc, #252]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800554c:	429a      	cmp	r2, r3
 800554e:	d208      	bcs.n	8005562 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005550:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4939      	ldr	r1, [pc, #228]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 800555e:	4313      	orrs	r3, r2
 8005560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	4b34      	ldr	r3, [pc, #208]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800557a:	429a      	cmp	r2, r3
 800557c:	d208      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	492e      	ldr	r1, [pc, #184]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d208      	bcs.n	80055be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ac:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	4922      	ldr	r1, [pc, #136]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d208      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055da:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	4917      	ldr	r1, [pc, #92]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055ec:	f000 f834 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	4912      	ldr	r1, [pc, #72]	@ (8005648 <HAL_RCC_ClockConfig+0x35c>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800560a:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <HAL_RCC_ClockConfig+0x358>)
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	4a0d      	ldr	r2, [pc, #52]	@ (8005648 <HAL_RCC_ClockConfig+0x35c>)
 8005614:	5cd3      	ldrb	r3, [r2, r3]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	4a0a      	ldr	r2, [pc, #40]	@ (800564c <HAL_RCC_ClockConfig+0x360>)
 8005622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005624:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <HAL_RCC_ClockConfig+0x364>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <HAL_RCC_ClockConfig+0x368>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc ffd4 	bl	80025dc <HAL_InitTick>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
 8005648:	0800e874 	.word	0x0800e874
 800564c:	24000004 	.word	0x24000004
 8005650:	24000000 	.word	0x24000000
 8005654:	24000014 	.word	0x24000014

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	@ 0x24
 800565c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565e:	4bb3      	ldr	r3, [pc, #716]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005666:	2b18      	cmp	r3, #24
 8005668:	f200 8155 	bhi.w	8005916 <HAL_RCC_GetSysClockFreq+0x2be>
 800566c:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <HAL_RCC_GetSysClockFreq+0x1c>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056d9 	.word	0x080056d9
 8005678:	08005917 	.word	0x08005917
 800567c:	08005917 	.word	0x08005917
 8005680:	08005917 	.word	0x08005917
 8005684:	08005917 	.word	0x08005917
 8005688:	08005917 	.word	0x08005917
 800568c:	08005917 	.word	0x08005917
 8005690:	08005917 	.word	0x08005917
 8005694:	080056ff 	.word	0x080056ff
 8005698:	08005917 	.word	0x08005917
 800569c:	08005917 	.word	0x08005917
 80056a0:	08005917 	.word	0x08005917
 80056a4:	08005917 	.word	0x08005917
 80056a8:	08005917 	.word	0x08005917
 80056ac:	08005917 	.word	0x08005917
 80056b0:	08005917 	.word	0x08005917
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005917 	.word	0x08005917
 80056bc:	08005917 	.word	0x08005917
 80056c0:	08005917 	.word	0x08005917
 80056c4:	08005917 	.word	0x08005917
 80056c8:	08005917 	.word	0x08005917
 80056cc:	08005917 	.word	0x08005917
 80056d0:	08005917 	.word	0x08005917
 80056d4:	0800570b 	.word	0x0800570b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b94      	ldr	r3, [pc, #592]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056e4:	4b91      	ldr	r3, [pc, #580]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a90      	ldr	r2, [pc, #576]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80056f6:	e111      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056f8:	4b8d      	ldr	r3, [pc, #564]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056fa:	61bb      	str	r3, [r7, #24]
      break;
 80056fc:	e10e      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005700:	61bb      	str	r3, [r7, #24]
      break;
 8005702:	e10b      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005704:	4b8c      	ldr	r3, [pc, #560]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005706:	61bb      	str	r3, [r7, #24]
      break;
 8005708:	e108      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800570a:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005714:	4b85      	ldr	r3, [pc, #532]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800571e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005720:	4b82      	ldr	r3, [pc, #520]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800572a:	4b80      	ldr	r3, [pc, #512]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572e:	08db      	lsrs	r3, r3, #3
 8005730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	fb02 f303 	mul.w	r3, r2, r3
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80e1 	beq.w	8005910 <HAL_RCC_GetSysClockFreq+0x2b8>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b02      	cmp	r3, #2
 8005752:	f000 8083 	beq.w	800585c <HAL_RCC_GetSysClockFreq+0x204>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f200 80a1 	bhi.w	80058a0 <HAL_RCC_GetSysClockFreq+0x248>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x114>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d056      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x1c0>
 800576a:	e099      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576c:	4b6f      	ldr	r3, [pc, #444]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02d      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005778:	4b6c      	ldr	r3, [pc, #432]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	08db      	lsrs	r3, r3, #3
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	4a6b      	ldr	r2, [pc, #428]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a2:	4b62      	ldr	r3, [pc, #392]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800593c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057d2:	e087      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005940 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e6:	4b51      	ldr	r3, [pc, #324]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800593c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005816:	e065      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005822:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005944 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582a:	4b40      	ldr	r3, [pc, #256]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583a:	ed97 6a02 	vldr	s12, [r7, #8]
 800583e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800593c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800584e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800585a:	e043      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005866:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005948 <HAL_RCC_GetSysClockFreq+0x2f0>
 800586a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586e:	4b2f      	ldr	r3, [pc, #188]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005882:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800593c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800589e:	e021      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005944 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b2:	4b1e      	ldr	r3, [pc, #120]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800593c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80058e4:	4b11      	ldr	r3, [pc, #68]	@ (800592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	0a5b      	lsrs	r3, r3, #9
 80058ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ee:	3301      	adds	r3, #1
 80058f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005908:	ee17 3a90 	vmov	r3, s15
 800590c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800590e:	e005      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
      break;
 8005914:	e002      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005918:	61bb      	str	r3, [r7, #24]
      break;
 800591a:	bf00      	nop
  }

  return sysclockfreq;
 800591c:	69bb      	ldr	r3, [r7, #24]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3724      	adds	r7, #36	@ 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	03d09000 	.word	0x03d09000
 8005934:	003d0900 	.word	0x003d0900
 8005938:	007a1200 	.word	0x007a1200
 800593c:	46000000 	.word	0x46000000
 8005940:	4c742400 	.word	0x4c742400
 8005944:	4a742400 	.word	0x4a742400
 8005948:	4af42400 	.word	0x4af42400

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005952:	f7ff fe81 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8005956:	4602      	mov	r2, r0
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <HAL_RCC_GetHCLKFreq+0x50>)
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	490f      	ldr	r1, [pc, #60]	@ (80059a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005964:	5ccb      	ldrb	r3, [r1, r3]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <HAL_RCC_GetHCLKFreq+0x50>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800597a:	5cd3      	ldrb	r3, [r2, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005988:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800598a:	4a07      	ldr	r2, [pc, #28]	@ (80059a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	58024400 	.word	0x58024400
 80059a0:	0800e874 	.word	0x0800e874
 80059a4:	24000004 	.word	0x24000004
 80059a8:	24000000 	.word	0x24000000

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059b0:	f7ff ffcc 	bl	800594c <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4904      	ldr	r1, [pc, #16]	@ (80059d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	58024400 	.word	0x58024400
 80059d4:	0800e874 	.word	0x0800e874

080059d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059dc:	f7ff ffb6 	bl	800594c <HAL_RCC_GetHCLKFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	4904      	ldr	r1, [pc, #16]	@ (8005a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	58024400 	.word	0x58024400
 8005a00:	0800e874 	.word	0x0800e874

08005a04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a08:	b0ca      	sub	sp, #296	@ 0x128
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a16:	2300      	movs	r3, #0
 8005a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a28:	2500      	movs	r5, #0
 8005a2a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a2e:	d049      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a3a:	d02f      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a40:	d828      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a46:	d01a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a4c:	d822      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d007      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a58:	e01c      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5a:	4bb8      	ldr	r3, [pc, #736]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	4ab7      	ldr	r2, [pc, #732]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a66:	e01a      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2102      	movs	r1, #2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fc8f 	bl	8007394 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fd36 	bl	80074f8 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005aa6:	4ba5      	ldr	r3, [pc, #660]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ad0:	f04f 0900 	mov.w	r9, #0
 8005ad4:	ea58 0309 	orrs.w	r3, r8, r9
 8005ad8:	d047      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d82a      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b01 	.word	0x08005b01
 8005af0:	08005b0f 	.word	0x08005b0f
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b43 	.word	0x08005b43
 8005afc:	08005b43 	.word	0x08005b43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b00:	4b8e      	ldr	r3, [pc, #568]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	4a8d      	ldr	r2, [pc, #564]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e01a      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	3308      	adds	r3, #8
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fc3c 	bl	8007394 <RCCEx_PLL2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b22:	e00f      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b28:	3328      	adds	r3, #40	@ 0x28
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fce3 	bl	80074f8 <RCCEx_PLL3_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b38:	e004      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b50:	f023 0107 	bic.w	r1, r3, #7
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	4a78      	ldr	r2, [pc, #480]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b76:	f04f 0b00 	mov.w	fp, #0
 8005b7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b7e:	d04c      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d030      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b90:	d829      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b94:	d02d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b98:	d825      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b9a:	2b80      	cmp	r3, #128	@ 0x80
 8005b9c:	d018      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	d821      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d007      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005baa:	e01c      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4b63      	ldr	r3, [pc, #396]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4a62      	ldr	r2, [pc, #392]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e01c      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fbe6 	bl	8007394 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bce:	e011      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	3328      	adds	r3, #40	@ 0x28
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fc8d 	bl	80074f8 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005be4:	e006      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bec:	e002      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c34:	460b      	mov	r3, r1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	d053      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c46:	d035      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c4c:	d82e      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c52:	d031      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c58:	d828      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c5e:	d01a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c64:	d822      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c6e:	d007      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c70:	e01c      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c72:	4b32      	ldr	r3, [pc, #200]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	4a31      	ldr	r2, [pc, #196]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e01c      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	3308      	adds	r3, #8
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fb83 	bl	8007394 <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c94:	e011      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3328      	adds	r3, #40	@ 0x28
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fc2a 	bl	80074f8 <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005caa:	e006      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd8:	e003      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cf8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	d056      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d0e:	d038      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d14:	d831      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d1a:	d034      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d20:	d82b      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d26:	d01d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d2c:	d825      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d36:	d00a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d38:	e01f      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d40:	4ba2      	ldr	r3, [pc, #648]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	4aa1      	ldr	r2, [pc, #644]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e01c      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	3308      	adds	r3, #8
 8005d54:	2100      	movs	r1, #0
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fb1c 	bl	8007394 <RCCEx_PLL2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d62:	e011      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	3328      	adds	r3, #40	@ 0x28
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fbc3 	bl	80074f8 <RCCEx_PLL3_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d78:	e006      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d80:	e002      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d90:	4b8e      	ldr	r3, [pc, #568]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005da0:	4a8a      	ldr	r2, [pc, #552]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d03a      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd6:	2b30      	cmp	r3, #48	@ 0x30
 8005dd8:	d01f      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dda:	2b30      	cmp	r3, #48	@ 0x30
 8005ddc:	d819      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d00c      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d815      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d019      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d111      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dee:	4b77      	ldr	r3, [pc, #476]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	4a76      	ldr	r2, [pc, #472]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dfa:	e011      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	3308      	adds	r3, #8
 8005e02:	2102      	movs	r1, #2
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fac5 	bl	8007394 <RCCEx_PLL2_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e28:	4b68      	ldr	r3, [pc, #416]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	4a65      	ldr	r2, [pc, #404]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e3c:	e003      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d051      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e70:	d035      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e76:	d82e      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7c:	d031      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e82:	d828      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e88:	d01a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8e:	d822      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e9a:	e01c      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e01c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	3308      	adds	r3, #8
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fa6e 	bl	8007394 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ebe:	e011      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	3328      	adds	r3, #40	@ 0x28
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fb15 	bl	80074f8 <RCCEx_PLL3_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005eec:	4b37      	ldr	r3, [pc, #220]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	4a34      	ldr	r2, [pc, #208]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d056      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f34:	d033      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3a:	d82c      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f40:	d02f      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f46:	d826      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f4c:	d02b      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f52:	d820      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f58:	d012      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f5e:	d81a      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d022      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f68:	d115      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	3308      	adds	r3, #8
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fa0e 	bl	8007394 <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e015      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f84:	3328      	adds	r3, #40	@ 0x28
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fab5 	bl	80074f8 <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f94:	e00a      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e004      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc2:	4a02      	ldr	r2, [pc, #8]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc8:	e006      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fca:	bf00      	nop
 8005fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d055      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006004:	d033      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800600a:	d82c      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006010:	d02f      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006016:	d826      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006018:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800601c:	d02b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800601e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006022:	d820      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006028:	d012      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800602a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800602e:	d81a      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d022      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006038:	d115      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	3308      	adds	r3, #8
 8006040:	2101      	movs	r1, #1
 8006042:	4618      	mov	r0, r3
 8006044:	f001 f9a6 	bl	8007394 <RCCEx_PLL2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800604e:	e015      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	3328      	adds	r3, #40	@ 0x28
 8006056:	2101      	movs	r1, #1
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fa4d 	bl	80074f8 <RCCEx_PLL3_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006064:	e00a      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606c:	e006      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800606e:	bf00      	nop
 8006070:	e004      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006072:	bf00      	nop
 8006074:	e002      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800607a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006084:	4ba3      	ldr	r3, [pc, #652]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006094:	4a9f      	ldr	r2, [pc, #636]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006096:	430b      	orrs	r3, r1
 8006098:	6593      	str	r3, [r2, #88]	@ 0x58
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d037      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ce:	d00e      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d4:	d816      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d018      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060de:	d111      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	4a8b      	ldr	r2, [pc, #556]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3308      	adds	r3, #8
 80060f4:	2101      	movs	r1, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f94c 	bl	8007394 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006116:	4b7f      	ldr	r3, [pc, #508]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006124:	4a7b      	ldr	r2, [pc, #492]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006126:	430b      	orrs	r3, r1
 8006128:	6513      	str	r3, [r2, #80]	@ 0x50
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800614a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d039      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615a:	2b03      	cmp	r3, #3
 800615c:	d81c      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	080061a1 	.word	0x080061a1
 8006168:	08006175 	.word	0x08006175
 800616c:	08006183 	.word	0x08006183
 8006170:	080061a1 	.word	0x080061a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4b67      	ldr	r3, [pc, #412]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a66      	ldr	r2, [pc, #408]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3308      	adds	r3, #8
 8006188:	2102      	movs	r1, #2
 800618a:	4618      	mov	r0, r3
 800618c:	f001 f902 	bl	8007394 <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ae:	f023 0103 	bic.w	r1, r3, #3
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b8:	4a56      	ldr	r2, [pc, #344]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f000 809f 	beq.w	8006328 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f6:	f7fc fa3b 	bl	8002670 <HAL_GetTick>
 80061fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061fe:	e00b      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006200:	f7fc fa36 	bl	8002670 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	@ 0x64
 800620e:	d903      	bls.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006216:	e005      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006218:	4b3f      	ldr	r3, [pc, #252]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0ed      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006228:	2b00      	cmp	r3, #0
 800622a:	d179      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800622c:	4b39      	ldr	r3, [pc, #228]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800622e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006238:	4053      	eors	r3, r2
 800623a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d015      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006242:	4b34      	ldr	r3, [pc, #208]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800624e:	4b31      	ldr	r3, [pc, #196]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006258:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800625a:	4b2e      	ldr	r3, [pc, #184]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006266:	4a2b      	ldr	r2, [pc, #172]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627a:	d118      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fc f9f8 	bl	8002670 <HAL_GetTick>
 8006280:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006284:	e00d      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fc f9f3 	bl	8002670 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062a0:	e005      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0eb      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d129      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c6:	d10e      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062c8:	4b12      	ldr	r3, [pc, #72]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062d8:	091a      	lsrs	r2, r3, #4
 80062da:	4b10      	ldr	r3, [pc, #64]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062dc:	4013      	ands	r3, r2
 80062de:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6113      	str	r3, [r2, #16]
 80062e4:	e005      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062f0:	6113      	str	r3, [r2, #16]
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006302:	4a04      	ldr	r2, [pc, #16]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006304:	430b      	orrs	r3, r1
 8006306:	6713      	str	r3, [r2, #112]	@ 0x70
 8006308:	e00e      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006312:	e009      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006314:	58024400 	.word	0x58024400
 8006318:	58024800 	.word	0x58024800
 800631c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0301 	and.w	r3, r2, #1
 8006334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800633e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	f000 8089 	beq.w	800645c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006350:	2b28      	cmp	r3, #40	@ 0x28
 8006352:	d86b      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006435 	.word	0x08006435
 8006360:	0800642d 	.word	0x0800642d
 8006364:	0800642d 	.word	0x0800642d
 8006368:	0800642d 	.word	0x0800642d
 800636c:	0800642d 	.word	0x0800642d
 8006370:	0800642d 	.word	0x0800642d
 8006374:	0800642d 	.word	0x0800642d
 8006378:	0800642d 	.word	0x0800642d
 800637c:	08006401 	.word	0x08006401
 8006380:	0800642d 	.word	0x0800642d
 8006384:	0800642d 	.word	0x0800642d
 8006388:	0800642d 	.word	0x0800642d
 800638c:	0800642d 	.word	0x0800642d
 8006390:	0800642d 	.word	0x0800642d
 8006394:	0800642d 	.word	0x0800642d
 8006398:	0800642d 	.word	0x0800642d
 800639c:	08006417 	.word	0x08006417
 80063a0:	0800642d 	.word	0x0800642d
 80063a4:	0800642d 	.word	0x0800642d
 80063a8:	0800642d 	.word	0x0800642d
 80063ac:	0800642d 	.word	0x0800642d
 80063b0:	0800642d 	.word	0x0800642d
 80063b4:	0800642d 	.word	0x0800642d
 80063b8:	0800642d 	.word	0x0800642d
 80063bc:	08006435 	.word	0x08006435
 80063c0:	0800642d 	.word	0x0800642d
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	0800642d 	.word	0x0800642d
 80063cc:	0800642d 	.word	0x0800642d
 80063d0:	0800642d 	.word	0x0800642d
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	08006435 	.word	0x08006435
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	08006435 	.word	0x08006435
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	3308      	adds	r3, #8
 8006406:	2101      	movs	r1, #1
 8006408:	4618      	mov	r0, r3
 800640a:	f000 ffc3 	bl	8007394 <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006414:	e00f      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	3328      	adds	r3, #40	@ 0x28
 800641c:	2101      	movs	r1, #1
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f86a 	bl	80074f8 <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800642a:	e004      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800643e:	4bbf      	ldr	r3, [pc, #764]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644c:	4abb      	ldr	r2, [pc, #748]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800644e:	430b      	orrs	r3, r1
 8006450:	6553      	str	r3, [r2, #84]	@ 0x54
 8006452:	e003      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f002 0302 	and.w	r3, r2, #2
 8006468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006472:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d041      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006482:	2b05      	cmp	r3, #5
 8006484:	d824      	bhi.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064d9 	.word	0x080064d9
 8006490:	080064a5 	.word	0x080064a5
 8006494:	080064bb 	.word	0x080064bb
 8006498:	080064d9 	.word	0x080064d9
 800649c:	080064d9 	.word	0x080064d9
 80064a0:	080064d9 	.word	0x080064d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	3308      	adds	r3, #8
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 ff71 	bl	8007394 <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b8:	e00f      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	3328      	adds	r3, #40	@ 0x28
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 f818 	bl	80074f8 <RCCEx_PLL3_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ce:	e004      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064d6:	e000      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064e2:	4b96      	ldr	r3, [pc, #600]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e6:	f023 0107 	bic.w	r1, r3, #7
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064f0:	4a92      	ldr	r2, [pc, #584]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80064f6:	e003      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f002 0304 	and.w	r3, r2, #4
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006510:	2300      	movs	r3, #0
 8006512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006516:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800651a:	460b      	mov	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	d044      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006528:	2b05      	cmp	r3, #5
 800652a:	d825      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006581 	.word	0x08006581
 8006538:	0800654d 	.word	0x0800654d
 800653c:	08006563 	.word	0x08006563
 8006540:	08006581 	.word	0x08006581
 8006544:	08006581 	.word	0x08006581
 8006548:	08006581 	.word	0x08006581
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	3308      	adds	r3, #8
 8006552:	2101      	movs	r1, #1
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ff1d 	bl	8007394 <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006560:	e00f      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	3328      	adds	r3, #40	@ 0x28
 8006568:	2101      	movs	r1, #1
 800656a:	4618      	mov	r0, r3
 800656c:	f000 ffc4 	bl	80074f8 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800658a:	4b6c      	ldr	r3, [pc, #432]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658e:	f023 0107 	bic.w	r1, r3, #7
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800659a:	4a68      	ldr	r2, [pc, #416]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800659c:	430b      	orrs	r3, r1
 800659e:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a0:	e003      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f002 0320 	and.w	r3, r2, #32
 80065b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c4:	460b      	mov	r3, r1
 80065c6:	4313      	orrs	r3, r2
 80065c8:	d055      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d6:	d033      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065dc:	d82c      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d02f      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e8:	d826      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ee:	d02b      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065f4:	d820      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fa:	d012      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006600:	d81a      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d022      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660a:	d115      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	3308      	adds	r3, #8
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f000 febd 	bl	8007394 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006620:	e015      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	3328      	adds	r3, #40	@ 0x28
 8006628:	2102      	movs	r1, #2
 800662a:	4618      	mov	r0, r3
 800662c:	f000 ff64 	bl	80074f8 <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006636:	e00a      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800663e:	e006      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006640:	bf00      	nop
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006644:	bf00      	nop
 8006646:	e002      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006648:	bf00      	nop
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006656:	4b39      	ldr	r3, [pc, #228]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006666:	4a35      	ldr	r2, [pc, #212]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006668:	430b      	orrs	r3, r1
 800666a:	6553      	str	r3, [r2, #84]	@ 0x54
 800666c:	e003      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006686:	2300      	movs	r3, #0
 8006688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800668c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d058      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800669e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066a2:	d033      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066a8:	d82c      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ae:	d02f      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	d826      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ba:	d02b      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c0:	d820      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c6:	d012      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066cc:	d81a      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d022      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d6:	d115      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	3308      	adds	r3, #8
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fe57 	bl	8007394 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ec:	e015      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	3328      	adds	r3, #40	@ 0x28
 80066f4:	2102      	movs	r1, #2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fefe 	bl	80074f8 <RCCEx_PLL3_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006702:	e00a      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800670a:	e006      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800670c:	bf00      	nop
 800670e:	e004      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006710:	bf00      	nop
 8006712:	e002      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006714:	bf00      	nop
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10e      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006726:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006732:	4a02      	ldr	r2, [pc, #8]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6593      	str	r3, [r2, #88]	@ 0x58
 8006738:	e006      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800675e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d055      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006770:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006774:	d033      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006776:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800677a:	d82c      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006780:	d02f      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006786:	d826      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006788:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800678c:	d02b      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800678e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006792:	d820      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006798:	d012      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800679a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800679e:	d81a      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d022      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a8:	d115      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	3308      	adds	r3, #8
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fdee 	bl	8007394 <RCCEx_PLL2_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067be:	e015      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c4:	3328      	adds	r3, #40	@ 0x28
 80067c6:	2102      	movs	r1, #2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fe95 	bl	80074f8 <RCCEx_PLL3_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067d4:	e00a      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067dc:	e006      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067de:	bf00      	nop
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067e2:	bf00      	nop
 80067e4:	e002      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067f4:	4ba1      	ldr	r3, [pc, #644]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006804:	4a9d      	ldr	r2, [pc, #628]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006806:	430b      	orrs	r3, r1
 8006808:	6593      	str	r3, [r2, #88]	@ 0x58
 800680a:	e003      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f002 0308 	and.w	r3, r2, #8
 8006820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006824:	2300      	movs	r3, #0
 8006826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800682a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d01e      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006840:	d10c      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	3328      	adds	r3, #40	@ 0x28
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fe54 	bl	80074f8 <RCCEx_PLL3_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800685c:	4b87      	ldr	r3, [pc, #540]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006860:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800686c:	4a83      	ldr	r2, [pc, #524]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800686e:	430b      	orrs	r3, r1
 8006870:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f002 0310 	and.w	r3, r2, #16
 800687e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006882:	2300      	movs	r3, #0
 8006884:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006888:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d01e      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800689a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689e:	d10c      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	3328      	adds	r3, #40	@ 0x28
 80068a6:	2102      	movs	r1, #2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe25 	bl	80074f8 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068ba:	4b70      	ldr	r3, [pc, #448]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ca:	4a6c      	ldr	r2, [pc, #432]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d03e      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068fc:	d022      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006902:	d81b      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690c:	d00b      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800690e:	e015      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	3308      	adds	r3, #8
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fd3b 	bl	8007394 <RCCEx_PLL2_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006924:	e00f      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	3328      	adds	r3, #40	@ 0x28
 800692c:	2102      	movs	r1, #2
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fde2 	bl	80074f8 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800694e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800695e:	4a47      	ldr	r2, [pc, #284]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6593      	str	r3, [r2, #88]	@ 0x58
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800697a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800697c:	2300      	movs	r3, #0
 800697e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006980:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d03b      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006996:	d01f      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800699c:	d818      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a2:	d003      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069a8:	d007      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069aa:	e011      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ac:	4b33      	ldr	r3, [pc, #204]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4a32      	ldr	r2, [pc, #200]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fd98 	bl	80074f8 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069e2:	4b26      	ldr	r3, [pc, #152]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f2:	4a22      	ldr	r2, [pc, #136]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a10:	2300      	movs	r3, #0
 8006a12:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d034      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2c:	d007      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a2e:	e011      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a30:	4b12      	ldr	r3, [pc, #72]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	4a11      	ldr	r2, [pc, #68]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a3c:	e00e      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a42:	3308      	adds	r3, #8
 8006a44:	2102      	movs	r1, #2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fca4 	bl	8007394 <RCCEx_PLL2_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10d      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a72:	4a02      	ldr	r2, [pc, #8]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a74:	430b      	orrs	r3, r1
 8006a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a78:	e006      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a96:	2300      	movs	r3, #0
 8006a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	d00c      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa8:	3328      	adds	r3, #40	@ 0x28
 8006aaa:	2102      	movs	r1, #2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fd23 	bl	80074f8 <RCCEx_PLL3_Config>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8006acc:	2300      	movs	r3, #0
 8006ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ad0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d038      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae6:	d018      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aec:	d811      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af2:	d014      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af8:	d80b      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4bc3      	ldr	r3, [pc, #780]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4ac2      	ldr	r2, [pc, #776]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b10:	e008      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b18:	e004      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b2c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3c:	4ab5      	ldr	r2, [pc, #724]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b62:	460b      	mov	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b68:	4baa      	ldr	r3, [pc, #680]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b76:	4aa7      	ldr	r2, [pc, #668]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b92:	460b      	mov	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	d00a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b98:	4b9e      	ldr	r3, [pc, #632]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ba8:	4a9a      	ldr	r2, [pc, #616]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bca:	4b92      	ldr	r3, [pc, #584]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd8:	4a8e      	ldr	r2, [pc, #568]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bec:	2300      	movs	r3, #0
 8006bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bfa:	4b86      	ldr	r3, [pc, #536]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4a85      	ldr	r2, [pc, #532]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c04:	6113      	str	r3, [r2, #16]
 8006c06:	4b83      	ldr	r3, [pc, #524]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c08:	6919      	ldr	r1, [r3, #16]
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c12:	4a80      	ldr	r2, [pc, #512]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c34:	4b77      	ldr	r3, [pc, #476]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	4a74      	ldr	r2, [pc, #464]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c56:	2300      	movs	r3, #0
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c64:	4b6b      	ldr	r3, [pc, #428]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c74:	4a67      	ldr	r2, [pc, #412]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c76:	430b      	orrs	r3, r1
 8006c78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	2100      	movs	r1, #0
 8006c84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c90:	460b      	mov	r3, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	d011      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb78 	bl	8007394 <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6239      	str	r1, [r7, #32]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ccc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d011      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	3308      	adds	r3, #8
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb58 	bl	8007394 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	2100      	movs	r1, #0
 8006d04:	61b9      	str	r1, [r7, #24]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d011      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fb38 	bl	8007394 <RCCEx_PLL2_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	2100      	movs	r1, #0
 8006d44:	6139      	str	r1, [r7, #16]
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d011      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	3328      	adds	r3, #40	@ 0x28
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fbca 	bl	80074f8 <RCCEx_PLL3_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	2100      	movs	r1, #0
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d90:	460b      	mov	r3, r1
 8006d92:	4313      	orrs	r3, r2
 8006d94:	d011      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9a:	3328      	adds	r3, #40	@ 0x28
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fbaa 	bl	80074f8 <RCCEx_PLL3_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d011      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dda:	3328      	adds	r3, #40	@ 0x28
 8006ddc:	2102      	movs	r1, #2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fb8a 	bl	80074f8 <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dfa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e14:	58024400 	.word	0x58024400

08006e18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e1c:	f7fe fd96 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8006e20:	4602      	mov	r2, r0
 8006e22:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	091b      	lsrs	r3, r3, #4
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	4904      	ldr	r1, [pc, #16]	@ (8006e40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e2e:	5ccb      	ldrb	r3, [r1, r3]
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	0800e874 	.word	0x0800e874

08006e44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e56:	4b9f      	ldr	r3, [pc, #636]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	0b1b      	lsrs	r3, r3, #12
 8006e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e62:	4b9c      	ldr	r3, [pc, #624]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e6e:	4b99      	ldr	r3, [pc, #612]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8111 	beq.w	80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	f000 8083 	beq.w	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f200 80a1 	bhi.w	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d056      	beq.n	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eae:	e099      	b.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb0:	4b88      	ldr	r3, [pc, #544]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02d      	beq.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ebc:	4b85      	ldr	r3, [pc, #532]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	4a84      	ldr	r2, [pc, #528]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ecc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee6:	4b7b      	ldr	r3, [pc, #492]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f16:	e087      	b.n	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5a:	e065      	b.n	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b59      	ldr	r3, [pc, #356]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9e:	e043      	b.n	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b48      	ldr	r3, [pc, #288]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	e021      	b.n	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b37      	ldr	r3, [pc, #220]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007026:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007028:	4b2a      	ldr	r3, [pc, #168]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	0a5b      	lsrs	r3, r3, #9
 800702e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007056:	4b1f      	ldr	r3, [pc, #124]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800706c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007070:	edd7 6a07 	vldr	s13, [r7, #28]
 8007074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 2a90 	vmov	r2, s15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007084:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	0e1b      	lsrs	r3, r3, #24
 800708a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800709a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709e:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070aa:	ee17 2a90 	vmov	r2, s15
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070b2:	e008      	b.n	80070c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
}
 80070c6:	bf00      	nop
 80070c8:	3724      	adds	r7, #36	@ 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	46000000 	.word	0x46000000
 80070e0:	4c742400 	.word	0x4c742400
 80070e4:	4a742400 	.word	0x4a742400
 80070e8:	4af42400 	.word	0x4af42400

080070ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	@ 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f4:	4ba1      	ldr	r3, [pc, #644]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070fe:	4b9f      	ldr	r3, [pc, #636]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	0d1b      	lsrs	r3, r3, #20
 8007104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007108:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800710a:	4b9c      	ldr	r3, [pc, #624]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007116:	4b99      	ldr	r3, [pc, #612]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	08db      	lsrs	r3, r3, #3
 800711c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8111 	beq.w	800735c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b02      	cmp	r3, #2
 800713e:	f000 8083 	beq.w	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b02      	cmp	r3, #2
 8007146:	f200 80a1 	bhi.w	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d056      	beq.n	8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007156:	e099      	b.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007158:	4b88      	ldr	r3, [pc, #544]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02d      	beq.n	80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007164:	4b85      	ldr	r3, [pc, #532]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	4a84      	ldr	r2, [pc, #528]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
 8007174:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718e:	4b7b      	ldr	r3, [pc, #492]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719e:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071be:	e087      	b.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b6a      	ldr	r3, [pc, #424]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007202:	e065      	b.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b59      	ldr	r3, [pc, #356]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a03 	vldr	s12, [r7, #12]
 800722a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007246:	e043      	b.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b48      	ldr	r3, [pc, #288]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728a:	e021      	b.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b37      	ldr	r3, [pc, #220]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072d0:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f6:	ee17 2a90 	vmov	r2, s15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072fe:	4b1f      	ldr	r3, [pc, #124]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007318:	edd7 6a07 	vldr	s13, [r7, #28]
 800731c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007324:	ee17 2a90 	vmov	r2, s15
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800732c:	4b13      	ldr	r3, [pc, #76]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007330:	0e1b      	lsrs	r3, r3, #24
 8007332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007346:	edd7 6a07 	vldr	s13, [r7, #28]
 800734a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007352:	ee17 2a90 	vmov	r2, s15
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800735a:	e008      	b.n	800736e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
}
 800736e:	bf00      	nop
 8007370:	3724      	adds	r7, #36	@ 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	03d09000 	.word	0x03d09000
 8007384:	46000000 	.word	0x46000000
 8007388:	4c742400 	.word	0x4c742400
 800738c:	4a742400 	.word	0x4a742400
 8007390:	4af42400 	.word	0x4af42400

08007394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073a2:	4b53      	ldr	r3, [pc, #332]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d101      	bne.n	80073b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e099      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073b2:	4b4f      	ldr	r3, [pc, #316]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a4e      	ldr	r2, [pc, #312]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fb f957 	bl	8002670 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7fb f953 	bl	8002670 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e086      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d8:	4b45      	ldr	r3, [pc, #276]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f0      	bne.n	80073c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073e4:	4b42      	ldr	r3, [pc, #264]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	493f      	ldr	r1, [pc, #252]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	3b01      	subs	r3, #1
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	b29b      	uxth	r3, r3
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	3b01      	subs	r3, #1
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	3b01      	subs	r3, #1
 8007422:	061b      	lsls	r3, r3, #24
 8007424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007428:	4931      	ldr	r1, [pc, #196]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800742e:	4b30      	ldr	r3, [pc, #192]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	492d      	ldr	r1, [pc, #180]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800743c:	4313      	orrs	r3, r2
 800743e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007440:	4b2b      	ldr	r3, [pc, #172]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	f023 0220 	bic.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	4928      	ldr	r1, [pc, #160]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800744e:	4313      	orrs	r3, r2
 8007450:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007452:	4b27      	ldr	r3, [pc, #156]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	4a26      	ldr	r2, [pc, #152]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f023 0310 	bic.w	r3, r3, #16
 800745c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800745e:	4b24      	ldr	r3, [pc, #144]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007462:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <RCCEx_PLL2_Config+0x160>)
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	69d2      	ldr	r2, [r2, #28]
 800746a:	00d2      	lsls	r2, r2, #3
 800746c:	4920      	ldr	r1, [pc, #128]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007472:	4b1f      	ldr	r3, [pc, #124]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007478:	f043 0310 	orr.w	r3, r3, #16
 800747c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007484:	4b1a      	ldr	r3, [pc, #104]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4a19      	ldr	r2, [pc, #100]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800748a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800748e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007490:	e00f      	b.n	80074b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007498:	4b15      	ldr	r3, [pc, #84]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	4a14      	ldr	r2, [pc, #80]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800749e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074a4:	e005      	b.n	80074b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074a6:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	4a11      	ldr	r2, [pc, #68]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074b2:	4b0f      	ldr	r3, [pc, #60]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a0e      	ldr	r2, [pc, #56]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074be:	f7fb f8d7 	bl	8002670 <HAL_GetTick>
 80074c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c4:	e008      	b.n	80074d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074c6:	f7fb f8d3 	bl	8002670 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e006      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0f0      	beq.n	80074c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	ffff0007 	.word	0xffff0007

080074f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007506:	4b53      	ldr	r3, [pc, #332]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d101      	bne.n	8007516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e099      	b.n	800764a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007516:	4b4f      	ldr	r3, [pc, #316]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a4e      	ldr	r2, [pc, #312]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800751c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007522:	f7fb f8a5 	bl	8002670 <HAL_GetTick>
 8007526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800752a:	f7fb f8a1 	bl	8002670 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e086      	b.n	800764a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800753c:	4b45      	ldr	r3, [pc, #276]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f0      	bne.n	800752a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007548:	4b42      	ldr	r3, [pc, #264]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	051b      	lsls	r3, r3, #20
 8007556:	493f      	ldr	r1, [pc, #252]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007558:	4313      	orrs	r3, r2
 800755a:	628b      	str	r3, [r1, #40]	@ 0x28
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	3b01      	subs	r3, #1
 8007562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	3b01      	subs	r3, #1
 800756c:	025b      	lsls	r3, r3, #9
 800756e:	b29b      	uxth	r3, r3
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	3b01      	subs	r3, #1
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	3b01      	subs	r3, #1
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800758c:	4931      	ldr	r1, [pc, #196]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007592:	4b30      	ldr	r3, [pc, #192]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	492d      	ldr	r1, [pc, #180]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	4928      	ldr	r1, [pc, #160]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075b6:	4b27      	ldr	r3, [pc, #156]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	4a26      	ldr	r2, [pc, #152]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075c2:	4b24      	ldr	r3, [pc, #144]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c6:	4b24      	ldr	r3, [pc, #144]	@ (8007658 <RCCEx_PLL3_Config+0x160>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	69d2      	ldr	r2, [r2, #28]
 80075ce:	00d2      	lsls	r2, r2, #3
 80075d0:	4920      	ldr	r1, [pc, #128]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	4a1e      	ldr	r2, [pc, #120]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075f4:	e00f      	b.n	8007616 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075fc:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	4a14      	ldr	r2, [pc, #80]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007608:	e005      	b.n	8007616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800760a:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	4a11      	ldr	r2, [pc, #68]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007616:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a0e      	ldr	r2, [pc, #56]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800761c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007622:	f7fb f825 	bl	8002670 <HAL_GetTick>
 8007626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007628:	e008      	b.n	800763c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800762a:	f7fb f821 	bl	8002670 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e006      	b.n	800764a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <RCCEx_PLL3_Config+0x15c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	58024400 	.word	0x58024400
 8007658:	ffff0007 	.word	0xffff0007

0800765c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e049      	b.n	8007702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa fdb8 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 f96e 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d020      	beq.n	800776e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01b      	beq.n	800776e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f06f 0202 	mvn.w	r2, #2
 800773e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8f3 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 800775a:	e005      	b.n	8007768 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8e5 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8f6 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01b      	beq.n	80077ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f06f 0204 	mvn.w	r2, #4
 800778a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f8cd 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 80077a6:	e005      	b.n	80077b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f8bf 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8d0 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01b      	beq.n	8007806 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f06f 0208 	mvn.w	r2, #8
 80077d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2204      	movs	r2, #4
 80077dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8a7 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 80077f2:	e005      	b.n	8007800 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f899 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8aa 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01b      	beq.n	8007852 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f06f 0210 	mvn.w	r2, #16
 8007822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2208      	movs	r2, #8
 8007828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f881 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 800783e:	e005      	b.n	800784c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f873 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f884 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0201 	mvn.w	r2, #1
 800786e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f851 	bl	8007918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9a4 	bl	8007bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f99c 	bl	8007c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f83e 	bl	8007968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0220 	mvn.w	r2, #32
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f964 	bl	8007bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007910:	bf00      	nop
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a43      	ldr	r2, [pc, #268]	@ (8007a9c <TIM_Base_SetConfig+0x120>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a40      	ldr	r2, [pc, #256]	@ (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3f      	ldr	r2, [pc, #252]	@ (8007aa4 <TIM_Base_SetConfig+0x128>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3e      	ldr	r2, [pc, #248]	@ (8007aa8 <TIM_Base_SetConfig+0x12c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3d      	ldr	r2, [pc, #244]	@ (8007aac <TIM_Base_SetConfig+0x130>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <TIM_Base_SetConfig+0x120>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01f      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079dc:	d01b      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d017      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa4 <TIM_Base_SetConfig+0x128>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa8 <TIM_Base_SetConfig+0x12c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00f      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	@ (8007aac <TIM_Base_SetConfig+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00b      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2b      	ldr	r2, [pc, #172]	@ (8007ab0 <TIM_Base_SetConfig+0x134>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab4 <TIM_Base_SetConfig+0x138>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <TIM_Base_SetConfig+0x9a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a29      	ldr	r2, [pc, #164]	@ (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d108      	bne.n	8007a28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a14      	ldr	r2, [pc, #80]	@ (8007a9c <TIM_Base_SetConfig+0x120>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00f      	beq.n	8007a6e <TIM_Base_SetConfig+0xf2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a16      	ldr	r2, [pc, #88]	@ (8007aac <TIM_Base_SetConfig+0x130>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <TIM_Base_SetConfig+0xf2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a15      	ldr	r2, [pc, #84]	@ (8007ab0 <TIM_Base_SetConfig+0x134>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_Base_SetConfig+0xf2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a14      	ldr	r2, [pc, #80]	@ (8007ab4 <TIM_Base_SetConfig+0x138>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_Base_SetConfig+0xf2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a13      	ldr	r2, [pc, #76]	@ (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d103      	bne.n	8007a76 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f043 0204 	orr.w	r2, r3, #4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e06d      	b.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a30      	ldr	r2, [pc, #192]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d108      	bne.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a20      	ldr	r2, [pc, #128]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d022      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b46:	d01d      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d018      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d013      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00e      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	@ (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a16      	ldr	r2, [pc, #88]	@ (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a15      	ldr	r2, [pc, #84]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10c      	bne.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40001800 	.word	0x40001800
 8007bd4:	40014000 	.word	0x40014000

08007bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e042      	b.n	8007cac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fa fb51 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2224      	movs	r2, #36	@ 0x24
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0201 	bic.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fe1e 	bl	80088a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8b3 	bl	8007dd0 <UART_SetConfig>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e01b      	b.n	8007cac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fe9d 	bl	80089e4 <UART_CheckIdleState>
 8007caa:	4603      	mov	r3, r0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	@ 0x28
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d17b      	bne.n	8007dc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_UART_Transmit+0x26>
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e074      	b.n	8007dc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2221      	movs	r2, #33	@ 0x21
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cee:	f7fa fcbf 	bl	8002670 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	88fa      	ldrh	r2, [r7, #6]
 8007cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0c:	d108      	bne.n	8007d20 <HAL_UART_Transmit+0x6c>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e003      	b.n	8007d28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d28:	e030      	b.n	8007d8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	2180      	movs	r1, #128	@ 0x80
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 feff 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e03d      	b.n	8007dc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3302      	adds	r3, #2
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e007      	b.n	8007d7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1c8      	bne.n	8007d2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2140      	movs	r1, #64	@ 0x40
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fec8 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e006      	b.n	8007dc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
  }
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b092      	sub	sp, #72	@ 0x48
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4bbe      	ldr	r3, [pc, #760]	@ (80080f8 <UART_SetConfig+0x328>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4ab3      	ldr	r2, [pc, #716]	@ (80080fc <UART_SetConfig+0x32c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	4baf      	ldr	r3, [pc, #700]	@ (8008100 <UART_SetConfig+0x330>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	f023 010f 	bic.w	r1, r3, #15
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4aa6      	ldr	r2, [pc, #664]	@ (8008104 <UART_SetConfig+0x334>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d177      	bne.n	8007f60 <UART_SetConfig+0x190>
 8007e70:	4ba5      	ldr	r3, [pc, #660]	@ (8008108 <UART_SetConfig+0x338>)
 8007e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e78:	2b28      	cmp	r3, #40	@ 0x28
 8007e7a:	d86d      	bhi.n	8007f58 <UART_SetConfig+0x188>
 8007e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <UART_SetConfig+0xb4>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f59 	.word	0x08007f59
 8007e8c:	08007f59 	.word	0x08007f59
 8007e90:	08007f59 	.word	0x08007f59
 8007e94:	08007f59 	.word	0x08007f59
 8007e98:	08007f59 	.word	0x08007f59
 8007e9c:	08007f59 	.word	0x08007f59
 8007ea0:	08007f59 	.word	0x08007f59
 8007ea4:	08007f31 	.word	0x08007f31
 8007ea8:	08007f59 	.word	0x08007f59
 8007eac:	08007f59 	.word	0x08007f59
 8007eb0:	08007f59 	.word	0x08007f59
 8007eb4:	08007f59 	.word	0x08007f59
 8007eb8:	08007f59 	.word	0x08007f59
 8007ebc:	08007f59 	.word	0x08007f59
 8007ec0:	08007f59 	.word	0x08007f59
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f59 	.word	0x08007f59
 8007ecc:	08007f59 	.word	0x08007f59
 8007ed0:	08007f59 	.word	0x08007f59
 8007ed4:	08007f59 	.word	0x08007f59
 8007ed8:	08007f59 	.word	0x08007f59
 8007edc:	08007f59 	.word	0x08007f59
 8007ee0:	08007f59 	.word	0x08007f59
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f59 	.word	0x08007f59
 8007eec:	08007f59 	.word	0x08007f59
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007f59 	.word	0x08007f59
 8007ef8:	08007f59 	.word	0x08007f59
 8007efc:	08007f59 	.word	0x08007f59
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f49 	.word	0x08007f49
 8007f08:	08007f59 	.word	0x08007f59
 8007f0c:	08007f59 	.word	0x08007f59
 8007f10:	08007f59 	.word	0x08007f59
 8007f14:	08007f59 	.word	0x08007f59
 8007f18:	08007f59 	.word	0x08007f59
 8007f1c:	08007f59 	.word	0x08007f59
 8007f20:	08007f59 	.word	0x08007f59
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e222      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e21e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e21a      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e216      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f48:	2320      	movs	r3, #32
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e212      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f50:	2340      	movs	r3, #64	@ 0x40
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f56:	e20e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f58:	2380      	movs	r3, #128	@ 0x80
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	e20a      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a69      	ldr	r2, [pc, #420]	@ (800810c <UART_SetConfig+0x33c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d130      	bne.n	8007fcc <UART_SetConfig+0x1fc>
 8007f6a:	4b67      	ldr	r3, [pc, #412]	@ (8008108 <UART_SetConfig+0x338>)
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d826      	bhi.n	8007fc4 <UART_SetConfig+0x1f4>
 8007f76:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <UART_SetConfig+0x1ac>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f95 	.word	0x08007f95
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	08007fa5 	.word	0x08007fa5
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e1ec      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e1e8      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e1e4      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e1e0      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e1dc      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fbc:	2340      	movs	r3, #64	@ 0x40
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e1d8      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e1d4      	b.n	8008376 <UART_SetConfig+0x5a6>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8008110 <UART_SetConfig+0x340>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d130      	bne.n	8008038 <UART_SetConfig+0x268>
 8007fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8008108 <UART_SetConfig+0x338>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d826      	bhi.n	8008030 <UART_SetConfig+0x260>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <UART_SetConfig+0x218>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e1b6      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e1b2      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e1ae      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e1aa      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e1a6      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e1a2      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e19e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a35      	ldr	r2, [pc, #212]	@ (8008114 <UART_SetConfig+0x344>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x2d4>
 8008042:	4b31      	ldr	r3, [pc, #196]	@ (8008108 <UART_SetConfig+0x338>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x2cc>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x284>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e180      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e17c      	b.n	8008376 <UART_SetConfig+0x5a6>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e178      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e174      	b.n	8008376 <UART_SetConfig+0x5a6>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e170      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008094:	2340      	movs	r3, #64	@ 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e16c      	b.n	8008376 <UART_SetConfig+0x5a6>
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e168      	b.n	8008376 <UART_SetConfig+0x5a6>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008118 <UART_SetConfig+0x348>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d142      	bne.n	8008134 <UART_SetConfig+0x364>
 80080ae:	4b16      	ldr	r3, [pc, #88]	@ (8008108 <UART_SetConfig+0x338>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d838      	bhi.n	800812c <UART_SetConfig+0x35c>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0x2f0>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	0800811d 	.word	0x0800811d
 80080d4:	08008125 	.word	0x08008125
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e14a      	b.n	8008376 <UART_SetConfig+0x5a6>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e146      	b.n	8008376 <UART_SetConfig+0x5a6>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e142      	b.n	8008376 <UART_SetConfig+0x5a6>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e13e      	b.n	8008376 <UART_SetConfig+0x5a6>
 80080f8:	cfff69f3 	.word	0xcfff69f3
 80080fc:	58000c00 	.word	0x58000c00
 8008100:	11fff4ff 	.word	0x11fff4ff
 8008104:	40011000 	.word	0x40011000
 8008108:	58024400 	.word	0x58024400
 800810c:	40004400 	.word	0x40004400
 8008110:	40004800 	.word	0x40004800
 8008114:	40004c00 	.word	0x40004c00
 8008118:	40005000 	.word	0x40005000
 800811c:	2320      	movs	r3, #32
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e128      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008124:	2340      	movs	r3, #64	@ 0x40
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e124      	b.n	8008376 <UART_SetConfig+0x5a6>
 800812c:	2380      	movs	r3, #128	@ 0x80
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e120      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4acb      	ldr	r2, [pc, #812]	@ (8008468 <UART_SetConfig+0x698>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d176      	bne.n	800822c <UART_SetConfig+0x45c>
 800813e:	4bcb      	ldr	r3, [pc, #812]	@ (800846c <UART_SetConfig+0x69c>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008146:	2b28      	cmp	r3, #40	@ 0x28
 8008148:	d86c      	bhi.n	8008224 <UART_SetConfig+0x454>
 800814a:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <UART_SetConfig+0x380>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	080081f5 	.word	0x080081f5
 8008154:	08008225 	.word	0x08008225
 8008158:	08008225 	.word	0x08008225
 800815c:	08008225 	.word	0x08008225
 8008160:	08008225 	.word	0x08008225
 8008164:	08008225 	.word	0x08008225
 8008168:	08008225 	.word	0x08008225
 800816c:	08008225 	.word	0x08008225
 8008170:	080081fd 	.word	0x080081fd
 8008174:	08008225 	.word	0x08008225
 8008178:	08008225 	.word	0x08008225
 800817c:	08008225 	.word	0x08008225
 8008180:	08008225 	.word	0x08008225
 8008184:	08008225 	.word	0x08008225
 8008188:	08008225 	.word	0x08008225
 800818c:	08008225 	.word	0x08008225
 8008190:	08008205 	.word	0x08008205
 8008194:	08008225 	.word	0x08008225
 8008198:	08008225 	.word	0x08008225
 800819c:	08008225 	.word	0x08008225
 80081a0:	08008225 	.word	0x08008225
 80081a4:	08008225 	.word	0x08008225
 80081a8:	08008225 	.word	0x08008225
 80081ac:	08008225 	.word	0x08008225
 80081b0:	0800820d 	.word	0x0800820d
 80081b4:	08008225 	.word	0x08008225
 80081b8:	08008225 	.word	0x08008225
 80081bc:	08008225 	.word	0x08008225
 80081c0:	08008225 	.word	0x08008225
 80081c4:	08008225 	.word	0x08008225
 80081c8:	08008225 	.word	0x08008225
 80081cc:	08008225 	.word	0x08008225
 80081d0:	08008215 	.word	0x08008215
 80081d4:	08008225 	.word	0x08008225
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	08008225 	.word	0x08008225
 80081e4:	08008225 	.word	0x08008225
 80081e8:	08008225 	.word	0x08008225
 80081ec:	08008225 	.word	0x08008225
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e0bc      	b.n	8008376 <UART_SetConfig+0x5a6>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e0b8      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e0b4      	b.n	8008376 <UART_SetConfig+0x5a6>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e0b0      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008214:	2320      	movs	r3, #32
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821a:	e0ac      	b.n	8008376 <UART_SetConfig+0x5a6>
 800821c:	2340      	movs	r3, #64	@ 0x40
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008222:	e0a8      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008224:	2380      	movs	r3, #128	@ 0x80
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822a:	e0a4      	b.n	8008376 <UART_SetConfig+0x5a6>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a8f      	ldr	r2, [pc, #572]	@ (8008470 <UART_SetConfig+0x6a0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d130      	bne.n	8008298 <UART_SetConfig+0x4c8>
 8008236:	4b8d      	ldr	r3, [pc, #564]	@ (800846c <UART_SetConfig+0x69c>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	2b05      	cmp	r3, #5
 8008240:	d826      	bhi.n	8008290 <UART_SetConfig+0x4c0>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <UART_SetConfig+0x478>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008261 	.word	0x08008261
 800824c:	08008269 	.word	0x08008269
 8008250:	08008271 	.word	0x08008271
 8008254:	08008279 	.word	0x08008279
 8008258:	08008281 	.word	0x08008281
 800825c:	08008289 	.word	0x08008289
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e086      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e082      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e07e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e07a      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008280:	2320      	movs	r3, #32
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e076      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008288:	2340      	movs	r3, #64	@ 0x40
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e072      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008290:	2380      	movs	r3, #128	@ 0x80
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e06e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a75      	ldr	r2, [pc, #468]	@ (8008474 <UART_SetConfig+0x6a4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <UART_SetConfig+0x534>
 80082a2:	4b72      	ldr	r3, [pc, #456]	@ (800846c <UART_SetConfig+0x69c>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <UART_SetConfig+0x52c>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <UART_SetConfig+0x4e4>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e050      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e04c      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e048      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e044      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e040      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	@ 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fa:	e03c      	b.n	8008376 <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	@ 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008302:	e038      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a5b      	ldr	r2, [pc, #364]	@ (8008478 <UART_SetConfig+0x6a8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x5a0>
 800830e:	4b57      	ldr	r3, [pc, #348]	@ (800846c <UART_SetConfig+0x69c>)
 8008310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x598>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x550>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2302      	movs	r3, #2
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e01a      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e016      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e012      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e00e      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e00a      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	@ 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e006      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	@ 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e002      	b.n	8008376 <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	@ 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3f      	ldr	r2, [pc, #252]	@ (8008478 <UART_SetConfig+0x6a8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	f040 80f8 	bne.w	8008572 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008386:	2b20      	cmp	r3, #32
 8008388:	dc46      	bgt.n	8008418 <UART_SetConfig+0x648>
 800838a:	2b02      	cmp	r3, #2
 800838c:	f2c0 8082 	blt.w	8008494 <UART_SetConfig+0x6c4>
 8008390:	3b02      	subs	r3, #2
 8008392:	2b1e      	cmp	r3, #30
 8008394:	d87e      	bhi.n	8008494 <UART_SetConfig+0x6c4>
 8008396:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <UART_SetConfig+0x5cc>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	0800841f 	.word	0x0800841f
 80083a0:	08008495 	.word	0x08008495
 80083a4:	08008427 	.word	0x08008427
 80083a8:	08008495 	.word	0x08008495
 80083ac:	08008495 	.word	0x08008495
 80083b0:	08008495 	.word	0x08008495
 80083b4:	08008437 	.word	0x08008437
 80083b8:	08008495 	.word	0x08008495
 80083bc:	08008495 	.word	0x08008495
 80083c0:	08008495 	.word	0x08008495
 80083c4:	08008495 	.word	0x08008495
 80083c8:	08008495 	.word	0x08008495
 80083cc:	08008495 	.word	0x08008495
 80083d0:	08008495 	.word	0x08008495
 80083d4:	08008447 	.word	0x08008447
 80083d8:	08008495 	.word	0x08008495
 80083dc:	08008495 	.word	0x08008495
 80083e0:	08008495 	.word	0x08008495
 80083e4:	08008495 	.word	0x08008495
 80083e8:	08008495 	.word	0x08008495
 80083ec:	08008495 	.word	0x08008495
 80083f0:	08008495 	.word	0x08008495
 80083f4:	08008495 	.word	0x08008495
 80083f8:	08008495 	.word	0x08008495
 80083fc:	08008495 	.word	0x08008495
 8008400:	08008495 	.word	0x08008495
 8008404:	08008495 	.word	0x08008495
 8008408:	08008495 	.word	0x08008495
 800840c:	08008495 	.word	0x08008495
 8008410:	08008495 	.word	0x08008495
 8008414:	08008487 	.word	0x08008487
 8008418:	2b40      	cmp	r3, #64	@ 0x40
 800841a:	d037      	beq.n	800848c <UART_SetConfig+0x6bc>
 800841c:	e03a      	b.n	8008494 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800841e:	f7fe fcfb 	bl	8006e18 <HAL_RCCEx_GetD3PCLK1Freq>
 8008422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008424:	e03c      	b.n	80084a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fd0a 	bl	8006e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008434:	e034      	b.n	80084a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008436:	f107 0318 	add.w	r3, r7, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fe56 	bl	80070ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008444:	e02c      	b.n	80084a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008446:	4b09      	ldr	r3, [pc, #36]	@ (800846c <UART_SetConfig+0x69c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d016      	beq.n	8008480 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008452:	4b06      	ldr	r3, [pc, #24]	@ (800846c <UART_SetConfig+0x69c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	08db      	lsrs	r3, r3, #3
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	4a07      	ldr	r2, [pc, #28]	@ (800847c <UART_SetConfig+0x6ac>)
 800845e:	fa22 f303 	lsr.w	r3, r2, r3
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008464:	e01c      	b.n	80084a0 <UART_SetConfig+0x6d0>
 8008466:	bf00      	nop
 8008468:	40011400 	.word	0x40011400
 800846c:	58024400 	.word	0x58024400
 8008470:	40007800 	.word	0x40007800
 8008474:	40007c00 	.word	0x40007c00
 8008478:	58000c00 	.word	0x58000c00
 800847c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008480:	4b9d      	ldr	r3, [pc, #628]	@ (80086f8 <UART_SetConfig+0x928>)
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e00c      	b.n	80084a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008486:	4b9d      	ldr	r3, [pc, #628]	@ (80086fc <UART_SetConfig+0x92c>)
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848a:	e009      	b.n	80084a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008492:	e005      	b.n	80084a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800849e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 81de 	beq.w	8008864 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	4a94      	ldr	r2, [pc, #592]	@ (8008700 <UART_SetConfig+0x930>)
 80084ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d305      	bcc.n	80084d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d903      	bls.n	80084e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084de:	e1c1      	b.n	8008864 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e2:	2200      	movs	r2, #0
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	60fa      	str	r2, [r7, #12]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	4a84      	ldr	r2, [pc, #528]	@ (8008700 <UART_SetConfig+0x930>)
 80084ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2200      	movs	r2, #0
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008502:	f7f8 f901 	bl	8000708 <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	020b      	lsls	r3, r1, #8
 8008518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800851c:	0202      	lsls	r2, r0, #8
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	6849      	ldr	r1, [r1, #4]
 8008522:	0849      	lsrs	r1, r1, #1
 8008524:	2000      	movs	r0, #0
 8008526:	460c      	mov	r4, r1
 8008528:	4605      	mov	r5, r0
 800852a:	eb12 0804 	adds.w	r8, r2, r4
 800852e:	eb43 0905 	adc.w	r9, r3, r5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	469a      	mov	sl, r3
 800853a:	4693      	mov	fp, r2
 800853c:	4652      	mov	r2, sl
 800853e:	465b      	mov	r3, fp
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f8 f8e0 	bl	8000708 <__aeabi_uldivmod>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4613      	mov	r3, r2
 800854e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008556:	d308      	bcc.n	800856a <UART_SetConfig+0x79a>
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800855e:	d204      	bcs.n	800856a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008566:	60da      	str	r2, [r3, #12]
 8008568:	e17c      	b.n	8008864 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008570:	e178      	b.n	8008864 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857a:	f040 80c5 	bne.w	8008708 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800857e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008582:	2b20      	cmp	r3, #32
 8008584:	dc48      	bgt.n	8008618 <UART_SetConfig+0x848>
 8008586:	2b00      	cmp	r3, #0
 8008588:	db7b      	blt.n	8008682 <UART_SetConfig+0x8b2>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d879      	bhi.n	8008682 <UART_SetConfig+0x8b2>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0x7c4>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	0800861f 	.word	0x0800861f
 8008598:	08008627 	.word	0x08008627
 800859c:	08008683 	.word	0x08008683
 80085a0:	08008683 	.word	0x08008683
 80085a4:	0800862f 	.word	0x0800862f
 80085a8:	08008683 	.word	0x08008683
 80085ac:	08008683 	.word	0x08008683
 80085b0:	08008683 	.word	0x08008683
 80085b4:	0800863f 	.word	0x0800863f
 80085b8:	08008683 	.word	0x08008683
 80085bc:	08008683 	.word	0x08008683
 80085c0:	08008683 	.word	0x08008683
 80085c4:	08008683 	.word	0x08008683
 80085c8:	08008683 	.word	0x08008683
 80085cc:	08008683 	.word	0x08008683
 80085d0:	08008683 	.word	0x08008683
 80085d4:	0800864f 	.word	0x0800864f
 80085d8:	08008683 	.word	0x08008683
 80085dc:	08008683 	.word	0x08008683
 80085e0:	08008683 	.word	0x08008683
 80085e4:	08008683 	.word	0x08008683
 80085e8:	08008683 	.word	0x08008683
 80085ec:	08008683 	.word	0x08008683
 80085f0:	08008683 	.word	0x08008683
 80085f4:	08008683 	.word	0x08008683
 80085f8:	08008683 	.word	0x08008683
 80085fc:	08008683 	.word	0x08008683
 8008600:	08008683 	.word	0x08008683
 8008604:	08008683 	.word	0x08008683
 8008608:	08008683 	.word	0x08008683
 800860c:	08008683 	.word	0x08008683
 8008610:	08008683 	.word	0x08008683
 8008614:	08008675 	.word	0x08008675
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d02e      	beq.n	800867a <UART_SetConfig+0x8aa>
 800861c:	e031      	b.n	8008682 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861e:	f7fd f9c5 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 8008622:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008624:	e033      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008626:	f7fd f9d7 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 800862a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800862c:	e02f      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fc06 	bl	8006e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863c:	e027      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800863e:	f107 0318 	add.w	r3, r7, #24
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fd52 	bl	80070ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864c:	e01f      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864e:	4b2d      	ldr	r3, [pc, #180]	@ (8008704 <UART_SetConfig+0x934>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800865a:	4b2a      	ldr	r3, [pc, #168]	@ (8008704 <UART_SetConfig+0x934>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	08db      	lsrs	r3, r3, #3
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	4a24      	ldr	r2, [pc, #144]	@ (80086f8 <UART_SetConfig+0x928>)
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800866c:	e00f      	b.n	800868e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800866e:	4b22      	ldr	r3, [pc, #136]	@ (80086f8 <UART_SetConfig+0x928>)
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008672:	e00c      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008674:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <UART_SetConfig+0x92c>)
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	e009      	b.n	800868e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800867a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e005      	b.n	800868e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800868c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800868e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80e7 	beq.w	8008864 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <UART_SetConfig+0x930>)
 800869c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a8:	005a      	lsls	r2, r3, #1
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	441a      	add	r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	2b0f      	cmp	r3, #15
 80086c0:	d916      	bls.n	80086f0 <UART_SetConfig+0x920>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c8:	d212      	bcs.n	80086f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f023 030f 	bic.w	r3, r3, #15
 80086d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	b29a      	uxth	r2, r3
 80086e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086e2:	4313      	orrs	r3, r2
 80086e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	e0b9      	b.n	8008864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086f6:	e0b5      	b.n	8008864 <UART_SetConfig+0xa94>
 80086f8:	03d09000 	.word	0x03d09000
 80086fc:	003d0900 	.word	0x003d0900
 8008700:	0800e884 	.word	0x0800e884
 8008704:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008708:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800870c:	2b20      	cmp	r3, #32
 800870e:	dc49      	bgt.n	80087a4 <UART_SetConfig+0x9d4>
 8008710:	2b00      	cmp	r3, #0
 8008712:	db7c      	blt.n	800880e <UART_SetConfig+0xa3e>
 8008714:	2b20      	cmp	r3, #32
 8008716:	d87a      	bhi.n	800880e <UART_SetConfig+0xa3e>
 8008718:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <UART_SetConfig+0x950>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	080087ab 	.word	0x080087ab
 8008724:	080087b3 	.word	0x080087b3
 8008728:	0800880f 	.word	0x0800880f
 800872c:	0800880f 	.word	0x0800880f
 8008730:	080087bb 	.word	0x080087bb
 8008734:	0800880f 	.word	0x0800880f
 8008738:	0800880f 	.word	0x0800880f
 800873c:	0800880f 	.word	0x0800880f
 8008740:	080087cb 	.word	0x080087cb
 8008744:	0800880f 	.word	0x0800880f
 8008748:	0800880f 	.word	0x0800880f
 800874c:	0800880f 	.word	0x0800880f
 8008750:	0800880f 	.word	0x0800880f
 8008754:	0800880f 	.word	0x0800880f
 8008758:	0800880f 	.word	0x0800880f
 800875c:	0800880f 	.word	0x0800880f
 8008760:	080087db 	.word	0x080087db
 8008764:	0800880f 	.word	0x0800880f
 8008768:	0800880f 	.word	0x0800880f
 800876c:	0800880f 	.word	0x0800880f
 8008770:	0800880f 	.word	0x0800880f
 8008774:	0800880f 	.word	0x0800880f
 8008778:	0800880f 	.word	0x0800880f
 800877c:	0800880f 	.word	0x0800880f
 8008780:	0800880f 	.word	0x0800880f
 8008784:	0800880f 	.word	0x0800880f
 8008788:	0800880f 	.word	0x0800880f
 800878c:	0800880f 	.word	0x0800880f
 8008790:	0800880f 	.word	0x0800880f
 8008794:	0800880f 	.word	0x0800880f
 8008798:	0800880f 	.word	0x0800880f
 800879c:	0800880f 	.word	0x0800880f
 80087a0:	08008801 	.word	0x08008801
 80087a4:	2b40      	cmp	r3, #64	@ 0x40
 80087a6:	d02e      	beq.n	8008806 <UART_SetConfig+0xa36>
 80087a8:	e031      	b.n	800880e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087aa:	f7fd f8ff 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 80087ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087b0:	e033      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b2:	f7fd f911 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 80087b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087b8:	e02f      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fb40 	bl	8006e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c8:	e027      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ca:	f107 0318 	add.w	r3, r7, #24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fc8c 	bl	80070ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d8:	e01f      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087da:	4b2d      	ldr	r3, [pc, #180]	@ (8008890 <UART_SetConfig+0xac0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008890 <UART_SetConfig+0xac0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	08db      	lsrs	r3, r3, #3
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	4a28      	ldr	r2, [pc, #160]	@ (8008894 <UART_SetConfig+0xac4>)
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087f8:	e00f      	b.n	800881a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80087fa:	4b26      	ldr	r3, [pc, #152]	@ (8008894 <UART_SetConfig+0xac4>)
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fe:	e00c      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008800:	4b25      	ldr	r3, [pc, #148]	@ (8008898 <UART_SetConfig+0xac8>)
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008804:	e009      	b.n	800881a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e005      	b.n	800881a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008818:	bf00      	nop
    }

    if (pclk != 0U)
 800881a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d021      	beq.n	8008864 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008824:	4a1d      	ldr	r2, [pc, #116]	@ (800889c <UART_SetConfig+0xacc>)
 8008826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800882a:	461a      	mov	r2, r3
 800882c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	441a      	add	r2, r3
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d909      	bls.n	800885e <UART_SetConfig+0xa8e>
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008850:	d205      	bcs.n	800885e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	b29a      	uxth	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60da      	str	r2, [r3, #12]
 800885c:	e002      	b.n	8008864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2201      	movs	r2, #1
 8008868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2201      	movs	r2, #1
 8008870:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2200      	movs	r2, #0
 8008878:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008880:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008884:	4618      	mov	r0, r3
 8008886:	3748      	adds	r7, #72	@ 0x48
 8008888:	46bd      	mov	sp, r7
 800888a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	03d09000 	.word	0x03d09000
 8008898:	003d0900 	.word	0x003d0900
 800889c:	0800e884 	.word	0x0800e884

080088a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899e:	d10a      	bne.n	80089b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	605a      	str	r2, [r3, #4]
  }
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b098      	sub	sp, #96	@ 0x60
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089f4:	f7f9 fe3c 	bl	8002670 <HAL_GetTick>
 80089f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d12f      	bne.n	8008a68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a10:	2200      	movs	r2, #0
 8008a12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f88e 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d022      	beq.n	8008a68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e063      	b.n	8008b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d149      	bne.n	8008b0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f857 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d03c      	beq.n	8008b0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e6      	bne.n	8008a90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ae2:	61fa      	str	r2, [r7, #28]
 8008ae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	69b9      	ldr	r1, [r7, #24]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	617b      	str	r3, [r7, #20]
   return(result);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e5      	bne.n	8008ac2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e012      	b.n	8008b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3758      	adds	r7, #88	@ 0x58
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b48:	e04f      	b.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d04b      	beq.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b52:	f7f9 fd8d 	bl	8002670 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d302      	bcc.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e04e      	b.n	8008c0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d037      	beq.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b80      	cmp	r3, #128	@ 0x80
 8008b7e:	d034      	beq.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b40      	cmp	r3, #64	@ 0x40
 8008b84:	d031      	beq.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d110      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f839 	bl	8008c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e029      	b.n	8008c0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bc4:	d111      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f81f 	bl	8008c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e00f      	b.n	8008c0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69da      	ldr	r2, [r3, #28]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	bf0c      	ite	eq
 8008bfa:	2301      	moveq	r3, #1
 8008bfc:	2300      	movne	r3, #0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d0a0      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b095      	sub	sp, #84	@ 0x54
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e6      	bne.n	8008c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3308      	adds	r3, #8
 8008c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	4b1e      	ldr	r3, [pc, #120]	@ (8008cdc <UART_EndRxTransfer+0xc8>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e5      	bne.n	8008c4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d118      	bne.n	8008cbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cd0:	bf00      	nop
 8008cd2:	3754      	adds	r7, #84	@ 0x54
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	effffffe 	.word	0xeffffffe

08008ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e027      	b.n	8008d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2224      	movs	r2, #36	@ 0x24
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e02d      	b.n	8008dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2224      	movs	r2, #36	@ 0x24
 8008d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 0201 	bic.w	r2, r2, #1
 8008d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f850 	bl	8008e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e02d      	b.n	8008e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2224      	movs	r2, #36	@ 0x24
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f812 	bl	8008e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d108      	bne.n	8008e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e6c:	e031      	b.n	8008ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e6e:	2310      	movs	r3, #16
 8008e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e72:	2310      	movs	r3, #16
 8008e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	0e5b      	lsrs	r3, r3, #25
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	0f5b      	lsrs	r3, r3, #29
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	7b3a      	ldrb	r2, [r7, #12]
 8008e9a:	4911      	ldr	r1, [pc, #68]	@ (8008ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8008e9c:	5c8a      	ldrb	r2, [r1, r2]
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ea2:	7b3a      	ldrb	r2, [r7, #12]
 8008ea4:	490f      	ldr	r1, [pc, #60]	@ (8008ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	7b7a      	ldrb	r2, [r7, #13]
 8008eb8:	4909      	ldr	r1, [pc, #36]	@ (8008ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8008eba:	5c8a      	ldrb	r2, [r1, r2]
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ec0:	7b7a      	ldrb	r2, [r7, #13]
 8008ec2:	4908      	ldr	r1, [pc, #32]	@ (8008ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	0800e89c 	.word	0x0800e89c
 8008ee4:	0800e8a4 	.word	0x0800e8a4

08008ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ee8:	b084      	sub	sp, #16
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	f107 001c 	add.w	r0, r7, #28
 8008ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d121      	bne.n	8008f46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc4 <USB_CoreInit+0xdc>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d105      	bne.n	8008f3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 faaa 	bl	8009494 <USB_CoreReset>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
 8008f44:	e01b      	b.n	8008f7e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa9e 	bl	8009494 <USB_CoreReset>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f70:	e005      	b.n	8008f7e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f7e:	7fbb      	ldrb	r3, [r7, #30]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d116      	bne.n	8008fb2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f92:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc8 <USB_CoreInit+0xe0>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f043 0206 	orr.w	r2, r3, #6
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fbe:	b004      	add	sp, #16
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	ffbdffbf 	.word	0xffbdffbf
 8008fc8:	03ee0000 	.word	0x03ee0000

08008fcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f023 0201 	bic.w	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d115      	bne.n	800903c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800901c:	200a      	movs	r0, #10
 800901e:	f7f9 fb33 	bl	8002688 <HAL_Delay>
      ms += 10U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	330a      	adds	r3, #10
 8009026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fa25 	bl	8009478 <USB_GetMode>
 800902e:	4603      	mov	r3, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	d01e      	beq.n	8009072 <USB_SetCurrentMode+0x84>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2bc7      	cmp	r3, #199	@ 0xc7
 8009038:	d9f0      	bls.n	800901c <USB_SetCurrentMode+0x2e>
 800903a:	e01a      	b.n	8009072 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800903c:	78fb      	ldrb	r3, [r7, #3]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d115      	bne.n	800906e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800904e:	200a      	movs	r0, #10
 8009050:	f7f9 fb1a 	bl	8002688 <HAL_Delay>
      ms += 10U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	330a      	adds	r3, #10
 8009058:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa0c 	bl	8009478 <USB_GetMode>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <USB_SetCurrentMode+0x84>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2bc7      	cmp	r3, #199	@ 0xc7
 800906a:	d9f0      	bls.n	800904e <USB_SetCurrentMode+0x60>
 800906c:	e001      	b.n	8009072 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e005      	b.n	800907e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2bc8      	cmp	r3, #200	@ 0xc8
 8009076:	d101      	bne.n	800907c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e000      	b.n	800907e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009088:	b084      	sub	sp, #16
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090a2:	2300      	movs	r3, #0
 80090a4:	613b      	str	r3, [r7, #16]
 80090a6:	e009      	b.n	80090bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3340      	adds	r3, #64	@ 0x40
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b0e      	cmp	r3, #14
 80090c0:	d9f2      	bls.n	80090a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d11c      	bne.n	8009104 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090d8:	f043 0302 	orr.w	r3, r3, #2
 80090dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e005      	b.n	8009110 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009116:	461a      	mov	r2, r3
 8009118:	2300      	movs	r3, #0
 800911a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800911c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10d      	bne.n	8009140 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f968 	bl	8009404 <USB_SetDevSpeed>
 8009134:	e008      	b.n	8009148 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009136:	2101      	movs	r1, #1
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f963 	bl	8009404 <USB_SetDevSpeed>
 800913e:	e003      	b.n	8009148 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009140:	2103      	movs	r1, #3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f95e 	bl	8009404 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009148:	2110      	movs	r1, #16
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f8fa 	bl	8009344 <USB_FlushTxFifo>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f924 	bl	80093a8 <USB_FlushRxFifo>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009170:	461a      	mov	r2, r3
 8009172:	2300      	movs	r3, #0
 8009174:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917c:	461a      	mov	r2, r3
 800917e:	2300      	movs	r3, #0
 8009180:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	e043      	b.n	800921c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091aa:	d118      	bne.n	80091de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091be:	461a      	mov	r2, r3
 80091c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	e013      	b.n	80091f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	461a      	mov	r2, r3
 80091d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	e008      	b.n	80091f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ea:	461a      	mov	r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fc:	461a      	mov	r2, r3
 80091fe:	2300      	movs	r3, #0
 8009200:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920e:	461a      	mov	r2, r3
 8009210:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3301      	adds	r3, #1
 800921a:	613b      	str	r3, [r7, #16]
 800921c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009220:	461a      	mov	r2, r3
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4293      	cmp	r3, r2
 8009226:	d3b5      	bcc.n	8009194 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	e043      	b.n	80092b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009244:	d118      	bne.n	8009278 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009258:	461a      	mov	r2, r3
 800925a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	e013      	b.n	800928a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926e:	461a      	mov	r2, r3
 8009270:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	e008      	b.n	800928a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009284:	461a      	mov	r2, r3
 8009286:	2300      	movs	r3, #0
 8009288:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009296:	461a      	mov	r2, r3
 8009298:	2300      	movs	r3, #0
 800929a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a8:	461a      	mov	r2, r3
 80092aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	3301      	adds	r3, #1
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092ba:	461a      	mov	r2, r3
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	4293      	cmp	r3, r2
 80092c0:	d3b5      	bcc.n	800922e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80092e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d105      	bne.n	80092f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f043 0210 	orr.w	r2, r3, #16
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	4b0f      	ldr	r3, [pc, #60]	@ (800933c <USB_DevInit+0x2b4>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009304:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f043 0208 	orr.w	r2, r3, #8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009318:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800931c:	2b01      	cmp	r3, #1
 800931e:	d105      	bne.n	800932c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699a      	ldr	r2, [r3, #24]
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <USB_DevInit+0x2b8>)
 8009326:	4313      	orrs	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009338:	b004      	add	sp, #16
 800933a:	4770      	bx	lr
 800933c:	803c3800 	.word	0x803c3800
 8009340:	40000004 	.word	0x40000004

08009344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800935e:	d901      	bls.n	8009364 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e01b      	b.n	800939c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	daf2      	bge.n	8009352 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	019b      	lsls	r3, r3, #6
 8009374:	f043 0220 	orr.w	r2, r3, #32
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009388:	d901      	bls.n	800938e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e006      	b.n	800939c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b20      	cmp	r3, #32
 8009398:	d0f0      	beq.n	800937c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3301      	adds	r3, #1
 80093b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093c0:	d901      	bls.n	80093c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e018      	b.n	80093f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	daf2      	bge.n	80093b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2210      	movs	r2, #16
 80093d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093e4:	d901      	bls.n	80093ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e006      	b.n	80093f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d0f0      	beq.n	80093d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009424:	4313      	orrs	r3, r2
 8009426:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009464:	f043 0302 	orr.w	r3, r3, #2
 8009468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	f003 0301 	and.w	r3, r3, #1
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3301      	adds	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094ac:	d901      	bls.n	80094b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e01b      	b.n	80094ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	daf2      	bge.n	80094a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f043 0201 	orr.w	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094d6:	d901      	bls.n	80094dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e006      	b.n	80094ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d0f0      	beq.n	80094ca <USB_CoreReset+0x36>

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <lps_read_reg>:
#include "lps22hh.h"



uint8_t lps_read_reg(uint8_t reg)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af04      	add	r7, sp, #16
 80094fe:	4603      	mov	r3, r0
 8009500:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	b29a      	uxth	r2, r3
 800950a:	f04f 33ff 	mov.w	r3, #4294967295
 800950e:	9302      	str	r3, [sp, #8]
 8009510:	2301      	movs	r3, #1
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	f107 030e 	add.w	r3, r7, #14
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	2301      	movs	r3, #1
 800951c:	21ba      	movs	r1, #186	@ 0xba
 800951e:	4805      	ldr	r0, [pc, #20]	@ (8009534 <lps_read_reg+0x3c>)
 8009520:	f7fa fbd6 	bl	8003cd0 <HAL_I2C_Mem_Read>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]
	return value;
 8009528:	7bbb      	ldrb	r3, [r7, #14]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	240003b0 	.word	0x240003b0

08009538 <lps_write_reg>:

void lps_write_reg(uint8_t reg, uint8_t value)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af04      	add	r7, sp, #16
 800953e:	4603      	mov	r3, r0
 8009540:	460a      	mov	r2, r1
 8009542:	71fb      	strb	r3, [r7, #7]
 8009544:	4613      	mov	r3, r2
 8009546:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	b29a      	uxth	r2, r3
 800954c:	f04f 33ff 	mov.w	r3, #4294967295
 8009550:	9302      	str	r3, [sp, #8]
 8009552:	2301      	movs	r3, #1
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	1dbb      	adds	r3, r7, #6
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2301      	movs	r3, #1
 800955c:	21ba      	movs	r1, #186	@ 0xba
 800955e:	4804      	ldr	r0, [pc, #16]	@ (8009570 <lps_write_reg+0x38>)
 8009560:	f7fa faa2 	bl	8003aa8 <HAL_I2C_Mem_Write>
 8009564:	4603      	mov	r3, r0
 8009566:	73fb      	strb	r3, [r7, #15]
}
 8009568:	bf00      	nop
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	240003b0 	.word	0x240003b0

08009574 <lps_read_val>:
struct values_lps lps_read_val(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08c      	sub	sp, #48	@ 0x30
 8009578:	af04      	add	r7, sp, #16
	struct values_lps result_lps;

	int16_t temp = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	81fb      	strh	r3, [r7, #14]
	int32_t pressure = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	60bb      	str	r3, [r7, #8]

    result_lps.temp = 0.0;
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
    result_lps.pressure = 0.0;
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800958e:	2364      	movs	r3, #100	@ 0x64
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	2302      	movs	r3, #2
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	f107 030e 	add.w	r3, r7, #14
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2301      	movs	r3, #1
 800959e:	22ab      	movs	r2, #171	@ 0xab
 80095a0:	21ba      	movs	r1, #186	@ 0xba
 80095a2:	4825      	ldr	r0, [pc, #148]	@ (8009638 <lps_read_val+0xc4>)
 80095a4:	f7fa fb94 	bl	8003cd0 <HAL_I2C_Mem_Read>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <lps_read_val+0x3e>
        Error_Handler();
 80095ae:	f7f8 fccd 	bl	8001f4c <Error_Handler>
    if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80095b2:	2364      	movs	r3, #100	@ 0x64
 80095b4:	9302      	str	r3, [sp, #8]
 80095b6:	2303      	movs	r3, #3
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	2301      	movs	r3, #1
 80095c2:	22a8      	movs	r2, #168	@ 0xa8
 80095c4:	21ba      	movs	r1, #186	@ 0xba
 80095c6:	481c      	ldr	r0, [pc, #112]	@ (8009638 <lps_read_val+0xc4>)
 80095c8:	f7fa fb82 	bl	8003cd0 <HAL_I2C_Mem_Read>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <lps_read_val+0x62>
         Error_Handler();
 80095d2:	f7f8 fcbb 	bl	8001f4c <Error_Handler>

    result_lps.temp =  (float)(42.5f + temp / 480.0f);
 80095d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095e2:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800963c <lps_read_val+0xc8>
 80095e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095ea:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8009640 <lps_read_val+0xcc>
 80095ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095f2:	edc7 7a04 	vstr	s15, [r7, #16]
    result_lps.pressure =  (float)(pressure / 4096.0f);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	ee07 3a90 	vmov	s15, r3
 80095fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009600:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8009644 <lps_read_val+0xd0>
 8009604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009608:	edc7 7a05 	vstr	s15, [r7, #20]


    return result_lps;
 800960c:	f107 0318 	add.w	r3, r7, #24
 8009610:	f107 0210 	add.w	r2, r7, #16
 8009614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009618:	e883 0003 	stmia.w	r3, {r0, r1}
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	ee07 2a10 	vmov	s14, r2
 8009624:	ee07 3a90 	vmov	s15, r3
}
 8009628:	eeb0 0a47 	vmov.f32	s0, s14
 800962c:	eef0 0a67 	vmov.f32	s1, s15
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	240003b0 	.word	0x240003b0
 800963c:	43f00000 	.word	0x43f00000
 8009640:	422a0000 	.word	0x422a0000
 8009644:	45800000 	.word	0x45800000

08009648 <LPS22HH_Init>:

void LPS22HH_Init(void) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	  printf("Searching...\r\n");
 800964e:	480e      	ldr	r0, [pc, #56]	@ (8009688 <LPS22HH_Init+0x40>)
 8009650:	f001 f844 	bl	800a6dc <puts>
	   uint8_t who_am_i = lps_read_reg(LPS25HB_WHO_AM_I);
 8009654:	200f      	movs	r0, #15
 8009656:	f7ff ff4f 	bl	80094f8 <lps_read_reg>
 800965a:	4603      	mov	r3, r0
 800965c:	71fb      	strb	r3, [r7, #7]
	   if (who_am_i == LPS_PART_ID) {
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	2bbd      	cmp	r3, #189	@ 0xbd
 8009662:	d107      	bne.n	8009674 <LPS22HH_Init+0x2c>
	    printf("Found: LPS\r\n");
 8009664:	4809      	ldr	r0, [pc, #36]	@ (800968c <LPS22HH_Init+0x44>)
 8009666:	f001 f839 	bl	800a6dc <puts>

	    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 800966a:	21c0      	movs	r1, #192	@ 0xc0
 800966c:	2020      	movs	r0, #32
 800966e:	f7ff ff63 	bl	8009538 <lps_write_reg>
			//lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);

	   } else {
	    printf("Error: (0x%02X)\r\n", who_am_i);
	   }
}
 8009672:	e004      	b.n	800967e <LPS22HH_Init+0x36>
	    printf("Error: (0x%02X)\r\n", who_am_i);
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	4619      	mov	r1, r3
 8009678:	4805      	ldr	r0, [pc, #20]	@ (8009690 <LPS22HH_Init+0x48>)
 800967a:	f000 ffc7 	bl	800a60c <iprintf>
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	0800e844 	.word	0x0800e844
 800968c:	0800e854 	.word	0x0800e854
 8009690:	0800e860 	.word	0x0800e860

08009694 <apply_moving_average>:
 * @param index Wskaźnik na aktualny indeks w tablicy.
 * @param size Rozmiar tablicy (FILTER_SIZE).
 * @param new_value Nowa wartość ciśnienia do dodania.
 * @return Średnia ruchoma z wartości w tablicy.
 */
float apply_moving_average(float *values, int *index, int size, float new_value) {
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	ed87 0a00 	vstr	s0, [r7]
    values[*index] = new_value;          // Dodanie nowej wartości do tablicy
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	601a      	str	r2, [r3, #0]
    *index = (*index + 1) % size;        // Przesunięcie indeksu z zawijaniem
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	fb01 f202 	mul.w	r2, r1, r2
 80096c4:	1a9a      	subs	r2, r3, r2
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	601a      	str	r2, [r3, #0]

    float sum = 0.0f;
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {     // Obliczenie sumy elementów w tablicy
 80096d0:	2300      	movs	r3, #0
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	e00e      	b.n	80096f4 <apply_moving_average+0x60>
        sum += values[i];
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	edd3 7a00 	vldr	s15, [r3]
 80096e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80096e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096ea:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < size; i++) {     // Obliczenie sumy elementów w tablicy
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3301      	adds	r3, #1
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	dbec      	blt.n	80096d6 <apply_moving_average+0x42>
    }
    return sum / size;                   // Zwrot średniej
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009706:	ed97 7a05 	vldr	s14, [r7, #20]
 800970a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800970e:	eef0 7a66 	vmov.f32	s15, s13
}
 8009712:	eeb0 0a67 	vmov.f32	s0, s15
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <kalman_init>:

void kalman_init(KalmanFilter *kf, float initial_value, float process_variance, float measurement_variance) {
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	ed87 0a02 	vstr	s0, [r7, #8]
 800972c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009730:	ed87 1a00 	vstr	s2, [r7]
    kf->x = initial_value;   // Ustaw początkowy stan
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;            // Niepewność początkowa
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009740:	605a      	str	r2, [r3, #4]
    kf->Q = process_variance; // Wariancja procesu
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	609a      	str	r2, [r3, #8]
    kf->R = measurement_variance; // Wariancja szumu pomiaru
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	60da      	str	r2, [r3, #12]
    kf->K = 0.0f;            // Wzmocnienie Kalmana początkowe
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f04f 0200 	mov.w	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
}
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <kalman_update>:



float kalman_update(KalmanFilter *kf, float measurement) {
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	ed87 0a00 	vstr	s0, [r7]
    // Predykcja
    kf->P += kf->Q;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	ed93 7a01 	vldr	s14, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	edd3 7a02 	vldr	s15, [r3, #8]
 800977a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	edc3 7a01 	vstr	s15, [r3, #4]

    // Obliczanie wzmocnienia Kalmana
    kf->K = kf->P / (kf->P + kf->R);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	edd3 6a01 	vldr	s13, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	edd3 7a03 	vldr	s15, [r3, #12]
 8009796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800979a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	edc3 7a04 	vstr	s15, [r3, #16]

    // Aktualizacja stanu
    kf->x += kf->K * (measurement - kf->x);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	ed93 7a00 	vldr	s14, [r3]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	edd3 6a04 	vldr	s13, [r3, #16]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	edd3 7a00 	vldr	s15, [r3]
 80097b6:	ed97 6a00 	vldr	s12, [r7]
 80097ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80097be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	edc3 7a00 	vstr	s15, [r3]

    // Aktualizacja niepewności
    kf->P *= (1.0f - kf->K);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80097d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80097e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	edc3 7a01 	vstr	s15, [r3, #4]

    return kf->x;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	ee07 3a90 	vmov	s15, r3
}
 80097f2:	eeb0 0a67 	vmov.f32	s0, s15
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <__cvt>:
 8009800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009802:	ed2d 8b02 	vpush	{d8}
 8009806:	eeb0 8b40 	vmov.f64	d8, d0
 800980a:	b085      	sub	sp, #20
 800980c:	4617      	mov	r7, r2
 800980e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009810:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009812:	ee18 2a90 	vmov	r2, s17
 8009816:	f025 0520 	bic.w	r5, r5, #32
 800981a:	2a00      	cmp	r2, #0
 800981c:	bfb6      	itet	lt
 800981e:	222d      	movlt	r2, #45	@ 0x2d
 8009820:	2200      	movge	r2, #0
 8009822:	eeb1 8b40 	vneglt.f64	d8, d0
 8009826:	2d46      	cmp	r5, #70	@ 0x46
 8009828:	460c      	mov	r4, r1
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	d004      	beq.n	8009838 <__cvt+0x38>
 800982e:	2d45      	cmp	r5, #69	@ 0x45
 8009830:	d100      	bne.n	8009834 <__cvt+0x34>
 8009832:	3401      	adds	r4, #1
 8009834:	2102      	movs	r1, #2
 8009836:	e000      	b.n	800983a <__cvt+0x3a>
 8009838:	2103      	movs	r1, #3
 800983a:	ab03      	add	r3, sp, #12
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	ab02      	add	r3, sp, #8
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	4622      	mov	r2, r4
 8009844:	4633      	mov	r3, r6
 8009846:	eeb0 0b48 	vmov.f64	d0, d8
 800984a:	f001 f965 	bl	800ab18 <_dtoa_r>
 800984e:	2d47      	cmp	r5, #71	@ 0x47
 8009850:	d114      	bne.n	800987c <__cvt+0x7c>
 8009852:	07fb      	lsls	r3, r7, #31
 8009854:	d50a      	bpl.n	800986c <__cvt+0x6c>
 8009856:	1902      	adds	r2, r0, r4
 8009858:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800985c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009860:	bf08      	it	eq
 8009862:	9203      	streq	r2, [sp, #12]
 8009864:	2130      	movs	r1, #48	@ 0x30
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	4293      	cmp	r3, r2
 800986a:	d319      	bcc.n	80098a0 <__cvt+0xa0>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009870:	1a1b      	subs	r3, r3, r0
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	b005      	add	sp, #20
 8009876:	ecbd 8b02 	vpop	{d8}
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987c:	2d46      	cmp	r5, #70	@ 0x46
 800987e:	eb00 0204 	add.w	r2, r0, r4
 8009882:	d1e9      	bne.n	8009858 <__cvt+0x58>
 8009884:	7803      	ldrb	r3, [r0, #0]
 8009886:	2b30      	cmp	r3, #48	@ 0x30
 8009888:	d107      	bne.n	800989a <__cvt+0x9a>
 800988a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009892:	bf1c      	itt	ne
 8009894:	f1c4 0401 	rsbne	r4, r4, #1
 8009898:	6034      	strne	r4, [r6, #0]
 800989a:	6833      	ldr	r3, [r6, #0]
 800989c:	441a      	add	r2, r3
 800989e:	e7db      	b.n	8009858 <__cvt+0x58>
 80098a0:	1c5c      	adds	r4, r3, #1
 80098a2:	9403      	str	r4, [sp, #12]
 80098a4:	7019      	strb	r1, [r3, #0]
 80098a6:	e7de      	b.n	8009866 <__cvt+0x66>

080098a8 <__exponent>:
 80098a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098aa:	2900      	cmp	r1, #0
 80098ac:	bfba      	itte	lt
 80098ae:	4249      	neglt	r1, r1
 80098b0:	232d      	movlt	r3, #45	@ 0x2d
 80098b2:	232b      	movge	r3, #43	@ 0x2b
 80098b4:	2909      	cmp	r1, #9
 80098b6:	7002      	strb	r2, [r0, #0]
 80098b8:	7043      	strb	r3, [r0, #1]
 80098ba:	dd29      	ble.n	8009910 <__exponent+0x68>
 80098bc:	f10d 0307 	add.w	r3, sp, #7
 80098c0:	461d      	mov	r5, r3
 80098c2:	270a      	movs	r7, #10
 80098c4:	461a      	mov	r2, r3
 80098c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80098ca:	fb07 1416 	mls	r4, r7, r6, r1
 80098ce:	3430      	adds	r4, #48	@ 0x30
 80098d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098d4:	460c      	mov	r4, r1
 80098d6:	2c63      	cmp	r4, #99	@ 0x63
 80098d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80098dc:	4631      	mov	r1, r6
 80098de:	dcf1      	bgt.n	80098c4 <__exponent+0x1c>
 80098e0:	3130      	adds	r1, #48	@ 0x30
 80098e2:	1e94      	subs	r4, r2, #2
 80098e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098e8:	1c41      	adds	r1, r0, #1
 80098ea:	4623      	mov	r3, r4
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	d30a      	bcc.n	8009906 <__exponent+0x5e>
 80098f0:	f10d 0309 	add.w	r3, sp, #9
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	42ac      	cmp	r4, r5
 80098f8:	bf88      	it	hi
 80098fa:	2300      	movhi	r3, #0
 80098fc:	3302      	adds	r3, #2
 80098fe:	4403      	add	r3, r0
 8009900:	1a18      	subs	r0, r3, r0
 8009902:	b003      	add	sp, #12
 8009904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009906:	f813 6b01 	ldrb.w	r6, [r3], #1
 800990a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800990e:	e7ed      	b.n	80098ec <__exponent+0x44>
 8009910:	2330      	movs	r3, #48	@ 0x30
 8009912:	3130      	adds	r1, #48	@ 0x30
 8009914:	7083      	strb	r3, [r0, #2]
 8009916:	70c1      	strb	r1, [r0, #3]
 8009918:	1d03      	adds	r3, r0, #4
 800991a:	e7f1      	b.n	8009900 <__exponent+0x58>
 800991c:	0000      	movs	r0, r0
	...

08009920 <_printf_float>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	b08d      	sub	sp, #52	@ 0x34
 8009926:	460c      	mov	r4, r1
 8009928:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800992c:	4616      	mov	r6, r2
 800992e:	461f      	mov	r7, r3
 8009930:	4605      	mov	r5, r0
 8009932:	f000 ffdb 	bl	800a8ec <_localeconv_r>
 8009936:	f8d0 b000 	ldr.w	fp, [r0]
 800993a:	4658      	mov	r0, fp
 800993c:	f7f6 fd20 	bl	8000380 <strlen>
 8009940:	2300      	movs	r3, #0
 8009942:	930a      	str	r3, [sp, #40]	@ 0x28
 8009944:	f8d8 3000 	ldr.w	r3, [r8]
 8009948:	f894 9018 	ldrb.w	r9, [r4, #24]
 800994c:	6822      	ldr	r2, [r4, #0]
 800994e:	9005      	str	r0, [sp, #20]
 8009950:	3307      	adds	r3, #7
 8009952:	f023 0307 	bic.w	r3, r3, #7
 8009956:	f103 0108 	add.w	r1, r3, #8
 800995a:	f8c8 1000 	str.w	r1, [r8]
 800995e:	ed93 0b00 	vldr	d0, [r3]
 8009962:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009bc0 <_printf_float+0x2a0>
 8009966:	eeb0 7bc0 	vabs.f64	d7, d0
 800996a:	eeb4 7b46 	vcmp.f64	d7, d6
 800996e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009972:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009976:	dd24      	ble.n	80099c2 <_printf_float+0xa2>
 8009978:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	d502      	bpl.n	8009988 <_printf_float+0x68>
 8009982:	232d      	movs	r3, #45	@ 0x2d
 8009984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009988:	498f      	ldr	r1, [pc, #572]	@ (8009bc8 <_printf_float+0x2a8>)
 800998a:	4b90      	ldr	r3, [pc, #576]	@ (8009bcc <_printf_float+0x2ac>)
 800998c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009990:	bf94      	ite	ls
 8009992:	4688      	movls	r8, r1
 8009994:	4698      	movhi	r8, r3
 8009996:	f022 0204 	bic.w	r2, r2, #4
 800999a:	2303      	movs	r3, #3
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	f04f 0a00 	mov.w	sl, #0
 80099a4:	9700      	str	r7, [sp, #0]
 80099a6:	4633      	mov	r3, r6
 80099a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f000 f9d1 	bl	8009d54 <_printf_common>
 80099b2:	3001      	adds	r0, #1
 80099b4:	f040 8089 	bne.w	8009aca <_printf_float+0x1aa>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	b00d      	add	sp, #52	@ 0x34
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	d709      	bvc.n	80099e0 <_printf_float+0xc0>
 80099cc:	ee10 3a90 	vmov	r3, s1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfbc      	itt	lt
 80099d4:	232d      	movlt	r3, #45	@ 0x2d
 80099d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099da:	497d      	ldr	r1, [pc, #500]	@ (8009bd0 <_printf_float+0x2b0>)
 80099dc:	4b7d      	ldr	r3, [pc, #500]	@ (8009bd4 <_printf_float+0x2b4>)
 80099de:	e7d5      	b.n	800998c <_printf_float+0x6c>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	1c59      	adds	r1, r3, #1
 80099e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80099e8:	d139      	bne.n	8009a5e <_printf_float+0x13e>
 80099ea:	2306      	movs	r3, #6
 80099ec:	6063      	str	r3, [r4, #4]
 80099ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099f2:	2300      	movs	r3, #0
 80099f4:	6022      	str	r2, [r4, #0]
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80099fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80099fe:	ab09      	add	r3, sp, #36	@ 0x24
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	6861      	ldr	r1, [r4, #4]
 8009a04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff fef9 	bl	8009800 <__cvt>
 8009a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a14:	4680      	mov	r8, r0
 8009a16:	d129      	bne.n	8009a6c <_printf_float+0x14c>
 8009a18:	1cc8      	adds	r0, r1, #3
 8009a1a:	db02      	blt.n	8009a22 <_printf_float+0x102>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	4299      	cmp	r1, r3
 8009a20:	dd41      	ble.n	8009aa6 <_printf_float+0x186>
 8009a22:	f1a9 0902 	sub.w	r9, r9, #2
 8009a26:	fa5f f989 	uxtb.w	r9, r9
 8009a2a:	3901      	subs	r1, #1
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a32:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a34:	f7ff ff38 	bl	80098a8 <__exponent>
 8009a38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a3a:	1813      	adds	r3, r2, r0
 8009a3c:	2a01      	cmp	r2, #1
 8009a3e:	4682      	mov	sl, r0
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	dc02      	bgt.n	8009a4a <_printf_float+0x12a>
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	07d2      	lsls	r2, r2, #31
 8009a48:	d501      	bpl.n	8009a4e <_printf_float+0x12e>
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	6123      	str	r3, [r4, #16]
 8009a4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0a6      	beq.n	80099a4 <_printf_float+0x84>
 8009a56:	232d      	movs	r3, #45	@ 0x2d
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	e7a2      	b.n	80099a4 <_printf_float+0x84>
 8009a5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a62:	d1c4      	bne.n	80099ee <_printf_float+0xce>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1c2      	bne.n	80099ee <_printf_float+0xce>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7bf      	b.n	80099ec <_printf_float+0xcc>
 8009a6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009a70:	d9db      	bls.n	8009a2a <_printf_float+0x10a>
 8009a72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009a76:	d118      	bne.n	8009aaa <_printf_float+0x18a>
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	6863      	ldr	r3, [r4, #4]
 8009a7c:	dd0b      	ble.n	8009a96 <_printf_float+0x176>
 8009a7e:	6121      	str	r1, [r4, #16]
 8009a80:	b913      	cbnz	r3, 8009a88 <_printf_float+0x168>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d0      	lsls	r0, r2, #31
 8009a86:	d502      	bpl.n	8009a8e <_printf_float+0x16e>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	440b      	add	r3, r1
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a90:	f04f 0a00 	mov.w	sl, #0
 8009a94:	e7db      	b.n	8009a4e <_printf_float+0x12e>
 8009a96:	b913      	cbnz	r3, 8009a9e <_printf_float+0x17e>
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	07d2      	lsls	r2, r2, #31
 8009a9c:	d501      	bpl.n	8009aa2 <_printf_float+0x182>
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	e7f4      	b.n	8009a8c <_printf_float+0x16c>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f2      	b.n	8009a8c <_printf_float+0x16c>
 8009aa6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aac:	4299      	cmp	r1, r3
 8009aae:	db05      	blt.n	8009abc <_printf_float+0x19c>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	6121      	str	r1, [r4, #16]
 8009ab4:	07d8      	lsls	r0, r3, #31
 8009ab6:	d5ea      	bpl.n	8009a8e <_printf_float+0x16e>
 8009ab8:	1c4b      	adds	r3, r1, #1
 8009aba:	e7e7      	b.n	8009a8c <_printf_float+0x16c>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	bfd4      	ite	le
 8009ac0:	f1c1 0202 	rsble	r2, r1, #2
 8009ac4:	2201      	movgt	r2, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	e7e0      	b.n	8009a8c <_printf_float+0x16c>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	055a      	lsls	r2, r3, #21
 8009ace:	d407      	bmi.n	8009ae0 <_printf_float+0x1c0>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	d12a      	bne.n	8009b34 <_printf_float+0x214>
 8009ade:	e76b      	b.n	80099b8 <_printf_float+0x98>
 8009ae0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009ae4:	f240 80e0 	bls.w	8009ca8 <_printf_float+0x388>
 8009ae8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009aec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af4:	d133      	bne.n	8009b5e <_printf_float+0x23e>
 8009af6:	4a38      	ldr	r2, [pc, #224]	@ (8009bd8 <_printf_float+0x2b8>)
 8009af8:	2301      	movs	r3, #1
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f af59 	beq.w	80099b8 <_printf_float+0x98>
 8009b06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b0a:	4543      	cmp	r3, r8
 8009b0c:	db02      	blt.n	8009b14 <_printf_float+0x1f4>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	07d8      	lsls	r0, r3, #31
 8009b12:	d50f      	bpl.n	8009b34 <_printf_float+0x214>
 8009b14:	9b05      	ldr	r3, [sp, #20]
 8009b16:	465a      	mov	r2, fp
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f af4a 	beq.w	80099b8 <_printf_float+0x98>
 8009b24:	f04f 0900 	mov.w	r9, #0
 8009b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b2c:	f104 0a1a 	add.w	sl, r4, #26
 8009b30:	45c8      	cmp	r8, r9
 8009b32:	dc09      	bgt.n	8009b48 <_printf_float+0x228>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	079b      	lsls	r3, r3, #30
 8009b38:	f100 8107 	bmi.w	8009d4a <_printf_float+0x42a>
 8009b3c:	68e0      	ldr	r0, [r4, #12]
 8009b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b40:	4298      	cmp	r0, r3
 8009b42:	bfb8      	it	lt
 8009b44:	4618      	movlt	r0, r3
 8009b46:	e739      	b.n	80099bc <_printf_float+0x9c>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	f43f af30 	beq.w	80099b8 <_printf_float+0x98>
 8009b58:	f109 0901 	add.w	r9, r9, #1
 8009b5c:	e7e8      	b.n	8009b30 <_printf_float+0x210>
 8009b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dc3b      	bgt.n	8009bdc <_printf_float+0x2bc>
 8009b64:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd8 <_printf_float+0x2b8>)
 8009b66:	2301      	movs	r3, #1
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af22 	beq.w	80099b8 <_printf_float+0x98>
 8009b74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b78:	ea59 0303 	orrs.w	r3, r9, r3
 8009b7c:	d102      	bne.n	8009b84 <_printf_float+0x264>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	07d9      	lsls	r1, r3, #31
 8009b82:	d5d7      	bpl.n	8009b34 <_printf_float+0x214>
 8009b84:	9b05      	ldr	r3, [sp, #20]
 8009b86:	465a      	mov	r2, fp
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b8      	blx	r7
 8009b8e:	3001      	adds	r0, #1
 8009b90:	f43f af12 	beq.w	80099b8 <_printf_float+0x98>
 8009b94:	f04f 0a00 	mov.w	sl, #0
 8009b98:	f104 0b1a 	add.w	fp, r4, #26
 8009b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9e:	425b      	negs	r3, r3
 8009ba0:	4553      	cmp	r3, sl
 8009ba2:	dc01      	bgt.n	8009ba8 <_printf_float+0x288>
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	e794      	b.n	8009ad2 <_printf_float+0x1b2>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	465a      	mov	r2, fp
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f af00 	beq.w	80099b8 <_printf_float+0x98>
 8009bb8:	f10a 0a01 	add.w	sl, sl, #1
 8009bbc:	e7ee      	b.n	8009b9c <_printf_float+0x27c>
 8009bbe:	bf00      	nop
 8009bc0:	ffffffff 	.word	0xffffffff
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	0800e8ac 	.word	0x0800e8ac
 8009bcc:	0800e8b0 	.word	0x0800e8b0
 8009bd0:	0800e8b4 	.word	0x0800e8b4
 8009bd4:	0800e8b8 	.word	0x0800e8b8
 8009bd8:	0800e8bc 	.word	0x0800e8bc
 8009bdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009be2:	4553      	cmp	r3, sl
 8009be4:	bfa8      	it	ge
 8009be6:	4653      	movge	r3, sl
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	4699      	mov	r9, r3
 8009bec:	dc37      	bgt.n	8009c5e <_printf_float+0x33e>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf6:	f104 021a 	add.w	r2, r4, #26
 8009bfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bfc:	9907      	ldr	r1, [sp, #28]
 8009bfe:	9306      	str	r3, [sp, #24]
 8009c00:	eba3 0309 	sub.w	r3, r3, r9
 8009c04:	428b      	cmp	r3, r1
 8009c06:	dc31      	bgt.n	8009c6c <_printf_float+0x34c>
 8009c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0a:	459a      	cmp	sl, r3
 8009c0c:	dc3b      	bgt.n	8009c86 <_printf_float+0x366>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	07da      	lsls	r2, r3, #31
 8009c12:	d438      	bmi.n	8009c86 <_printf_float+0x366>
 8009c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c16:	ebaa 0903 	sub.w	r9, sl, r3
 8009c1a:	9b06      	ldr	r3, [sp, #24]
 8009c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c20:	4599      	cmp	r9, r3
 8009c22:	bfa8      	it	ge
 8009c24:	4699      	movge	r9, r3
 8009c26:	f1b9 0f00 	cmp.w	r9, #0
 8009c2a:	dc34      	bgt.n	8009c96 <_printf_float+0x376>
 8009c2c:	f04f 0800 	mov.w	r8, #0
 8009c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c34:	f104 0b1a 	add.w	fp, r4, #26
 8009c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c3e:	eba3 0309 	sub.w	r3, r3, r9
 8009c42:	4543      	cmp	r3, r8
 8009c44:	f77f af76 	ble.w	8009b34 <_printf_float+0x214>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	465a      	mov	r2, fp
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f aeb0 	beq.w	80099b8 <_printf_float+0x98>
 8009c58:	f108 0801 	add.w	r8, r8, #1
 8009c5c:	e7ec      	b.n	8009c38 <_printf_float+0x318>
 8009c5e:	4642      	mov	r2, r8
 8009c60:	4631      	mov	r1, r6
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1c1      	bne.n	8009bee <_printf_float+0x2ce>
 8009c6a:	e6a5      	b.n	80099b8 <_printf_float+0x98>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	9206      	str	r2, [sp, #24]
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f ae9e 	beq.w	80099b8 <_printf_float+0x98>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	9a06      	ldr	r2, [sp, #24]
 8009c80:	3301      	adds	r3, #1
 8009c82:	9307      	str	r3, [sp, #28]
 8009c84:	e7b9      	b.n	8009bfa <_printf_float+0x2da>
 8009c86:	9b05      	ldr	r3, [sp, #20]
 8009c88:	465a      	mov	r2, fp
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1bf      	bne.n	8009c14 <_printf_float+0x2f4>
 8009c94:	e690      	b.n	80099b8 <_printf_float+0x98>
 8009c96:	9a06      	ldr	r2, [sp, #24]
 8009c98:	464b      	mov	r3, r9
 8009c9a:	4442      	add	r2, r8
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d1c2      	bne.n	8009c2c <_printf_float+0x30c>
 8009ca6:	e687      	b.n	80099b8 <_printf_float+0x98>
 8009ca8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009cac:	f1b9 0f01 	cmp.w	r9, #1
 8009cb0:	dc01      	bgt.n	8009cb6 <_printf_float+0x396>
 8009cb2:	07db      	lsls	r3, r3, #31
 8009cb4:	d536      	bpl.n	8009d24 <_printf_float+0x404>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4642      	mov	r2, r8
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f ae79 	beq.w	80099b8 <_printf_float+0x98>
 8009cc6:	9b05      	ldr	r3, [sp, #20]
 8009cc8:	465a      	mov	r2, fp
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f43f ae71 	beq.w	80099b8 <_printf_float+0x98>
 8009cd6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ce6:	d018      	beq.n	8009d1a <_printf_float+0x3fa>
 8009ce8:	464b      	mov	r3, r9
 8009cea:	f108 0201 	add.w	r2, r8, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d10c      	bne.n	8009d12 <_printf_float+0x3f2>
 8009cf8:	e65e      	b.n	80099b8 <_printf_float+0x98>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	465a      	mov	r2, fp
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	f43f ae57 	beq.w	80099b8 <_printf_float+0x98>
 8009d0a:	f108 0801 	add.w	r8, r8, #1
 8009d0e:	45c8      	cmp	r8, r9
 8009d10:	dbf3      	blt.n	8009cfa <_printf_float+0x3da>
 8009d12:	4653      	mov	r3, sl
 8009d14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d18:	e6dc      	b.n	8009ad4 <_printf_float+0x1b4>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 0b1a 	add.w	fp, r4, #26
 8009d22:	e7f4      	b.n	8009d0e <_printf_float+0x3ee>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4642      	mov	r2, r8
 8009d28:	e7e1      	b.n	8009cee <_printf_float+0x3ce>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae3f 	beq.w	80099b8 <_printf_float+0x98>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dcf0      	bgt.n	8009d2a <_printf_float+0x40a>
 8009d48:	e6f8      	b.n	8009b3c <_printf_float+0x21c>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0919 	add.w	r9, r4, #25
 8009d52:	e7f4      	b.n	8009d3e <_printf_float+0x41e>

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bfb8      	it	lt
 8009d68:	4613      	movlt	r3, r2
 8009d6a:	6033      	str	r3, [r6, #0]
 8009d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d70:	4607      	mov	r7, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc26      	bgt.n	8009dea <_printf_common+0x96>
 8009d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	3b00      	subs	r3, #0
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d42b      	bmi.n	8009e04 <_printf_common+0xb0>
 8009dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009db0:	4641      	mov	r1, r8
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c8      	blx	r9
 8009db6:	3001      	adds	r0, #1
 8009db8:	d01e      	beq.n	8009df8 <_printf_common+0xa4>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	6922      	ldr	r2, [r4, #16]
 8009dbe:	f003 0306 	and.w	r3, r3, #6
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	bf02      	ittt	eq
 8009dc6:	68e5      	ldreq	r5, [r4, #12]
 8009dc8:	6833      	ldreq	r3, [r6, #0]
 8009dca:	1aed      	subeq	r5, r5, r3
 8009dcc:	68a3      	ldr	r3, [r4, #8]
 8009dce:	bf0c      	ite	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	bfc4      	itt	gt
 8009dda:	1a9b      	subgt	r3, r3, r2
 8009ddc:	18ed      	addgt	r5, r5, r3
 8009dde:	2600      	movs	r6, #0
 8009de0:	341a      	adds	r4, #26
 8009de2:	42b5      	cmp	r5, r6
 8009de4:	d11a      	bne.n	8009e1c <_printf_common+0xc8>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e008      	b.n	8009dfc <_printf_common+0xa8>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4641      	mov	r1, r8
 8009df0:	4638      	mov	r0, r7
 8009df2:	47c8      	blx	r9
 8009df4:	3001      	adds	r0, #1
 8009df6:	d103      	bne.n	8009e00 <_printf_common+0xac>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e00:	3501      	adds	r5, #1
 8009e02:	e7c6      	b.n	8009d92 <_printf_common+0x3e>
 8009e04:	18e1      	adds	r1, r4, r3
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	2030      	movs	r0, #48	@ 0x30
 8009e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e0e:	4422      	add	r2, r4
 8009e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e18:	3302      	adds	r3, #2
 8009e1a:	e7c7      	b.n	8009dac <_printf_common+0x58>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4641      	mov	r1, r8
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c8      	blx	r9
 8009e26:	3001      	adds	r0, #1
 8009e28:	d0e6      	beq.n	8009df8 <_printf_common+0xa4>
 8009e2a:	3601      	adds	r6, #1
 8009e2c:	e7d9      	b.n	8009de2 <_printf_common+0x8e>
	...

08009e30 <_printf_i>:
 8009e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	7e0f      	ldrb	r7, [r1, #24]
 8009e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e38:	2f78      	cmp	r7, #120	@ 0x78
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	469a      	mov	sl, r3
 8009e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e46:	d807      	bhi.n	8009e58 <_printf_i+0x28>
 8009e48:	2f62      	cmp	r7, #98	@ 0x62
 8009e4a:	d80a      	bhi.n	8009e62 <_printf_i+0x32>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	f000 80d2 	beq.w	8009ff6 <_printf_i+0x1c6>
 8009e52:	2f58      	cmp	r7, #88	@ 0x58
 8009e54:	f000 80b9 	beq.w	8009fca <_printf_i+0x19a>
 8009e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e60:	e03a      	b.n	8009ed8 <_printf_i+0xa8>
 8009e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e66:	2b15      	cmp	r3, #21
 8009e68:	d8f6      	bhi.n	8009e58 <_printf_i+0x28>
 8009e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e70 <_printf_i+0x40>)
 8009e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009e59 	.word	0x08009e59
 8009e7c:	08009e59 	.word	0x08009e59
 8009e80:	08009e59 	.word	0x08009e59
 8009e84:	08009e59 	.word	0x08009e59
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009e59 	.word	0x08009e59
 8009e90:	08009e59 	.word	0x08009e59
 8009e94:	08009e59 	.word	0x08009e59
 8009e98:	08009e59 	.word	0x08009e59
 8009e9c:	08009fdd 	.word	0x08009fdd
 8009ea0:	08009f07 	.word	0x08009f07
 8009ea4:	08009f97 	.word	0x08009f97
 8009ea8:	08009e59 	.word	0x08009e59
 8009eac:	08009e59 	.word	0x08009e59
 8009eb0:	08009fff 	.word	0x08009fff
 8009eb4:	08009e59 	.word	0x08009e59
 8009eb8:	08009f07 	.word	0x08009f07
 8009ebc:	08009e59 	.word	0x08009e59
 8009ec0:	08009e59 	.word	0x08009e59
 8009ec4:	08009f9f 	.word	0x08009f9f
 8009ec8:	6833      	ldr	r3, [r6, #0]
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6032      	str	r2, [r6, #0]
 8009ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e09d      	b.n	800a018 <_printf_i+0x1e8>
 8009edc:	6833      	ldr	r3, [r6, #0]
 8009ede:	6820      	ldr	r0, [r4, #0]
 8009ee0:	1d19      	adds	r1, r3, #4
 8009ee2:	6031      	str	r1, [r6, #0]
 8009ee4:	0606      	lsls	r6, r0, #24
 8009ee6:	d501      	bpl.n	8009eec <_printf_i+0xbc>
 8009ee8:	681d      	ldr	r5, [r3, #0]
 8009eea:	e003      	b.n	8009ef4 <_printf_i+0xc4>
 8009eec:	0645      	lsls	r5, r0, #25
 8009eee:	d5fb      	bpl.n	8009ee8 <_printf_i+0xb8>
 8009ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	da03      	bge.n	8009f00 <_printf_i+0xd0>
 8009ef8:	232d      	movs	r3, #45	@ 0x2d
 8009efa:	426d      	negs	r5, r5
 8009efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f00:	4859      	ldr	r0, [pc, #356]	@ (800a068 <_printf_i+0x238>)
 8009f02:	230a      	movs	r3, #10
 8009f04:	e011      	b.n	8009f2a <_printf_i+0xfa>
 8009f06:	6821      	ldr	r1, [r4, #0]
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	0608      	lsls	r0, r1, #24
 8009f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f10:	d402      	bmi.n	8009f18 <_printf_i+0xe8>
 8009f12:	0649      	lsls	r1, r1, #25
 8009f14:	bf48      	it	mi
 8009f16:	b2ad      	uxthmi	r5, r5
 8009f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f1a:	4853      	ldr	r0, [pc, #332]	@ (800a068 <_printf_i+0x238>)
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	bf14      	ite	ne
 8009f20:	230a      	movne	r3, #10
 8009f22:	2308      	moveq	r3, #8
 8009f24:	2100      	movs	r1, #0
 8009f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f2a:	6866      	ldr	r6, [r4, #4]
 8009f2c:	60a6      	str	r6, [r4, #8]
 8009f2e:	2e00      	cmp	r6, #0
 8009f30:	bfa2      	ittt	ge
 8009f32:	6821      	ldrge	r1, [r4, #0]
 8009f34:	f021 0104 	bicge.w	r1, r1, #4
 8009f38:	6021      	strge	r1, [r4, #0]
 8009f3a:	b90d      	cbnz	r5, 8009f40 <_printf_i+0x110>
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	d04b      	beq.n	8009fd8 <_printf_i+0x1a8>
 8009f40:	4616      	mov	r6, r2
 8009f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f46:	fb03 5711 	mls	r7, r3, r1, r5
 8009f4a:	5dc7      	ldrb	r7, [r0, r7]
 8009f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f50:	462f      	mov	r7, r5
 8009f52:	42bb      	cmp	r3, r7
 8009f54:	460d      	mov	r5, r1
 8009f56:	d9f4      	bls.n	8009f42 <_printf_i+0x112>
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d10b      	bne.n	8009f74 <_printf_i+0x144>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07df      	lsls	r7, r3, #31
 8009f60:	d508      	bpl.n	8009f74 <_printf_i+0x144>
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6861      	ldr	r1, [r4, #4]
 8009f66:	4299      	cmp	r1, r3
 8009f68:	bfde      	ittt	le
 8009f6a:	2330      	movle	r3, #48	@ 0x30
 8009f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f74:	1b92      	subs	r2, r2, r6
 8009f76:	6122      	str	r2, [r4, #16]
 8009f78:	f8cd a000 	str.w	sl, [sp]
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	aa03      	add	r2, sp, #12
 8009f80:	4621      	mov	r1, r4
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7ff fee6 	bl	8009d54 <_printf_common>
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d14a      	bne.n	800a022 <_printf_i+0x1f2>
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	b004      	add	sp, #16
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	f043 0320 	orr.w	r3, r3, #32
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	4833      	ldr	r0, [pc, #204]	@ (800a06c <_printf_i+0x23c>)
 8009fa0:	2778      	movs	r7, #120	@ 0x78
 8009fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6831      	ldr	r1, [r6, #0]
 8009faa:	061f      	lsls	r7, r3, #24
 8009fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fb0:	d402      	bmi.n	8009fb8 <_printf_i+0x188>
 8009fb2:	065f      	lsls	r7, r3, #25
 8009fb4:	bf48      	it	mi
 8009fb6:	b2ad      	uxthmi	r5, r5
 8009fb8:	6031      	str	r1, [r6, #0]
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	bf44      	itt	mi
 8009fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc2:	6023      	strmi	r3, [r4, #0]
 8009fc4:	b11d      	cbz	r5, 8009fce <_printf_i+0x19e>
 8009fc6:	2310      	movs	r3, #16
 8009fc8:	e7ac      	b.n	8009f24 <_printf_i+0xf4>
 8009fca:	4827      	ldr	r0, [pc, #156]	@ (800a068 <_printf_i+0x238>)
 8009fcc:	e7e9      	b.n	8009fa2 <_printf_i+0x172>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	f023 0320 	bic.w	r3, r3, #32
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	e7f6      	b.n	8009fc6 <_printf_i+0x196>
 8009fd8:	4616      	mov	r6, r2
 8009fda:	e7bd      	b.n	8009f58 <_printf_i+0x128>
 8009fdc:	6833      	ldr	r3, [r6, #0]
 8009fde:	6825      	ldr	r5, [r4, #0]
 8009fe0:	6961      	ldr	r1, [r4, #20]
 8009fe2:	1d18      	adds	r0, r3, #4
 8009fe4:	6030      	str	r0, [r6, #0]
 8009fe6:	062e      	lsls	r6, r5, #24
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	d501      	bpl.n	8009ff0 <_printf_i+0x1c0>
 8009fec:	6019      	str	r1, [r3, #0]
 8009fee:	e002      	b.n	8009ff6 <_printf_i+0x1c6>
 8009ff0:	0668      	lsls	r0, r5, #25
 8009ff2:	d5fb      	bpl.n	8009fec <_printf_i+0x1bc>
 8009ff4:	8019      	strh	r1, [r3, #0]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	4616      	mov	r6, r2
 8009ffc:	e7bc      	b.n	8009f78 <_printf_i+0x148>
 8009ffe:	6833      	ldr	r3, [r6, #0]
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	6032      	str	r2, [r6, #0]
 800a004:	681e      	ldr	r6, [r3, #0]
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	2100      	movs	r1, #0
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 f968 	bl	80002e0 <memchr>
 800a010:	b108      	cbz	r0, 800a016 <_printf_i+0x1e6>
 800a012:	1b80      	subs	r0, r0, r6
 800a014:	6060      	str	r0, [r4, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	2300      	movs	r3, #0
 800a01c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a020:	e7aa      	b.n	8009f78 <_printf_i+0x148>
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	4632      	mov	r2, r6
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d0ad      	beq.n	8009f8c <_printf_i+0x15c>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	079b      	lsls	r3, r3, #30
 800a034:	d413      	bmi.n	800a05e <_printf_i+0x22e>
 800a036:	68e0      	ldr	r0, [r4, #12]
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	4298      	cmp	r0, r3
 800a03c:	bfb8      	it	lt
 800a03e:	4618      	movlt	r0, r3
 800a040:	e7a6      	b.n	8009f90 <_printf_i+0x160>
 800a042:	2301      	movs	r3, #1
 800a044:	4632      	mov	r2, r6
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	47d0      	blx	sl
 800a04c:	3001      	adds	r0, #1
 800a04e:	d09d      	beq.n	8009f8c <_printf_i+0x15c>
 800a050:	3501      	adds	r5, #1
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	9903      	ldr	r1, [sp, #12]
 800a056:	1a5b      	subs	r3, r3, r1
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dcf2      	bgt.n	800a042 <_printf_i+0x212>
 800a05c:	e7eb      	b.n	800a036 <_printf_i+0x206>
 800a05e:	2500      	movs	r5, #0
 800a060:	f104 0619 	add.w	r6, r4, #25
 800a064:	e7f5      	b.n	800a052 <_printf_i+0x222>
 800a066:	bf00      	nop
 800a068:	0800e8be 	.word	0x0800e8be
 800a06c:	0800e8cf 	.word	0x0800e8cf

0800a070 <_scanf_float>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	b087      	sub	sp, #28
 800a076:	4617      	mov	r7, r2
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	688b      	ldr	r3, [r1, #8]
 800a07c:	1e5a      	subs	r2, r3, #1
 800a07e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a082:	bf81      	itttt	hi
 800a084:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a088:	eb03 0b05 	addhi.w	fp, r3, r5
 800a08c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a090:	608b      	strhi	r3, [r1, #8]
 800a092:	680b      	ldr	r3, [r1, #0]
 800a094:	460a      	mov	r2, r1
 800a096:	f04f 0500 	mov.w	r5, #0
 800a09a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a09e:	f842 3b1c 	str.w	r3, [r2], #28
 800a0a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	bf98      	it	ls
 800a0ac:	f04f 0b00 	movls.w	fp, #0
 800a0b0:	9201      	str	r2, [sp, #4]
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	46aa      	mov	sl, r5
 800a0b6:	46a9      	mov	r9, r5
 800a0b8:	9502      	str	r5, [sp, #8]
 800a0ba:	68a2      	ldr	r2, [r4, #8]
 800a0bc:	b152      	cbz	r2, 800a0d4 <_scanf_float+0x64>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0c4:	d864      	bhi.n	800a190 <_scanf_float+0x120>
 800a0c6:	2b40      	cmp	r3, #64	@ 0x40
 800a0c8:	d83c      	bhi.n	800a144 <_scanf_float+0xd4>
 800a0ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a0ce:	b2c8      	uxtb	r0, r1
 800a0d0:	280e      	cmp	r0, #14
 800a0d2:	d93a      	bls.n	800a14a <_scanf_float+0xda>
 800a0d4:	f1b9 0f00 	cmp.w	r9, #0
 800a0d8:	d003      	beq.n	800a0e2 <_scanf_float+0x72>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ea:	f200 8117 	bhi.w	800a31c <_scanf_float+0x2ac>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	429e      	cmp	r6, r3
 800a0f2:	f200 8108 	bhi.w	800a306 <_scanf_float+0x296>
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	b007      	add	sp, #28
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a102:	2a0d      	cmp	r2, #13
 800a104:	d8e6      	bhi.n	800a0d4 <_scanf_float+0x64>
 800a106:	a101      	add	r1, pc, #4	@ (adr r1, 800a10c <_scanf_float+0x9c>)
 800a108:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a10c:	0800a253 	.word	0x0800a253
 800a110:	0800a0d5 	.word	0x0800a0d5
 800a114:	0800a0d5 	.word	0x0800a0d5
 800a118:	0800a0d5 	.word	0x0800a0d5
 800a11c:	0800a2b3 	.word	0x0800a2b3
 800a120:	0800a28b 	.word	0x0800a28b
 800a124:	0800a0d5 	.word	0x0800a0d5
 800a128:	0800a0d5 	.word	0x0800a0d5
 800a12c:	0800a261 	.word	0x0800a261
 800a130:	0800a0d5 	.word	0x0800a0d5
 800a134:	0800a0d5 	.word	0x0800a0d5
 800a138:	0800a0d5 	.word	0x0800a0d5
 800a13c:	0800a0d5 	.word	0x0800a0d5
 800a140:	0800a219 	.word	0x0800a219
 800a144:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a148:	e7db      	b.n	800a102 <_scanf_float+0x92>
 800a14a:	290e      	cmp	r1, #14
 800a14c:	d8c2      	bhi.n	800a0d4 <_scanf_float+0x64>
 800a14e:	a001      	add	r0, pc, #4	@ (adr r0, 800a154 <_scanf_float+0xe4>)
 800a150:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a154:	0800a209 	.word	0x0800a209
 800a158:	0800a0d5 	.word	0x0800a0d5
 800a15c:	0800a209 	.word	0x0800a209
 800a160:	0800a29f 	.word	0x0800a29f
 800a164:	0800a0d5 	.word	0x0800a0d5
 800a168:	0800a1b1 	.word	0x0800a1b1
 800a16c:	0800a1ef 	.word	0x0800a1ef
 800a170:	0800a1ef 	.word	0x0800a1ef
 800a174:	0800a1ef 	.word	0x0800a1ef
 800a178:	0800a1ef 	.word	0x0800a1ef
 800a17c:	0800a1ef 	.word	0x0800a1ef
 800a180:	0800a1ef 	.word	0x0800a1ef
 800a184:	0800a1ef 	.word	0x0800a1ef
 800a188:	0800a1ef 	.word	0x0800a1ef
 800a18c:	0800a1ef 	.word	0x0800a1ef
 800a190:	2b6e      	cmp	r3, #110	@ 0x6e
 800a192:	d809      	bhi.n	800a1a8 <_scanf_float+0x138>
 800a194:	2b60      	cmp	r3, #96	@ 0x60
 800a196:	d8b2      	bhi.n	800a0fe <_scanf_float+0x8e>
 800a198:	2b54      	cmp	r3, #84	@ 0x54
 800a19a:	d07b      	beq.n	800a294 <_scanf_float+0x224>
 800a19c:	2b59      	cmp	r3, #89	@ 0x59
 800a19e:	d199      	bne.n	800a0d4 <_scanf_float+0x64>
 800a1a0:	2d07      	cmp	r5, #7
 800a1a2:	d197      	bne.n	800a0d4 <_scanf_float+0x64>
 800a1a4:	2508      	movs	r5, #8
 800a1a6:	e02c      	b.n	800a202 <_scanf_float+0x192>
 800a1a8:	2b74      	cmp	r3, #116	@ 0x74
 800a1aa:	d073      	beq.n	800a294 <_scanf_float+0x224>
 800a1ac:	2b79      	cmp	r3, #121	@ 0x79
 800a1ae:	e7f6      	b.n	800a19e <_scanf_float+0x12e>
 800a1b0:	6821      	ldr	r1, [r4, #0]
 800a1b2:	05c8      	lsls	r0, r1, #23
 800a1b4:	d51b      	bpl.n	800a1ee <_scanf_float+0x17e>
 800a1b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a1ba:	6021      	str	r1, [r4, #0]
 800a1bc:	f109 0901 	add.w	r9, r9, #1
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	d003      	beq.n	800a1ce <_scanf_float+0x15e>
 800a1c6:	3201      	adds	r2, #1
 800a1c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1cc:	60a2      	str	r2, [r4, #8]
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	60a3      	str	r3, [r4, #8]
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	607b      	str	r3, [r7, #4]
 800a1e2:	f340 8087 	ble.w	800a2f4 <_scanf_float+0x284>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	e765      	b.n	800a0ba <_scanf_float+0x4a>
 800a1ee:	eb1a 0105 	adds.w	r1, sl, r5
 800a1f2:	f47f af6f 	bne.w	800a0d4 <_scanf_float+0x64>
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	460d      	mov	r5, r1
 800a200:	468a      	mov	sl, r1
 800a202:	f806 3b01 	strb.w	r3, [r6], #1
 800a206:	e7e2      	b.n	800a1ce <_scanf_float+0x15e>
 800a208:	6822      	ldr	r2, [r4, #0]
 800a20a:	0610      	lsls	r0, r2, #24
 800a20c:	f57f af62 	bpl.w	800a0d4 <_scanf_float+0x64>
 800a210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	e7f4      	b.n	800a202 <_scanf_float+0x192>
 800a218:	f1ba 0f00 	cmp.w	sl, #0
 800a21c:	d10e      	bne.n	800a23c <_scanf_float+0x1cc>
 800a21e:	f1b9 0f00 	cmp.w	r9, #0
 800a222:	d10e      	bne.n	800a242 <_scanf_float+0x1d2>
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a22a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a22e:	d108      	bne.n	800a242 <_scanf_float+0x1d2>
 800a230:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a234:	6022      	str	r2, [r4, #0]
 800a236:	f04f 0a01 	mov.w	sl, #1
 800a23a:	e7e2      	b.n	800a202 <_scanf_float+0x192>
 800a23c:	f1ba 0f02 	cmp.w	sl, #2
 800a240:	d055      	beq.n	800a2ee <_scanf_float+0x27e>
 800a242:	2d01      	cmp	r5, #1
 800a244:	d002      	beq.n	800a24c <_scanf_float+0x1dc>
 800a246:	2d04      	cmp	r5, #4
 800a248:	f47f af44 	bne.w	800a0d4 <_scanf_float+0x64>
 800a24c:	3501      	adds	r5, #1
 800a24e:	b2ed      	uxtb	r5, r5
 800a250:	e7d7      	b.n	800a202 <_scanf_float+0x192>
 800a252:	f1ba 0f01 	cmp.w	sl, #1
 800a256:	f47f af3d 	bne.w	800a0d4 <_scanf_float+0x64>
 800a25a:	f04f 0a02 	mov.w	sl, #2
 800a25e:	e7d0      	b.n	800a202 <_scanf_float+0x192>
 800a260:	b97d      	cbnz	r5, 800a282 <_scanf_float+0x212>
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	f47f af38 	bne.w	800a0da <_scanf_float+0x6a>
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a270:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a274:	f040 8101 	bne.w	800a47a <_scanf_float+0x40a>
 800a278:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a27c:	6022      	str	r2, [r4, #0]
 800a27e:	2501      	movs	r5, #1
 800a280:	e7bf      	b.n	800a202 <_scanf_float+0x192>
 800a282:	2d03      	cmp	r5, #3
 800a284:	d0e2      	beq.n	800a24c <_scanf_float+0x1dc>
 800a286:	2d05      	cmp	r5, #5
 800a288:	e7de      	b.n	800a248 <_scanf_float+0x1d8>
 800a28a:	2d02      	cmp	r5, #2
 800a28c:	f47f af22 	bne.w	800a0d4 <_scanf_float+0x64>
 800a290:	2503      	movs	r5, #3
 800a292:	e7b6      	b.n	800a202 <_scanf_float+0x192>
 800a294:	2d06      	cmp	r5, #6
 800a296:	f47f af1d 	bne.w	800a0d4 <_scanf_float+0x64>
 800a29a:	2507      	movs	r5, #7
 800a29c:	e7b1      	b.n	800a202 <_scanf_float+0x192>
 800a29e:	6822      	ldr	r2, [r4, #0]
 800a2a0:	0591      	lsls	r1, r2, #22
 800a2a2:	f57f af17 	bpl.w	800a0d4 <_scanf_float+0x64>
 800a2a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2b0:	e7a7      	b.n	800a202 <_scanf_float+0x192>
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a2b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a2bc:	d006      	beq.n	800a2cc <_scanf_float+0x25c>
 800a2be:	0550      	lsls	r0, r2, #21
 800a2c0:	f57f af08 	bpl.w	800a0d4 <_scanf_float+0x64>
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	f000 80d7 	beq.w	800a47a <_scanf_float+0x40a>
 800a2cc:	0591      	lsls	r1, r2, #22
 800a2ce:	bf58      	it	pl
 800a2d0:	9902      	ldrpl	r1, [sp, #8]
 800a2d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2d6:	bf58      	it	pl
 800a2d8:	eba9 0101 	subpl.w	r1, r9, r1
 800a2dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a2e0:	bf58      	it	pl
 800a2e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	f04f 0900 	mov.w	r9, #0
 800a2ec:	e789      	b.n	800a202 <_scanf_float+0x192>
 800a2ee:	f04f 0a03 	mov.w	sl, #3
 800a2f2:	e786      	b.n	800a202 <_scanf_float+0x192>
 800a2f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4798      	blx	r3
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f aedb 	beq.w	800a0ba <_scanf_float+0x4a>
 800a304:	e6e6      	b.n	800a0d4 <_scanf_float+0x64>
 800a306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a30e:	463a      	mov	r2, r7
 800a310:	4640      	mov	r0, r8
 800a312:	4798      	blx	r3
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	3b01      	subs	r3, #1
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	e6e8      	b.n	800a0ee <_scanf_float+0x7e>
 800a31c:	1e6b      	subs	r3, r5, #1
 800a31e:	2b06      	cmp	r3, #6
 800a320:	d824      	bhi.n	800a36c <_scanf_float+0x2fc>
 800a322:	2d02      	cmp	r5, #2
 800a324:	d836      	bhi.n	800a394 <_scanf_float+0x324>
 800a326:	9b01      	ldr	r3, [sp, #4]
 800a328:	429e      	cmp	r6, r3
 800a32a:	f67f aee4 	bls.w	800a0f6 <_scanf_float+0x86>
 800a32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a336:	463a      	mov	r2, r7
 800a338:	4640      	mov	r0, r8
 800a33a:	4798      	blx	r3
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	3b01      	subs	r3, #1
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	e7f0      	b.n	800a326 <_scanf_float+0x2b6>
 800a344:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a348:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a34c:	463a      	mov	r2, r7
 800a34e:	4640      	mov	r0, r8
 800a350:	4798      	blx	r3
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a35c:	fa5f fa8a 	uxtb.w	sl, sl
 800a360:	f1ba 0f02 	cmp.w	sl, #2
 800a364:	d1ee      	bne.n	800a344 <_scanf_float+0x2d4>
 800a366:	3d03      	subs	r5, #3
 800a368:	b2ed      	uxtb	r5, r5
 800a36a:	1b76      	subs	r6, r6, r5
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	05da      	lsls	r2, r3, #23
 800a370:	d530      	bpl.n	800a3d4 <_scanf_float+0x364>
 800a372:	055b      	lsls	r3, r3, #21
 800a374:	d511      	bpl.n	800a39a <_scanf_float+0x32a>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	429e      	cmp	r6, r3
 800a37a:	f67f aebc 	bls.w	800a0f6 <_scanf_float+0x86>
 800a37e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a386:	463a      	mov	r2, r7
 800a388:	4640      	mov	r0, r8
 800a38a:	4798      	blx	r3
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	3b01      	subs	r3, #1
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	e7f0      	b.n	800a376 <_scanf_float+0x306>
 800a394:	46aa      	mov	sl, r5
 800a396:	46b3      	mov	fp, r6
 800a398:	e7de      	b.n	800a358 <_scanf_float+0x2e8>
 800a39a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a39e:	6923      	ldr	r3, [r4, #16]
 800a3a0:	2965      	cmp	r1, #101	@ 0x65
 800a3a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	d00c      	beq.n	800a3c8 <_scanf_float+0x358>
 800a3ae:	2945      	cmp	r1, #69	@ 0x45
 800a3b0:	d00a      	beq.n	800a3c8 <_scanf_float+0x358>
 800a3b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4798      	blx	r3
 800a3bc:	6923      	ldr	r3, [r4, #16]
 800a3be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	1eb5      	subs	r5, r6, #2
 800a3c6:	6123      	str	r3, [r4, #16]
 800a3c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4798      	blx	r3
 800a3d2:	462e      	mov	r6, r5
 800a3d4:	6822      	ldr	r2, [r4, #0]
 800a3d6:	f012 0210 	ands.w	r2, r2, #16
 800a3da:	d001      	beq.n	800a3e0 <_scanf_float+0x370>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e68b      	b.n	800a0f8 <_scanf_float+0x88>
 800a3e0:	7032      	strb	r2, [r6, #0]
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a3e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3ec:	d11a      	bne.n	800a424 <_scanf_float+0x3b4>
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	454b      	cmp	r3, r9
 800a3f2:	eba3 0209 	sub.w	r2, r3, r9
 800a3f6:	d121      	bne.n	800a43c <_scanf_float+0x3cc>
 800a3f8:	9901      	ldr	r1, [sp, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	f002 fc41 	bl	800cc84 <_strtod_r>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	6821      	ldr	r1, [r4, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f011 0f02 	tst.w	r1, #2
 800a40c:	f103 0204 	add.w	r2, r3, #4
 800a410:	d01f      	beq.n	800a452 <_scanf_float+0x3e2>
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	600a      	str	r2, [r1, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	ed83 0b00 	vstr	d0, [r3]
 800a41c:	68e3      	ldr	r3, [r4, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60e3      	str	r3, [r4, #12]
 800a422:	e7db      	b.n	800a3dc <_scanf_float+0x36c>
 800a424:	9b04      	ldr	r3, [sp, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0e6      	beq.n	800a3f8 <_scanf_float+0x388>
 800a42a:	9905      	ldr	r1, [sp, #20]
 800a42c:	230a      	movs	r3, #10
 800a42e:	3101      	adds	r1, #1
 800a430:	4640      	mov	r0, r8
 800a432:	f002 fca7 	bl	800cd84 <_strtol_r>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	9e05      	ldr	r6, [sp, #20]
 800a43a:	1ac2      	subs	r2, r0, r3
 800a43c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a440:	429e      	cmp	r6, r3
 800a442:	bf28      	it	cs
 800a444:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a448:	490d      	ldr	r1, [pc, #52]	@ (800a480 <_scanf_float+0x410>)
 800a44a:	4630      	mov	r0, r6
 800a44c:	f000 f94e 	bl	800a6ec <siprintf>
 800a450:	e7d2      	b.n	800a3f8 <_scanf_float+0x388>
 800a452:	f011 0f04 	tst.w	r1, #4
 800a456:	9903      	ldr	r1, [sp, #12]
 800a458:	600a      	str	r2, [r1, #0]
 800a45a:	d1dc      	bne.n	800a416 <_scanf_float+0x3a6>
 800a45c:	eeb4 0b40 	vcmp.f64	d0, d0
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	681d      	ldr	r5, [r3, #0]
 800a466:	d705      	bvc.n	800a474 <_scanf_float+0x404>
 800a468:	4806      	ldr	r0, [pc, #24]	@ (800a484 <_scanf_float+0x414>)
 800a46a:	f000 fac5 	bl	800a9f8 <nanf>
 800a46e:	ed85 0a00 	vstr	s0, [r5]
 800a472:	e7d3      	b.n	800a41c <_scanf_float+0x3ac>
 800a474:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a478:	e7f9      	b.n	800a46e <_scanf_float+0x3fe>
 800a47a:	f04f 0900 	mov.w	r9, #0
 800a47e:	e630      	b.n	800a0e2 <_scanf_float+0x72>
 800a480:	0800e8e0 	.word	0x0800e8e0
 800a484:	0800ec75 	.word	0x0800ec75

0800a488 <std>:
 800a488:	2300      	movs	r3, #0
 800a48a:	b510      	push	{r4, lr}
 800a48c:	4604      	mov	r4, r0
 800a48e:	e9c0 3300 	strd	r3, r3, [r0]
 800a492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a496:	6083      	str	r3, [r0, #8]
 800a498:	8181      	strh	r1, [r0, #12]
 800a49a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a49c:	81c2      	strh	r2, [r0, #14]
 800a49e:	6183      	str	r3, [r0, #24]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	305c      	adds	r0, #92	@ 0x5c
 800a4a6:	f000 fa19 	bl	800a8dc <memset>
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e0 <std+0x58>)
 800a4ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <std+0x5c>)
 800a4b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e8 <std+0x60>)
 800a4b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4ec <std+0x64>)
 800a4b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f0 <std+0x68>)
 800a4bc:	6224      	str	r4, [r4, #32]
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	d006      	beq.n	800a4d0 <std+0x48>
 800a4c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4c6:	4294      	cmp	r4, r2
 800a4c8:	d002      	beq.n	800a4d0 <std+0x48>
 800a4ca:	33d0      	adds	r3, #208	@ 0xd0
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d105      	bne.n	800a4dc <std+0x54>
 800a4d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d8:	f000 ba7c 	b.w	800a9d4 <__retarget_lock_init_recursive>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800a72d 	.word	0x0800a72d
 800a4e4:	0800a74f 	.word	0x0800a74f
 800a4e8:	0800a787 	.word	0x0800a787
 800a4ec:	0800a7ab 	.word	0x0800a7ab
 800a4f0:	24000a70 	.word	0x24000a70

0800a4f4 <stdio_exit_handler>:
 800a4f4:	4a02      	ldr	r2, [pc, #8]	@ (800a500 <stdio_exit_handler+0xc>)
 800a4f6:	4903      	ldr	r1, [pc, #12]	@ (800a504 <stdio_exit_handler+0x10>)
 800a4f8:	4803      	ldr	r0, [pc, #12]	@ (800a508 <stdio_exit_handler+0x14>)
 800a4fa:	f000 b869 	b.w	800a5d0 <_fwalk_sglue>
 800a4fe:	bf00      	nop
 800a500:	2400001c 	.word	0x2400001c
 800a504:	0800d3c5 	.word	0x0800d3c5
 800a508:	2400002c 	.word	0x2400002c

0800a50c <cleanup_stdio>:
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	4b0c      	ldr	r3, [pc, #48]	@ (800a540 <cleanup_stdio+0x34>)
 800a510:	4299      	cmp	r1, r3
 800a512:	b510      	push	{r4, lr}
 800a514:	4604      	mov	r4, r0
 800a516:	d001      	beq.n	800a51c <cleanup_stdio+0x10>
 800a518:	f002 ff54 	bl	800d3c4 <_fflush_r>
 800a51c:	68a1      	ldr	r1, [r4, #8]
 800a51e:	4b09      	ldr	r3, [pc, #36]	@ (800a544 <cleanup_stdio+0x38>)
 800a520:	4299      	cmp	r1, r3
 800a522:	d002      	beq.n	800a52a <cleanup_stdio+0x1e>
 800a524:	4620      	mov	r0, r4
 800a526:	f002 ff4d 	bl	800d3c4 <_fflush_r>
 800a52a:	68e1      	ldr	r1, [r4, #12]
 800a52c:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <cleanup_stdio+0x3c>)
 800a52e:	4299      	cmp	r1, r3
 800a530:	d004      	beq.n	800a53c <cleanup_stdio+0x30>
 800a532:	4620      	mov	r0, r4
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f002 bf44 	b.w	800d3c4 <_fflush_r>
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	bf00      	nop
 800a540:	24000a70 	.word	0x24000a70
 800a544:	24000ad8 	.word	0x24000ad8
 800a548:	24000b40 	.word	0x24000b40

0800a54c <global_stdio_init.part.0>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	4b0b      	ldr	r3, [pc, #44]	@ (800a57c <global_stdio_init.part.0+0x30>)
 800a550:	4c0b      	ldr	r4, [pc, #44]	@ (800a580 <global_stdio_init.part.0+0x34>)
 800a552:	4a0c      	ldr	r2, [pc, #48]	@ (800a584 <global_stdio_init.part.0+0x38>)
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	4620      	mov	r0, r4
 800a558:	2200      	movs	r2, #0
 800a55a:	2104      	movs	r1, #4
 800a55c:	f7ff ff94 	bl	800a488 <std>
 800a560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a564:	2201      	movs	r2, #1
 800a566:	2109      	movs	r1, #9
 800a568:	f7ff ff8e 	bl	800a488 <std>
 800a56c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a570:	2202      	movs	r2, #2
 800a572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a576:	2112      	movs	r1, #18
 800a578:	f7ff bf86 	b.w	800a488 <std>
 800a57c:	24000ba8 	.word	0x24000ba8
 800a580:	24000a70 	.word	0x24000a70
 800a584:	0800a4f5 	.word	0x0800a4f5

0800a588 <__sfp_lock_acquire>:
 800a588:	4801      	ldr	r0, [pc, #4]	@ (800a590 <__sfp_lock_acquire+0x8>)
 800a58a:	f000 ba24 	b.w	800a9d6 <__retarget_lock_acquire_recursive>
 800a58e:	bf00      	nop
 800a590:	24000bb1 	.word	0x24000bb1

0800a594 <__sfp_lock_release>:
 800a594:	4801      	ldr	r0, [pc, #4]	@ (800a59c <__sfp_lock_release+0x8>)
 800a596:	f000 ba1f 	b.w	800a9d8 <__retarget_lock_release_recursive>
 800a59a:	bf00      	nop
 800a59c:	24000bb1 	.word	0x24000bb1

0800a5a0 <__sinit>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f7ff fff0 	bl	800a588 <__sfp_lock_acquire>
 800a5a8:	6a23      	ldr	r3, [r4, #32]
 800a5aa:	b11b      	cbz	r3, 800a5b4 <__sinit+0x14>
 800a5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b0:	f7ff bff0 	b.w	800a594 <__sfp_lock_release>
 800a5b4:	4b04      	ldr	r3, [pc, #16]	@ (800a5c8 <__sinit+0x28>)
 800a5b6:	6223      	str	r3, [r4, #32]
 800a5b8:	4b04      	ldr	r3, [pc, #16]	@ (800a5cc <__sinit+0x2c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1f5      	bne.n	800a5ac <__sinit+0xc>
 800a5c0:	f7ff ffc4 	bl	800a54c <global_stdio_init.part.0>
 800a5c4:	e7f2      	b.n	800a5ac <__sinit+0xc>
 800a5c6:	bf00      	nop
 800a5c8:	0800a50d 	.word	0x0800a50d
 800a5cc:	24000ba8 	.word	0x24000ba8

0800a5d0 <_fwalk_sglue>:
 800a5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	4688      	mov	r8, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	2600      	movs	r6, #0
 800a5dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5e4:	d505      	bpl.n	800a5f2 <_fwalk_sglue+0x22>
 800a5e6:	6824      	ldr	r4, [r4, #0]
 800a5e8:	2c00      	cmp	r4, #0
 800a5ea:	d1f7      	bne.n	800a5dc <_fwalk_sglue+0xc>
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d907      	bls.n	800a608 <_fwalk_sglue+0x38>
 800a5f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	d003      	beq.n	800a608 <_fwalk_sglue+0x38>
 800a600:	4629      	mov	r1, r5
 800a602:	4638      	mov	r0, r7
 800a604:	47c0      	blx	r8
 800a606:	4306      	orrs	r6, r0
 800a608:	3568      	adds	r5, #104	@ 0x68
 800a60a:	e7e9      	b.n	800a5e0 <_fwalk_sglue+0x10>

0800a60c <iprintf>:
 800a60c:	b40f      	push	{r0, r1, r2, r3}
 800a60e:	b507      	push	{r0, r1, r2, lr}
 800a610:	4906      	ldr	r1, [pc, #24]	@ (800a62c <iprintf+0x20>)
 800a612:	ab04      	add	r3, sp, #16
 800a614:	6808      	ldr	r0, [r1, #0]
 800a616:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61a:	6881      	ldr	r1, [r0, #8]
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	f002 fd35 	bl	800d08c <_vfiprintf_r>
 800a622:	b003      	add	sp, #12
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b004      	add	sp, #16
 800a62a:	4770      	bx	lr
 800a62c:	24000028 	.word	0x24000028

0800a630 <_puts_r>:
 800a630:	6a03      	ldr	r3, [r0, #32]
 800a632:	b570      	push	{r4, r5, r6, lr}
 800a634:	6884      	ldr	r4, [r0, #8]
 800a636:	4605      	mov	r5, r0
 800a638:	460e      	mov	r6, r1
 800a63a:	b90b      	cbnz	r3, 800a640 <_puts_r+0x10>
 800a63c:	f7ff ffb0 	bl	800a5a0 <__sinit>
 800a640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a642:	07db      	lsls	r3, r3, #31
 800a644:	d405      	bmi.n	800a652 <_puts_r+0x22>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	0598      	lsls	r0, r3, #22
 800a64a:	d402      	bmi.n	800a652 <_puts_r+0x22>
 800a64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a64e:	f000 f9c2 	bl	800a9d6 <__retarget_lock_acquire_recursive>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	0719      	lsls	r1, r3, #28
 800a656:	d502      	bpl.n	800a65e <_puts_r+0x2e>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d135      	bne.n	800a6ca <_puts_r+0x9a>
 800a65e:	4621      	mov	r1, r4
 800a660:	4628      	mov	r0, r5
 800a662:	f000 f8e5 	bl	800a830 <__swsetup_r>
 800a666:	b380      	cbz	r0, 800a6ca <_puts_r+0x9a>
 800a668:	f04f 35ff 	mov.w	r5, #4294967295
 800a66c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a66e:	07da      	lsls	r2, r3, #31
 800a670:	d405      	bmi.n	800a67e <_puts_r+0x4e>
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	059b      	lsls	r3, r3, #22
 800a676:	d402      	bmi.n	800a67e <_puts_r+0x4e>
 800a678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a67a:	f000 f9ad 	bl	800a9d8 <__retarget_lock_release_recursive>
 800a67e:	4628      	mov	r0, r5
 800a680:	bd70      	pop	{r4, r5, r6, pc}
 800a682:	2b00      	cmp	r3, #0
 800a684:	da04      	bge.n	800a690 <_puts_r+0x60>
 800a686:	69a2      	ldr	r2, [r4, #24]
 800a688:	429a      	cmp	r2, r3
 800a68a:	dc17      	bgt.n	800a6bc <_puts_r+0x8c>
 800a68c:	290a      	cmp	r1, #10
 800a68e:	d015      	beq.n	800a6bc <_puts_r+0x8c>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	6022      	str	r2, [r4, #0]
 800a696:	7019      	strb	r1, [r3, #0]
 800a698:	68a3      	ldr	r3, [r4, #8]
 800a69a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d1ed      	bne.n	800a682 <_puts_r+0x52>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da11      	bge.n	800a6ce <_puts_r+0x9e>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	210a      	movs	r1, #10
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f87f 	bl	800a7b2 <__swbuf_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d0d7      	beq.n	800a668 <_puts_r+0x38>
 800a6b8:	250a      	movs	r5, #10
 800a6ba:	e7d7      	b.n	800a66c <_puts_r+0x3c>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 f877 	bl	800a7b2 <__swbuf_r>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d1e7      	bne.n	800a698 <_puts_r+0x68>
 800a6c8:	e7ce      	b.n	800a668 <_puts_r+0x38>
 800a6ca:	3e01      	subs	r6, #1
 800a6cc:	e7e4      	b.n	800a698 <_puts_r+0x68>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	6022      	str	r2, [r4, #0]
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e7ee      	b.n	800a6b8 <_puts_r+0x88>
	...

0800a6dc <puts>:
 800a6dc:	4b02      	ldr	r3, [pc, #8]	@ (800a6e8 <puts+0xc>)
 800a6de:	4601      	mov	r1, r0
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	f7ff bfa5 	b.w	800a630 <_puts_r>
 800a6e6:	bf00      	nop
 800a6e8:	24000028 	.word	0x24000028

0800a6ec <siprintf>:
 800a6ec:	b40e      	push	{r1, r2, r3}
 800a6ee:	b500      	push	{lr}
 800a6f0:	b09c      	sub	sp, #112	@ 0x70
 800a6f2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	9006      	str	r0, [sp, #24]
 800a6f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a6fc:	4809      	ldr	r0, [pc, #36]	@ (800a724 <siprintf+0x38>)
 800a6fe:	9107      	str	r1, [sp, #28]
 800a700:	9104      	str	r1, [sp, #16]
 800a702:	4909      	ldr	r1, [pc, #36]	@ (800a728 <siprintf+0x3c>)
 800a704:	f853 2b04 	ldr.w	r2, [r3], #4
 800a708:	9105      	str	r1, [sp, #20]
 800a70a:	6800      	ldr	r0, [r0, #0]
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	a902      	add	r1, sp, #8
 800a710:	f002 fb96 	bl	800ce40 <_svfiprintf_r>
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	b01c      	add	sp, #112	@ 0x70
 800a71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a720:	b003      	add	sp, #12
 800a722:	4770      	bx	lr
 800a724:	24000028 	.word	0x24000028
 800a728:	ffff0208 	.word	0xffff0208

0800a72c <__sread>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	460c      	mov	r4, r1
 800a730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a734:	f000 f900 	bl	800a938 <_read_r>
 800a738:	2800      	cmp	r0, #0
 800a73a:	bfab      	itete	ge
 800a73c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a73e:	89a3      	ldrhlt	r3, [r4, #12]
 800a740:	181b      	addge	r3, r3, r0
 800a742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a746:	bfac      	ite	ge
 800a748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a74a:	81a3      	strhlt	r3, [r4, #12]
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <__swrite>:
 800a74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a752:	461f      	mov	r7, r3
 800a754:	898b      	ldrh	r3, [r1, #12]
 800a756:	05db      	lsls	r3, r3, #23
 800a758:	4605      	mov	r5, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	4616      	mov	r6, r2
 800a75e:	d505      	bpl.n	800a76c <__swrite+0x1e>
 800a760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a764:	2302      	movs	r3, #2
 800a766:	2200      	movs	r2, #0
 800a768:	f000 f8d4 	bl	800a914 <_lseek_r>
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	4632      	mov	r2, r6
 800a77a:	463b      	mov	r3, r7
 800a77c:	4628      	mov	r0, r5
 800a77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a782:	f000 b8eb 	b.w	800a95c <_write_r>

0800a786 <__sseek>:
 800a786:	b510      	push	{r4, lr}
 800a788:	460c      	mov	r4, r1
 800a78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78e:	f000 f8c1 	bl	800a914 <_lseek_r>
 800a792:	1c43      	adds	r3, r0, #1
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	bf15      	itete	ne
 800a798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a79a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a79e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7a2:	81a3      	strheq	r3, [r4, #12]
 800a7a4:	bf18      	it	ne
 800a7a6:	81a3      	strhne	r3, [r4, #12]
 800a7a8:	bd10      	pop	{r4, pc}

0800a7aa <__sclose>:
 800a7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ae:	f000 b8a1 	b.w	800a8f4 <_close_r>

0800a7b2 <__swbuf_r>:
 800a7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b4:	460e      	mov	r6, r1
 800a7b6:	4614      	mov	r4, r2
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	b118      	cbz	r0, 800a7c4 <__swbuf_r+0x12>
 800a7bc:	6a03      	ldr	r3, [r0, #32]
 800a7be:	b90b      	cbnz	r3, 800a7c4 <__swbuf_r+0x12>
 800a7c0:	f7ff feee 	bl	800a5a0 <__sinit>
 800a7c4:	69a3      	ldr	r3, [r4, #24]
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	071a      	lsls	r2, r3, #28
 800a7cc:	d501      	bpl.n	800a7d2 <__swbuf_r+0x20>
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	b943      	cbnz	r3, 800a7e4 <__swbuf_r+0x32>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f82b 	bl	800a830 <__swsetup_r>
 800a7da:	b118      	cbz	r0, 800a7e4 <__swbuf_r+0x32>
 800a7dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	6922      	ldr	r2, [r4, #16]
 800a7e8:	1a98      	subs	r0, r3, r2
 800a7ea:	6963      	ldr	r3, [r4, #20]
 800a7ec:	b2f6      	uxtb	r6, r6
 800a7ee:	4283      	cmp	r3, r0
 800a7f0:	4637      	mov	r7, r6
 800a7f2:	dc05      	bgt.n	800a800 <__swbuf_r+0x4e>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f002 fde4 	bl	800d3c4 <_fflush_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d1ed      	bne.n	800a7dc <__swbuf_r+0x2a>
 800a800:	68a3      	ldr	r3, [r4, #8]
 800a802:	3b01      	subs	r3, #1
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	6022      	str	r2, [r4, #0]
 800a80c:	701e      	strb	r6, [r3, #0]
 800a80e:	6962      	ldr	r2, [r4, #20]
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	429a      	cmp	r2, r3
 800a814:	d004      	beq.n	800a820 <__swbuf_r+0x6e>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	07db      	lsls	r3, r3, #31
 800a81a:	d5e1      	bpl.n	800a7e0 <__swbuf_r+0x2e>
 800a81c:	2e0a      	cmp	r6, #10
 800a81e:	d1df      	bne.n	800a7e0 <__swbuf_r+0x2e>
 800a820:	4621      	mov	r1, r4
 800a822:	4628      	mov	r0, r5
 800a824:	f002 fdce 	bl	800d3c4 <_fflush_r>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d0d9      	beq.n	800a7e0 <__swbuf_r+0x2e>
 800a82c:	e7d6      	b.n	800a7dc <__swbuf_r+0x2a>
	...

0800a830 <__swsetup_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4b29      	ldr	r3, [pc, #164]	@ (800a8d8 <__swsetup_r+0xa8>)
 800a834:	4605      	mov	r5, r0
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	460c      	mov	r4, r1
 800a83a:	b118      	cbz	r0, 800a844 <__swsetup_r+0x14>
 800a83c:	6a03      	ldr	r3, [r0, #32]
 800a83e:	b90b      	cbnz	r3, 800a844 <__swsetup_r+0x14>
 800a840:	f7ff feae 	bl	800a5a0 <__sinit>
 800a844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a848:	0719      	lsls	r1, r3, #28
 800a84a:	d422      	bmi.n	800a892 <__swsetup_r+0x62>
 800a84c:	06da      	lsls	r2, r3, #27
 800a84e:	d407      	bmi.n	800a860 <__swsetup_r+0x30>
 800a850:	2209      	movs	r2, #9
 800a852:	602a      	str	r2, [r5, #0]
 800a854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	e033      	b.n	800a8c8 <__swsetup_r+0x98>
 800a860:	0758      	lsls	r0, r3, #29
 800a862:	d512      	bpl.n	800a88a <__swsetup_r+0x5a>
 800a864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a866:	b141      	cbz	r1, 800a87a <__swsetup_r+0x4a>
 800a868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__swsetup_r+0x46>
 800a870:	4628      	mov	r0, r5
 800a872:	f000 fea7 	bl	800b5c4 <_free_r>
 800a876:	2300      	movs	r3, #0
 800a878:	6363      	str	r3, [r4, #52]	@ 0x34
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	2300      	movs	r3, #0
 800a884:	6063      	str	r3, [r4, #4]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f043 0308 	orr.w	r3, r3, #8
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	b94b      	cbnz	r3, 800a8aa <__swsetup_r+0x7a>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a89c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8a0:	d003      	beq.n	800a8aa <__swsetup_r+0x7a>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f002 fddb 	bl	800d460 <__smakebuf_r>
 800a8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ae:	f013 0201 	ands.w	r2, r3, #1
 800a8b2:	d00a      	beq.n	800a8ca <__swsetup_r+0x9a>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	60a2      	str	r2, [r4, #8]
 800a8b8:	6962      	ldr	r2, [r4, #20]
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	61a2      	str	r2, [r4, #24]
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	b942      	cbnz	r2, 800a8d4 <__swsetup_r+0xa4>
 800a8c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8c6:	d1c5      	bne.n	800a854 <__swsetup_r+0x24>
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	0799      	lsls	r1, r3, #30
 800a8cc:	bf58      	it	pl
 800a8ce:	6962      	ldrpl	r2, [r4, #20]
 800a8d0:	60a2      	str	r2, [r4, #8]
 800a8d2:	e7f4      	b.n	800a8be <__swsetup_r+0x8e>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e7f7      	b.n	800a8c8 <__swsetup_r+0x98>
 800a8d8:	24000028 	.word	0x24000028

0800a8dc <memset>:
 800a8dc:	4402      	add	r2, r0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d100      	bne.n	800a8e6 <memset+0xa>
 800a8e4:	4770      	bx	lr
 800a8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ea:	e7f9      	b.n	800a8e0 <memset+0x4>

0800a8ec <_localeconv_r>:
 800a8ec:	4800      	ldr	r0, [pc, #0]	@ (800a8f0 <_localeconv_r+0x4>)
 800a8ee:	4770      	bx	lr
 800a8f0:	24000168 	.word	0x24000168

0800a8f4 <_close_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	@ (800a910 <_close_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f7 fbda 	bl	80020b8 <_close>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_close_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_close_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	24000bac 	.word	0x24000bac

0800a914 <_lseek_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d07      	ldr	r5, [pc, #28]	@ (800a934 <_lseek_r+0x20>)
 800a918:	4604      	mov	r4, r0
 800a91a:	4608      	mov	r0, r1
 800a91c:	4611      	mov	r1, r2
 800a91e:	2200      	movs	r2, #0
 800a920:	602a      	str	r2, [r5, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	f7f7 fbef 	bl	8002106 <_lseek>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_lseek_r+0x1e>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_lseek_r+0x1e>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	24000bac 	.word	0x24000bac

0800a938 <_read_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	@ (800a958 <_read_r+0x20>)
 800a93c:	4604      	mov	r4, r0
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	2200      	movs	r2, #0
 800a944:	602a      	str	r2, [r5, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	f7f7 fb7d 	bl	8002046 <_read>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_read_r+0x1e>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_read_r+0x1e>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	24000bac 	.word	0x24000bac

0800a95c <_write_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d07      	ldr	r5, [pc, #28]	@ (800a97c <_write_r+0x20>)
 800a960:	4604      	mov	r4, r0
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	2200      	movs	r2, #0
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7f7 fb88 	bl	8002080 <_write>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_write_r+0x1e>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_write_r+0x1e>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	24000bac 	.word	0x24000bac

0800a980 <__errno>:
 800a980:	4b01      	ldr	r3, [pc, #4]	@ (800a988 <__errno+0x8>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	24000028 	.word	0x24000028

0800a98c <__libc_init_array>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9c4 <__libc_init_array+0x38>)
 800a990:	4c0d      	ldr	r4, [pc, #52]	@ (800a9c8 <__libc_init_array+0x3c>)
 800a992:	1b64      	subs	r4, r4, r5
 800a994:	10a4      	asrs	r4, r4, #2
 800a996:	2600      	movs	r6, #0
 800a998:	42a6      	cmp	r6, r4
 800a99a:	d109      	bne.n	800a9b0 <__libc_init_array+0x24>
 800a99c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9cc <__libc_init_array+0x40>)
 800a99e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9d0 <__libc_init_array+0x44>)
 800a9a0:	f003 fd3a 	bl	800e418 <_init>
 800a9a4:	1b64      	subs	r4, r4, r5
 800a9a6:	10a4      	asrs	r4, r4, #2
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	d105      	bne.n	800a9ba <__libc_init_array+0x2e>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b4:	4798      	blx	r3
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7ee      	b.n	800a998 <__libc_init_array+0xc>
 800a9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9be:	4798      	blx	r3
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7f2      	b.n	800a9aa <__libc_init_array+0x1e>
 800a9c4:	08010598 	.word	0x08010598
 800a9c8:	08010598 	.word	0x08010598
 800a9cc:	08010598 	.word	0x08010598
 800a9d0:	0801059c 	.word	0x0801059c

0800a9d4 <__retarget_lock_init_recursive>:
 800a9d4:	4770      	bx	lr

0800a9d6 <__retarget_lock_acquire_recursive>:
 800a9d6:	4770      	bx	lr

0800a9d8 <__retarget_lock_release_recursive>:
 800a9d8:	4770      	bx	lr

0800a9da <memcpy>:
 800a9da:	440a      	add	r2, r1
 800a9dc:	4291      	cmp	r1, r2
 800a9de:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e2:	d100      	bne.n	800a9e6 <memcpy+0xc>
 800a9e4:	4770      	bx	lr
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f0:	4291      	cmp	r1, r2
 800a9f2:	d1f9      	bne.n	800a9e8 <memcpy+0xe>
 800a9f4:	bd10      	pop	{r4, pc}
	...

0800a9f8 <nanf>:
 800a9f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa00 <nanf+0x8>
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	7fc00000 	.word	0x7fc00000

0800aa04 <quorem>:
 800aa04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	6903      	ldr	r3, [r0, #16]
 800aa0a:	690c      	ldr	r4, [r1, #16]
 800aa0c:	42a3      	cmp	r3, r4
 800aa0e:	4607      	mov	r7, r0
 800aa10:	db7e      	blt.n	800ab10 <quorem+0x10c>
 800aa12:	3c01      	subs	r4, #1
 800aa14:	f101 0814 	add.w	r8, r1, #20
 800aa18:	00a3      	lsls	r3, r4, #2
 800aa1a:	f100 0514 	add.w	r5, r0, #20
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	429a      	cmp	r2, r3
 800aa32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa36:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa3a:	d32e      	bcc.n	800aa9a <quorem+0x96>
 800aa3c:	f04f 0a00 	mov.w	sl, #0
 800aa40:	46c4      	mov	ip, r8
 800aa42:	46ae      	mov	lr, r5
 800aa44:	46d3      	mov	fp, sl
 800aa46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa4a:	b298      	uxth	r0, r3
 800aa4c:	fb06 a000 	mla	r0, r6, r0, sl
 800aa50:	0c02      	lsrs	r2, r0, #16
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	fb06 2303 	mla	r3, r6, r3, r2
 800aa58:	f8de 2000 	ldr.w	r2, [lr]
 800aa5c:	b280      	uxth	r0, r0
 800aa5e:	b292      	uxth	r2, r2
 800aa60:	1a12      	subs	r2, r2, r0
 800aa62:	445a      	add	r2, fp
 800aa64:	f8de 0000 	ldr.w	r0, [lr]
 800aa68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa76:	b292      	uxth	r2, r2
 800aa78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa7c:	45e1      	cmp	r9, ip
 800aa7e:	f84e 2b04 	str.w	r2, [lr], #4
 800aa82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa86:	d2de      	bcs.n	800aa46 <quorem+0x42>
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	58eb      	ldr	r3, [r5, r3]
 800aa8c:	b92b      	cbnz	r3, 800aa9a <quorem+0x96>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	429d      	cmp	r5, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	d32f      	bcc.n	800aaf8 <quorem+0xf4>
 800aa98:	613c      	str	r4, [r7, #16]
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f001 f956 	bl	800bd4c <__mcmp>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	db25      	blt.n	800aaf0 <quorem+0xec>
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f858 2b04 	ldr.w	r2, [r8], #4
 800aaac:	f8d1 c000 	ldr.w	ip, [r1]
 800aab0:	fa1f fe82 	uxth.w	lr, r2
 800aab4:	fa1f f38c 	uxth.w	r3, ip
 800aab8:	eba3 030e 	sub.w	r3, r3, lr
 800aabc:	4403      	add	r3, r0
 800aabe:	0c12      	lsrs	r2, r2, #16
 800aac0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aac4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aace:	45c1      	cmp	r9, r8
 800aad0:	f841 3b04 	str.w	r3, [r1], #4
 800aad4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aad8:	d2e6      	bcs.n	800aaa8 <quorem+0xa4>
 800aada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aae2:	b922      	cbnz	r2, 800aaee <quorem+0xea>
 800aae4:	3b04      	subs	r3, #4
 800aae6:	429d      	cmp	r5, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	d30b      	bcc.n	800ab04 <quorem+0x100>
 800aaec:	613c      	str	r4, [r7, #16]
 800aaee:	3601      	adds	r6, #1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	b003      	add	sp, #12
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	6812      	ldr	r2, [r2, #0]
 800aafa:	3b04      	subs	r3, #4
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	d1cb      	bne.n	800aa98 <quorem+0x94>
 800ab00:	3c01      	subs	r4, #1
 800ab02:	e7c6      	b.n	800aa92 <quorem+0x8e>
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	3b04      	subs	r3, #4
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d1ef      	bne.n	800aaec <quorem+0xe8>
 800ab0c:	3c01      	subs	r4, #1
 800ab0e:	e7ea      	b.n	800aae6 <quorem+0xe2>
 800ab10:	2000      	movs	r0, #0
 800ab12:	e7ee      	b.n	800aaf2 <quorem+0xee>
 800ab14:	0000      	movs	r0, r0
	...

0800ab18 <_dtoa_r>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b02 	vpush	{d8}
 800ab20:	69c7      	ldr	r7, [r0, #28]
 800ab22:	b091      	sub	sp, #68	@ 0x44
 800ab24:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab28:	ec55 4b10 	vmov	r4, r5, d0
 800ab2c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ab2e:	9107      	str	r1, [sp, #28]
 800ab30:	4681      	mov	r9, r0
 800ab32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab34:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab36:	b97f      	cbnz	r7, 800ab58 <_dtoa_r+0x40>
 800ab38:	2010      	movs	r0, #16
 800ab3a:	f000 fd8d 	bl	800b658 <malloc>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab44:	b920      	cbnz	r0, 800ab50 <_dtoa_r+0x38>
 800ab46:	4ba0      	ldr	r3, [pc, #640]	@ (800adc8 <_dtoa_r+0x2b0>)
 800ab48:	21ef      	movs	r1, #239	@ 0xef
 800ab4a:	48a0      	ldr	r0, [pc, #640]	@ (800adcc <_dtoa_r+0x2b4>)
 800ab4c:	f002 fd2c 	bl	800d5a8 <__assert_func>
 800ab50:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab54:	6007      	str	r7, [r0, #0]
 800ab56:	60c7      	str	r7, [r0, #12]
 800ab58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	b159      	cbz	r1, 800ab78 <_dtoa_r+0x60>
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	604a      	str	r2, [r1, #4]
 800ab64:	2301      	movs	r3, #1
 800ab66:	4093      	lsls	r3, r2
 800ab68:	608b      	str	r3, [r1, #8]
 800ab6a:	4648      	mov	r0, r9
 800ab6c:	f000 fe6a 	bl	800b844 <_Bfree>
 800ab70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	1e2b      	subs	r3, r5, #0
 800ab7a:	bfbb      	ittet	lt
 800ab7c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab80:	9303      	strlt	r3, [sp, #12]
 800ab82:	2300      	movge	r3, #0
 800ab84:	2201      	movlt	r2, #1
 800ab86:	bfac      	ite	ge
 800ab88:	6033      	strge	r3, [r6, #0]
 800ab8a:	6032      	strlt	r2, [r6, #0]
 800ab8c:	4b90      	ldr	r3, [pc, #576]	@ (800add0 <_dtoa_r+0x2b8>)
 800ab8e:	9e03      	ldr	r6, [sp, #12]
 800ab90:	43b3      	bics	r3, r6
 800ab92:	d110      	bne.n	800abb6 <_dtoa_r+0x9e>
 800ab94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab96:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800aba0:	4323      	orrs	r3, r4
 800aba2:	f000 84de 	beq.w	800b562 <_dtoa_r+0xa4a>
 800aba6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aba8:	4f8a      	ldr	r7, [pc, #552]	@ (800add4 <_dtoa_r+0x2bc>)
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 84e0 	beq.w	800b570 <_dtoa_r+0xa58>
 800abb0:	1cfb      	adds	r3, r7, #3
 800abb2:	f000 bcdb 	b.w	800b56c <_dtoa_r+0xa54>
 800abb6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800abba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	d10a      	bne.n	800abda <_dtoa_r+0xc2>
 800abc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abc6:	2301      	movs	r3, #1
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abcc:	b113      	cbz	r3, 800abd4 <_dtoa_r+0xbc>
 800abce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800abd0:	4b81      	ldr	r3, [pc, #516]	@ (800add8 <_dtoa_r+0x2c0>)
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	4f81      	ldr	r7, [pc, #516]	@ (800addc <_dtoa_r+0x2c4>)
 800abd6:	f000 bccb 	b.w	800b570 <_dtoa_r+0xa58>
 800abda:	aa0e      	add	r2, sp, #56	@ 0x38
 800abdc:	a90f      	add	r1, sp, #60	@ 0x3c
 800abde:	4648      	mov	r0, r9
 800abe0:	eeb0 0b48 	vmov.f64	d0, d8
 800abe4:	f001 f9d2 	bl	800bf8c <__d2b>
 800abe8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800abec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abee:	9001      	str	r0, [sp, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d045      	beq.n	800ac80 <_dtoa_r+0x168>
 800abf4:	eeb0 7b48 	vmov.f64	d7, d8
 800abf8:	ee18 1a90 	vmov	r1, s17
 800abfc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac00:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ac04:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ac08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ac0c:	2500      	movs	r5, #0
 800ac0e:	ee07 1a90 	vmov	s15, r1
 800ac12:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ac16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800adb0 <_dtoa_r+0x298>
 800ac1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac1e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800adb8 <_dtoa_r+0x2a0>
 800ac22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ac26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800adc0 <_dtoa_r+0x2a8>
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ac32:	eeb0 7b46 	vmov.f64	d7, d6
 800ac36:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ac3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac46:	ee16 8a90 	vmov	r8, s13
 800ac4a:	d508      	bpl.n	800ac5e <_dtoa_r+0x146>
 800ac4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ac50:	eeb4 6b47 	vcmp.f64	d6, d7
 800ac54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac58:	bf18      	it	ne
 800ac5a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ac5e:	f1b8 0f16 	cmp.w	r8, #22
 800ac62:	d82b      	bhi.n	800acbc <_dtoa_r+0x1a4>
 800ac64:	495e      	ldr	r1, [pc, #376]	@ (800ade0 <_dtoa_r+0x2c8>)
 800ac66:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ac6a:	ed91 7b00 	vldr	d7, [r1]
 800ac6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac76:	d501      	bpl.n	800ac7c <_dtoa_r+0x164>
 800ac78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	e01e      	b.n	800acbe <_dtoa_r+0x1a6>
 800ac80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac82:	4413      	add	r3, r2
 800ac84:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ac88:	2920      	cmp	r1, #32
 800ac8a:	bfc1      	itttt	gt
 800ac8c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ac90:	408e      	lslgt	r6, r1
 800ac92:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ac96:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ac9a:	bfd6      	itet	le
 800ac9c:	f1c1 0120 	rsble	r1, r1, #32
 800aca0:	4331      	orrgt	r1, r6
 800aca2:	fa04 f101 	lslle.w	r1, r4, r1
 800aca6:	ee07 1a90 	vmov	s15, r1
 800acaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800acae:	3b01      	subs	r3, #1
 800acb0:	ee17 1a90 	vmov	r1, s15
 800acb4:	2501      	movs	r5, #1
 800acb6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800acba:	e7a8      	b.n	800ac0e <_dtoa_r+0xf6>
 800acbc:	2101      	movs	r1, #1
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	1e53      	subs	r3, r2, #1
 800acc2:	9306      	str	r3, [sp, #24]
 800acc4:	bf45      	ittet	mi
 800acc6:	f1c2 0301 	rsbmi	r3, r2, #1
 800acca:	9305      	strmi	r3, [sp, #20]
 800accc:	2300      	movpl	r3, #0
 800acce:	2300      	movmi	r3, #0
 800acd0:	bf4c      	ite	mi
 800acd2:	9306      	strmi	r3, [sp, #24]
 800acd4:	9305      	strpl	r3, [sp, #20]
 800acd6:	f1b8 0f00 	cmp.w	r8, #0
 800acda:	910c      	str	r1, [sp, #48]	@ 0x30
 800acdc:	db18      	blt.n	800ad10 <_dtoa_r+0x1f8>
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ace4:	4443      	add	r3, r8
 800ace6:	9306      	str	r3, [sp, #24]
 800ace8:	2300      	movs	r3, #0
 800acea:	9a07      	ldr	r2, [sp, #28]
 800acec:	2a09      	cmp	r2, #9
 800acee:	d849      	bhi.n	800ad84 <_dtoa_r+0x26c>
 800acf0:	2a05      	cmp	r2, #5
 800acf2:	bfc4      	itt	gt
 800acf4:	3a04      	subgt	r2, #4
 800acf6:	9207      	strgt	r2, [sp, #28]
 800acf8:	9a07      	ldr	r2, [sp, #28]
 800acfa:	f1a2 0202 	sub.w	r2, r2, #2
 800acfe:	bfcc      	ite	gt
 800ad00:	2400      	movgt	r4, #0
 800ad02:	2401      	movle	r4, #1
 800ad04:	2a03      	cmp	r2, #3
 800ad06:	d848      	bhi.n	800ad9a <_dtoa_r+0x282>
 800ad08:	e8df f002 	tbb	[pc, r2]
 800ad0c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ad10:	9b05      	ldr	r3, [sp, #20]
 800ad12:	2200      	movs	r2, #0
 800ad14:	eba3 0308 	sub.w	r3, r3, r8
 800ad18:	9305      	str	r3, [sp, #20]
 800ad1a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad1c:	f1c8 0300 	rsb	r3, r8, #0
 800ad20:	e7e3      	b.n	800acea <_dtoa_r+0x1d2>
 800ad22:	2200      	movs	r2, #0
 800ad24:	9208      	str	r2, [sp, #32]
 800ad26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	dc39      	bgt.n	800ada0 <_dtoa_r+0x288>
 800ad2c:	f04f 0b01 	mov.w	fp, #1
 800ad30:	46da      	mov	sl, fp
 800ad32:	465a      	mov	r2, fp
 800ad34:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ad38:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	2004      	movs	r0, #4
 800ad40:	f100 0614 	add.w	r6, r0, #20
 800ad44:	4296      	cmp	r6, r2
 800ad46:	d930      	bls.n	800adaa <_dtoa_r+0x292>
 800ad48:	6079      	str	r1, [r7, #4]
 800ad4a:	4648      	mov	r0, r9
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	f000 fd39 	bl	800b7c4 <_Balloc>
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	4607      	mov	r7, r0
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d146      	bne.n	800ade8 <_dtoa_r+0x2d0>
 800ad5a:	4b22      	ldr	r3, [pc, #136]	@ (800ade4 <_dtoa_r+0x2cc>)
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad62:	e6f2      	b.n	800ab4a <_dtoa_r+0x32>
 800ad64:	2201      	movs	r2, #1
 800ad66:	e7dd      	b.n	800ad24 <_dtoa_r+0x20c>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	9208      	str	r2, [sp, #32]
 800ad6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad6e:	eb08 0b02 	add.w	fp, r8, r2
 800ad72:	f10b 0a01 	add.w	sl, fp, #1
 800ad76:	4652      	mov	r2, sl
 800ad78:	2a01      	cmp	r2, #1
 800ad7a:	bfb8      	it	lt
 800ad7c:	2201      	movlt	r2, #1
 800ad7e:	e7db      	b.n	800ad38 <_dtoa_r+0x220>
 800ad80:	2201      	movs	r2, #1
 800ad82:	e7f2      	b.n	800ad6a <_dtoa_r+0x252>
 800ad84:	2401      	movs	r4, #1
 800ad86:	2200      	movs	r2, #0
 800ad88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ad8c:	f04f 3bff 	mov.w	fp, #4294967295
 800ad90:	2100      	movs	r1, #0
 800ad92:	46da      	mov	sl, fp
 800ad94:	2212      	movs	r2, #18
 800ad96:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad98:	e7ce      	b.n	800ad38 <_dtoa_r+0x220>
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	9208      	str	r2, [sp, #32]
 800ad9e:	e7f5      	b.n	800ad8c <_dtoa_r+0x274>
 800ada0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ada4:	46da      	mov	sl, fp
 800ada6:	465a      	mov	r2, fp
 800ada8:	e7c6      	b.n	800ad38 <_dtoa_r+0x220>
 800adaa:	3101      	adds	r1, #1
 800adac:	0040      	lsls	r0, r0, #1
 800adae:	e7c7      	b.n	800ad40 <_dtoa_r+0x228>
 800adb0:	636f4361 	.word	0x636f4361
 800adb4:	3fd287a7 	.word	0x3fd287a7
 800adb8:	8b60c8b3 	.word	0x8b60c8b3
 800adbc:	3fc68a28 	.word	0x3fc68a28
 800adc0:	509f79fb 	.word	0x509f79fb
 800adc4:	3fd34413 	.word	0x3fd34413
 800adc8:	0800e8f2 	.word	0x0800e8f2
 800adcc:	0800e909 	.word	0x0800e909
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	0800e8ee 	.word	0x0800e8ee
 800add8:	0800e8bd 	.word	0x0800e8bd
 800addc:	0800e8bc 	.word	0x0800e8bc
 800ade0:	0800ea00 	.word	0x0800ea00
 800ade4:	0800e961 	.word	0x0800e961
 800ade8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800adec:	f1ba 0f0e 	cmp.w	sl, #14
 800adf0:	6010      	str	r0, [r2, #0]
 800adf2:	d86f      	bhi.n	800aed4 <_dtoa_r+0x3bc>
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	d06d      	beq.n	800aed4 <_dtoa_r+0x3bc>
 800adf8:	f1b8 0f00 	cmp.w	r8, #0
 800adfc:	f340 80c2 	ble.w	800af84 <_dtoa_r+0x46c>
 800ae00:	4aca      	ldr	r2, [pc, #808]	@ (800b12c <_dtoa_r+0x614>)
 800ae02:	f008 010f 	and.w	r1, r8, #15
 800ae06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ae0a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ae0e:	ed92 7b00 	vldr	d7, [r2]
 800ae12:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ae16:	f000 80a9 	beq.w	800af6c <_dtoa_r+0x454>
 800ae1a:	4ac5      	ldr	r2, [pc, #788]	@ (800b130 <_dtoa_r+0x618>)
 800ae1c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ae20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ae24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae28:	f001 010f 	and.w	r1, r1, #15
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	48c0      	ldr	r0, [pc, #768]	@ (800b130 <_dtoa_r+0x618>)
 800ae30:	2900      	cmp	r1, #0
 800ae32:	f040 809d 	bne.w	800af70 <_dtoa_r+0x458>
 800ae36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	f000 80c1 	beq.w	800afd0 <_dtoa_r+0x4b8>
 800ae4e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ae52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	f140 80b9 	bpl.w	800afd0 <_dtoa_r+0x4b8>
 800ae5e:	f1ba 0f00 	cmp.w	sl, #0
 800ae62:	f000 80b5 	beq.w	800afd0 <_dtoa_r+0x4b8>
 800ae66:	f1bb 0f00 	cmp.w	fp, #0
 800ae6a:	dd31      	ble.n	800aed0 <_dtoa_r+0x3b8>
 800ae6c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ae70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae78:	f108 31ff 	add.w	r1, r8, #4294967295
 800ae7c:	9104      	str	r1, [sp, #16]
 800ae7e:	3201      	adds	r2, #1
 800ae80:	465c      	mov	r4, fp
 800ae82:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae86:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ae8a:	ee07 2a90 	vmov	s15, r2
 800ae8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae92:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ae96:	ee15 2a90 	vmov	r2, s11
 800ae9a:	ec51 0b15 	vmov	r0, r1, d5
 800ae9e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	f040 8098 	bne.w	800afd8 <_dtoa_r+0x4c0>
 800aea8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aeac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aeb0:	ec41 0b17 	vmov	d7, r0, r1
 800aeb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aebc:	f300 8261 	bgt.w	800b382 <_dtoa_r+0x86a>
 800aec0:	eeb1 7b47 	vneg.f64	d7, d7
 800aec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aecc:	f100 80f5 	bmi.w	800b0ba <_dtoa_r+0x5a2>
 800aed0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aed4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	f2c0 812c 	blt.w	800b134 <_dtoa_r+0x61c>
 800aedc:	f1b8 0f0e 	cmp.w	r8, #14
 800aee0:	f300 8128 	bgt.w	800b134 <_dtoa_r+0x61c>
 800aee4:	4b91      	ldr	r3, [pc, #580]	@ (800b12c <_dtoa_r+0x614>)
 800aee6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aeea:	ed93 6b00 	vldr	d6, [r3]
 800aeee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da03      	bge.n	800aefc <_dtoa_r+0x3e4>
 800aef4:	f1ba 0f00 	cmp.w	sl, #0
 800aef8:	f340 80d2 	ble.w	800b0a0 <_dtoa_r+0x588>
 800aefc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800af00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af04:	463e      	mov	r6, r7
 800af06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800af0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800af0e:	ee15 3a10 	vmov	r3, s10
 800af12:	3330      	adds	r3, #48	@ 0x30
 800af14:	f806 3b01 	strb.w	r3, [r6], #1
 800af18:	1bf3      	subs	r3, r6, r7
 800af1a:	459a      	cmp	sl, r3
 800af1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800af20:	eea3 7b46 	vfms.f64	d7, d3, d6
 800af24:	f040 80f8 	bne.w	800b118 <_dtoa_r+0x600>
 800af28:	ee37 7b07 	vadd.f64	d7, d7, d7
 800af2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800af30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af34:	f300 80dd 	bgt.w	800b0f2 <_dtoa_r+0x5da>
 800af38:	eeb4 7b46 	vcmp.f64	d7, d6
 800af3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af40:	d104      	bne.n	800af4c <_dtoa_r+0x434>
 800af42:	ee15 3a10 	vmov	r3, s10
 800af46:	07db      	lsls	r3, r3, #31
 800af48:	f100 80d3 	bmi.w	800b0f2 <_dtoa_r+0x5da>
 800af4c:	9901      	ldr	r1, [sp, #4]
 800af4e:	4648      	mov	r0, r9
 800af50:	f000 fc78 	bl	800b844 <_Bfree>
 800af54:	2300      	movs	r3, #0
 800af56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af58:	7033      	strb	r3, [r6, #0]
 800af5a:	f108 0301 	add.w	r3, r8, #1
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 8304 	beq.w	800b570 <_dtoa_r+0xa58>
 800af68:	601e      	str	r6, [r3, #0]
 800af6a:	e301      	b.n	800b570 <_dtoa_r+0xa58>
 800af6c:	2202      	movs	r2, #2
 800af6e:	e75e      	b.n	800ae2e <_dtoa_r+0x316>
 800af70:	07cc      	lsls	r4, r1, #31
 800af72:	d504      	bpl.n	800af7e <_dtoa_r+0x466>
 800af74:	ed90 6b00 	vldr	d6, [r0]
 800af78:	3201      	adds	r2, #1
 800af7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af7e:	1049      	asrs	r1, r1, #1
 800af80:	3008      	adds	r0, #8
 800af82:	e755      	b.n	800ae30 <_dtoa_r+0x318>
 800af84:	d022      	beq.n	800afcc <_dtoa_r+0x4b4>
 800af86:	f1c8 0100 	rsb	r1, r8, #0
 800af8a:	4a68      	ldr	r2, [pc, #416]	@ (800b12c <_dtoa_r+0x614>)
 800af8c:	f001 000f 	and.w	r0, r1, #15
 800af90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800af94:	ed92 7b00 	vldr	d7, [r2]
 800af98:	ee28 7b07 	vmul.f64	d7, d8, d7
 800af9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afa0:	4863      	ldr	r0, [pc, #396]	@ (800b130 <_dtoa_r+0x618>)
 800afa2:	1109      	asrs	r1, r1, #4
 800afa4:	2400      	movs	r4, #0
 800afa6:	2202      	movs	r2, #2
 800afa8:	b929      	cbnz	r1, 800afb6 <_dtoa_r+0x49e>
 800afaa:	2c00      	cmp	r4, #0
 800afac:	f43f af49 	beq.w	800ae42 <_dtoa_r+0x32a>
 800afb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afb4:	e745      	b.n	800ae42 <_dtoa_r+0x32a>
 800afb6:	07ce      	lsls	r6, r1, #31
 800afb8:	d505      	bpl.n	800afc6 <_dtoa_r+0x4ae>
 800afba:	ed90 6b00 	vldr	d6, [r0]
 800afbe:	3201      	adds	r2, #1
 800afc0:	2401      	movs	r4, #1
 800afc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afc6:	1049      	asrs	r1, r1, #1
 800afc8:	3008      	adds	r0, #8
 800afca:	e7ed      	b.n	800afa8 <_dtoa_r+0x490>
 800afcc:	2202      	movs	r2, #2
 800afce:	e738      	b.n	800ae42 <_dtoa_r+0x32a>
 800afd0:	f8cd 8010 	str.w	r8, [sp, #16]
 800afd4:	4654      	mov	r4, sl
 800afd6:	e754      	b.n	800ae82 <_dtoa_r+0x36a>
 800afd8:	4a54      	ldr	r2, [pc, #336]	@ (800b12c <_dtoa_r+0x614>)
 800afda:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800afde:	ed12 4b02 	vldr	d4, [r2, #-8]
 800afe2:	9a08      	ldr	r2, [sp, #32]
 800afe4:	ec41 0b17 	vmov	d7, r0, r1
 800afe8:	443c      	add	r4, r7
 800afea:	b34a      	cbz	r2, 800b040 <_dtoa_r+0x528>
 800afec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aff0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aff4:	463e      	mov	r6, r7
 800aff6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800affa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800affe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b002:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b006:	ee14 2a90 	vmov	r2, s9
 800b00a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b00e:	3230      	adds	r2, #48	@ 0x30
 800b010:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	f806 2b01 	strb.w	r2, [r6], #1
 800b020:	d438      	bmi.n	800b094 <_dtoa_r+0x57c>
 800b022:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b026:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02e:	d462      	bmi.n	800b0f6 <_dtoa_r+0x5de>
 800b030:	42a6      	cmp	r6, r4
 800b032:	f43f af4d 	beq.w	800aed0 <_dtoa_r+0x3b8>
 800b036:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b03a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b03e:	e7e0      	b.n	800b002 <_dtoa_r+0x4ea>
 800b040:	4621      	mov	r1, r4
 800b042:	463e      	mov	r6, r7
 800b044:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b048:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b04c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b050:	ee14 2a90 	vmov	r2, s9
 800b054:	3230      	adds	r2, #48	@ 0x30
 800b056:	f806 2b01 	strb.w	r2, [r6], #1
 800b05a:	42a6      	cmp	r6, r4
 800b05c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b060:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b064:	d119      	bne.n	800b09a <_dtoa_r+0x582>
 800b066:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b06a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b06e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b076:	dc3e      	bgt.n	800b0f6 <_dtoa_r+0x5de>
 800b078:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b07c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b084:	f57f af24 	bpl.w	800aed0 <_dtoa_r+0x3b8>
 800b088:	460e      	mov	r6, r1
 800b08a:	3901      	subs	r1, #1
 800b08c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b090:	2b30      	cmp	r3, #48	@ 0x30
 800b092:	d0f9      	beq.n	800b088 <_dtoa_r+0x570>
 800b094:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b098:	e758      	b.n	800af4c <_dtoa_r+0x434>
 800b09a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b09e:	e7d5      	b.n	800b04c <_dtoa_r+0x534>
 800b0a0:	d10b      	bne.n	800b0ba <_dtoa_r+0x5a2>
 800b0a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b0a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b0aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b6:	f2c0 8161 	blt.w	800b37c <_dtoa_r+0x864>
 800b0ba:	2400      	movs	r4, #0
 800b0bc:	4625      	mov	r5, r4
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	463e      	mov	r6, r7
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	f000 fbb9 	bl	800b844 <_Bfree>
 800b0d2:	2d00      	cmp	r5, #0
 800b0d4:	d0de      	beq.n	800b094 <_dtoa_r+0x57c>
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	d005      	beq.n	800b0e8 <_dtoa_r+0x5d0>
 800b0dc:	45a8      	cmp	r8, r5
 800b0de:	d003      	beq.n	800b0e8 <_dtoa_r+0x5d0>
 800b0e0:	4641      	mov	r1, r8
 800b0e2:	4648      	mov	r0, r9
 800b0e4:	f000 fbae 	bl	800b844 <_Bfree>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4648      	mov	r0, r9
 800b0ec:	f000 fbaa 	bl	800b844 <_Bfree>
 800b0f0:	e7d0      	b.n	800b094 <_dtoa_r+0x57c>
 800b0f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b0f6:	4633      	mov	r3, r6
 800b0f8:	461e      	mov	r6, r3
 800b0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0fe:	2a39      	cmp	r2, #57	@ 0x39
 800b100:	d106      	bne.n	800b110 <_dtoa_r+0x5f8>
 800b102:	429f      	cmp	r7, r3
 800b104:	d1f8      	bne.n	800b0f8 <_dtoa_r+0x5e0>
 800b106:	9a04      	ldr	r2, [sp, #16]
 800b108:	3201      	adds	r2, #1
 800b10a:	9204      	str	r2, [sp, #16]
 800b10c:	2230      	movs	r2, #48	@ 0x30
 800b10e:	703a      	strb	r2, [r7, #0]
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	3201      	adds	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	e7bd      	b.n	800b094 <_dtoa_r+0x57c>
 800b118:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b11c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b124:	f47f aeef 	bne.w	800af06 <_dtoa_r+0x3ee>
 800b128:	e710      	b.n	800af4c <_dtoa_r+0x434>
 800b12a:	bf00      	nop
 800b12c:	0800ea00 	.word	0x0800ea00
 800b130:	0800e9d8 	.word	0x0800e9d8
 800b134:	9908      	ldr	r1, [sp, #32]
 800b136:	2900      	cmp	r1, #0
 800b138:	f000 80e3 	beq.w	800b302 <_dtoa_r+0x7ea>
 800b13c:	9907      	ldr	r1, [sp, #28]
 800b13e:	2901      	cmp	r1, #1
 800b140:	f300 80c8 	bgt.w	800b2d4 <_dtoa_r+0x7bc>
 800b144:	2d00      	cmp	r5, #0
 800b146:	f000 80c1 	beq.w	800b2cc <_dtoa_r+0x7b4>
 800b14a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b14e:	9e05      	ldr	r6, [sp, #20]
 800b150:	461c      	mov	r4, r3
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	9b05      	ldr	r3, [sp, #20]
 800b156:	4413      	add	r3, r2
 800b158:	9305      	str	r3, [sp, #20]
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	2101      	movs	r1, #1
 800b15e:	4413      	add	r3, r2
 800b160:	4648      	mov	r0, r9
 800b162:	9306      	str	r3, [sp, #24]
 800b164:	f000 fc6c 	bl	800ba40 <__i2b>
 800b168:	9b04      	ldr	r3, [sp, #16]
 800b16a:	4605      	mov	r5, r0
 800b16c:	b166      	cbz	r6, 800b188 <_dtoa_r+0x670>
 800b16e:	9a06      	ldr	r2, [sp, #24]
 800b170:	2a00      	cmp	r2, #0
 800b172:	dd09      	ble.n	800b188 <_dtoa_r+0x670>
 800b174:	42b2      	cmp	r2, r6
 800b176:	9905      	ldr	r1, [sp, #20]
 800b178:	bfa8      	it	ge
 800b17a:	4632      	movge	r2, r6
 800b17c:	1a89      	subs	r1, r1, r2
 800b17e:	9105      	str	r1, [sp, #20]
 800b180:	9906      	ldr	r1, [sp, #24]
 800b182:	1ab6      	subs	r6, r6, r2
 800b184:	1a8a      	subs	r2, r1, r2
 800b186:	9206      	str	r2, [sp, #24]
 800b188:	b1fb      	cbz	r3, 800b1ca <_dtoa_r+0x6b2>
 800b18a:	9a08      	ldr	r2, [sp, #32]
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	f000 80bc 	beq.w	800b30a <_dtoa_r+0x7f2>
 800b192:	b19c      	cbz	r4, 800b1bc <_dtoa_r+0x6a4>
 800b194:	4629      	mov	r1, r5
 800b196:	4622      	mov	r2, r4
 800b198:	4648      	mov	r0, r9
 800b19a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19c:	f000 fd10 	bl	800bbc0 <__pow5mult>
 800b1a0:	9a01      	ldr	r2, [sp, #4]
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	f000 fc60 	bl	800ba6c <__multiply>
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9004      	str	r0, [sp, #16]
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	f000 fb47 	bl	800b844 <_Bfree>
 800b1b6:	9a04      	ldr	r2, [sp, #16]
 800b1b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ba:	9201      	str	r2, [sp, #4]
 800b1bc:	1b1a      	subs	r2, r3, r4
 800b1be:	d004      	beq.n	800b1ca <_dtoa_r+0x6b2>
 800b1c0:	9901      	ldr	r1, [sp, #4]
 800b1c2:	4648      	mov	r0, r9
 800b1c4:	f000 fcfc 	bl	800bbc0 <__pow5mult>
 800b1c8:	9001      	str	r0, [sp, #4]
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f000 fc37 	bl	800ba40 <__i2b>
 800b1d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 81d0 	beq.w	800b57c <_dtoa_r+0xa64>
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4601      	mov	r1, r0
 800b1e0:	4648      	mov	r0, r9
 800b1e2:	f000 fced 	bl	800bbc0 <__pow5mult>
 800b1e6:	9b07      	ldr	r3, [sp, #28]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	f300 8095 	bgt.w	800b31a <_dtoa_r+0x802>
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f040 808b 	bne.w	800b30e <_dtoa_r+0x7f6>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	f040 8087 	bne.w	800b312 <_dtoa_r+0x7fa>
 800b204:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b208:	0d12      	lsrs	r2, r2, #20
 800b20a:	0512      	lsls	r2, r2, #20
 800b20c:	2a00      	cmp	r2, #0
 800b20e:	f000 8082 	beq.w	800b316 <_dtoa_r+0x7fe>
 800b212:	9b05      	ldr	r3, [sp, #20]
 800b214:	3301      	adds	r3, #1
 800b216:	9305      	str	r3, [sp, #20]
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	3301      	adds	r3, #1
 800b21c:	9306      	str	r3, [sp, #24]
 800b21e:	2301      	movs	r3, #1
 800b220:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 81af 	beq.w	800b588 <_dtoa_r+0xa70>
 800b22a:	6922      	ldr	r2, [r4, #16]
 800b22c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b230:	6910      	ldr	r0, [r2, #16]
 800b232:	f000 fbb9 	bl	800b9a8 <__hi0bits>
 800b236:	f1c0 0020 	rsb	r0, r0, #32
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	4418      	add	r0, r3
 800b23e:	f010 001f 	ands.w	r0, r0, #31
 800b242:	d076      	beq.n	800b332 <_dtoa_r+0x81a>
 800b244:	f1c0 0220 	rsb	r2, r0, #32
 800b248:	2a04      	cmp	r2, #4
 800b24a:	dd69      	ble.n	800b320 <_dtoa_r+0x808>
 800b24c:	9b05      	ldr	r3, [sp, #20]
 800b24e:	f1c0 001c 	rsb	r0, r0, #28
 800b252:	4403      	add	r3, r0
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	4406      	add	r6, r0
 800b25a:	4403      	add	r3, r0
 800b25c:	9306      	str	r3, [sp, #24]
 800b25e:	9b05      	ldr	r3, [sp, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	dd05      	ble.n	800b270 <_dtoa_r+0x758>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	461a      	mov	r2, r3
 800b268:	4648      	mov	r0, r9
 800b26a:	f000 fd03 	bl	800bc74 <__lshift>
 800b26e:	9001      	str	r0, [sp, #4]
 800b270:	9b06      	ldr	r3, [sp, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	dd05      	ble.n	800b282 <_dtoa_r+0x76a>
 800b276:	4621      	mov	r1, r4
 800b278:	461a      	mov	r2, r3
 800b27a:	4648      	mov	r0, r9
 800b27c:	f000 fcfa 	bl	800bc74 <__lshift>
 800b280:	4604      	mov	r4, r0
 800b282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b284:	2b00      	cmp	r3, #0
 800b286:	d056      	beq.n	800b336 <_dtoa_r+0x81e>
 800b288:	9801      	ldr	r0, [sp, #4]
 800b28a:	4621      	mov	r1, r4
 800b28c:	f000 fd5e 	bl	800bd4c <__mcmp>
 800b290:	2800      	cmp	r0, #0
 800b292:	da50      	bge.n	800b336 <_dtoa_r+0x81e>
 800b294:	f108 33ff 	add.w	r3, r8, #4294967295
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	9901      	ldr	r1, [sp, #4]
 800b29c:	2300      	movs	r3, #0
 800b29e:	220a      	movs	r2, #10
 800b2a0:	4648      	mov	r0, r9
 800b2a2:	f000 faf1 	bl	800b888 <__multadd>
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	9001      	str	r0, [sp, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 816e 	beq.w	800b58c <_dtoa_r+0xa74>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	220a      	movs	r2, #10
 800b2b6:	4648      	mov	r0, r9
 800b2b8:	f000 fae6 	bl	800b888 <__multadd>
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	dc64      	bgt.n	800b38e <_dtoa_r+0x876>
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	dc3e      	bgt.n	800b348 <_dtoa_r+0x830>
 800b2ca:	e060      	b.n	800b38e <_dtoa_r+0x876>
 800b2cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b2d2:	e73c      	b.n	800b14e <_dtoa_r+0x636>
 800b2d4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	bfbf      	itttt	lt
 800b2dc:	1ae2      	sublt	r2, r4, r3
 800b2de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b2e0:	189b      	addlt	r3, r3, r2
 800b2e2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b2e4:	bfae      	itee	ge
 800b2e6:	1b1c      	subge	r4, r3, r4
 800b2e8:	4623      	movlt	r3, r4
 800b2ea:	2400      	movlt	r4, #0
 800b2ec:	f1ba 0f00 	cmp.w	sl, #0
 800b2f0:	bfb5      	itete	lt
 800b2f2:	9a05      	ldrlt	r2, [sp, #20]
 800b2f4:	9e05      	ldrge	r6, [sp, #20]
 800b2f6:	eba2 060a 	sublt.w	r6, r2, sl
 800b2fa:	4652      	movge	r2, sl
 800b2fc:	bfb8      	it	lt
 800b2fe:	2200      	movlt	r2, #0
 800b300:	e727      	b.n	800b152 <_dtoa_r+0x63a>
 800b302:	9e05      	ldr	r6, [sp, #20]
 800b304:	9d08      	ldr	r5, [sp, #32]
 800b306:	461c      	mov	r4, r3
 800b308:	e730      	b.n	800b16c <_dtoa_r+0x654>
 800b30a:	461a      	mov	r2, r3
 800b30c:	e758      	b.n	800b1c0 <_dtoa_r+0x6a8>
 800b30e:	2300      	movs	r3, #0
 800b310:	e786      	b.n	800b220 <_dtoa_r+0x708>
 800b312:	9b02      	ldr	r3, [sp, #8]
 800b314:	e784      	b.n	800b220 <_dtoa_r+0x708>
 800b316:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b318:	e783      	b.n	800b222 <_dtoa_r+0x70a>
 800b31a:	2300      	movs	r3, #0
 800b31c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b31e:	e784      	b.n	800b22a <_dtoa_r+0x712>
 800b320:	d09d      	beq.n	800b25e <_dtoa_r+0x746>
 800b322:	9b05      	ldr	r3, [sp, #20]
 800b324:	321c      	adds	r2, #28
 800b326:	4413      	add	r3, r2
 800b328:	9305      	str	r3, [sp, #20]
 800b32a:	9b06      	ldr	r3, [sp, #24]
 800b32c:	4416      	add	r6, r2
 800b32e:	4413      	add	r3, r2
 800b330:	e794      	b.n	800b25c <_dtoa_r+0x744>
 800b332:	4602      	mov	r2, r0
 800b334:	e7f5      	b.n	800b322 <_dtoa_r+0x80a>
 800b336:	f1ba 0f00 	cmp.w	sl, #0
 800b33a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b33e:	46d3      	mov	fp, sl
 800b340:	dc21      	bgt.n	800b386 <_dtoa_r+0x86e>
 800b342:	9b07      	ldr	r3, [sp, #28]
 800b344:	2b02      	cmp	r3, #2
 800b346:	dd1e      	ble.n	800b386 <_dtoa_r+0x86e>
 800b348:	f1bb 0f00 	cmp.w	fp, #0
 800b34c:	f47f aeb7 	bne.w	800b0be <_dtoa_r+0x5a6>
 800b350:	4621      	mov	r1, r4
 800b352:	465b      	mov	r3, fp
 800b354:	2205      	movs	r2, #5
 800b356:	4648      	mov	r0, r9
 800b358:	f000 fa96 	bl	800b888 <__multadd>
 800b35c:	4601      	mov	r1, r0
 800b35e:	4604      	mov	r4, r0
 800b360:	9801      	ldr	r0, [sp, #4]
 800b362:	f000 fcf3 	bl	800bd4c <__mcmp>
 800b366:	2800      	cmp	r0, #0
 800b368:	f77f aea9 	ble.w	800b0be <_dtoa_r+0x5a6>
 800b36c:	463e      	mov	r6, r7
 800b36e:	2331      	movs	r3, #49	@ 0x31
 800b370:	f806 3b01 	strb.w	r3, [r6], #1
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	3301      	adds	r3, #1
 800b378:	9304      	str	r3, [sp, #16]
 800b37a:	e6a4      	b.n	800b0c6 <_dtoa_r+0x5ae>
 800b37c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b380:	4654      	mov	r4, sl
 800b382:	4625      	mov	r5, r4
 800b384:	e7f2      	b.n	800b36c <_dtoa_r+0x854>
 800b386:	9b08      	ldr	r3, [sp, #32]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8103 	beq.w	800b594 <_dtoa_r+0xa7c>
 800b38e:	2e00      	cmp	r6, #0
 800b390:	dd05      	ble.n	800b39e <_dtoa_r+0x886>
 800b392:	4629      	mov	r1, r5
 800b394:	4632      	mov	r2, r6
 800b396:	4648      	mov	r0, r9
 800b398:	f000 fc6c 	bl	800bc74 <__lshift>
 800b39c:	4605      	mov	r5, r0
 800b39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d058      	beq.n	800b456 <_dtoa_r+0x93e>
 800b3a4:	6869      	ldr	r1, [r5, #4]
 800b3a6:	4648      	mov	r0, r9
 800b3a8:	f000 fa0c 	bl	800b7c4 <_Balloc>
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	b928      	cbnz	r0, 800b3bc <_dtoa_r+0x8a4>
 800b3b0:	4b82      	ldr	r3, [pc, #520]	@ (800b5bc <_dtoa_r+0xaa4>)
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3b8:	f7ff bbc7 	b.w	800ab4a <_dtoa_r+0x32>
 800b3bc:	692a      	ldr	r2, [r5, #16]
 800b3be:	3202      	adds	r2, #2
 800b3c0:	0092      	lsls	r2, r2, #2
 800b3c2:	f105 010c 	add.w	r1, r5, #12
 800b3c6:	300c      	adds	r0, #12
 800b3c8:	f7ff fb07 	bl	800a9da <memcpy>
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f000 fc4f 	bl	800bc74 <__lshift>
 800b3d6:	1c7b      	adds	r3, r7, #1
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	eb07 030b 	add.w	r3, r7, fp
 800b3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	46a8      	mov	r8, r5
 800b3e8:	9308      	str	r3, [sp, #32]
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	9b05      	ldr	r3, [sp, #20]
 800b3ee:	9801      	ldr	r0, [sp, #4]
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3f6:	f7ff fb05 	bl	800aa04 <quorem>
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	9002      	str	r0, [sp, #8]
 800b3fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b402:	9801      	ldr	r0, [sp, #4]
 800b404:	f000 fca2 	bl	800bd4c <__mcmp>
 800b408:	462a      	mov	r2, r5
 800b40a:	9006      	str	r0, [sp, #24]
 800b40c:	4621      	mov	r1, r4
 800b40e:	4648      	mov	r0, r9
 800b410:	f000 fcb8 	bl	800bd84 <__mdiff>
 800b414:	68c2      	ldr	r2, [r0, #12]
 800b416:	4606      	mov	r6, r0
 800b418:	b9fa      	cbnz	r2, 800b45a <_dtoa_r+0x942>
 800b41a:	4601      	mov	r1, r0
 800b41c:	9801      	ldr	r0, [sp, #4]
 800b41e:	f000 fc95 	bl	800bd4c <__mcmp>
 800b422:	4602      	mov	r2, r0
 800b424:	4631      	mov	r1, r6
 800b426:	4648      	mov	r0, r9
 800b428:	920a      	str	r2, [sp, #40]	@ 0x28
 800b42a:	f000 fa0b 	bl	800b844 <_Bfree>
 800b42e:	9b07      	ldr	r3, [sp, #28]
 800b430:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b432:	9e05      	ldr	r6, [sp, #20]
 800b434:	ea43 0102 	orr.w	r1, r3, r2
 800b438:	9b08      	ldr	r3, [sp, #32]
 800b43a:	4319      	orrs	r1, r3
 800b43c:	d10f      	bne.n	800b45e <_dtoa_r+0x946>
 800b43e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b442:	d028      	beq.n	800b496 <_dtoa_r+0x97e>
 800b444:	9b06      	ldr	r3, [sp, #24]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd02      	ble.n	800b450 <_dtoa_r+0x938>
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b450:	f88b a000 	strb.w	sl, [fp]
 800b454:	e639      	b.n	800b0ca <_dtoa_r+0x5b2>
 800b456:	4628      	mov	r0, r5
 800b458:	e7bd      	b.n	800b3d6 <_dtoa_r+0x8be>
 800b45a:	2201      	movs	r2, #1
 800b45c:	e7e2      	b.n	800b424 <_dtoa_r+0x90c>
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	db04      	blt.n	800b46e <_dtoa_r+0x956>
 800b464:	9907      	ldr	r1, [sp, #28]
 800b466:	430b      	orrs	r3, r1
 800b468:	9908      	ldr	r1, [sp, #32]
 800b46a:	430b      	orrs	r3, r1
 800b46c:	d120      	bne.n	800b4b0 <_dtoa_r+0x998>
 800b46e:	2a00      	cmp	r2, #0
 800b470:	ddee      	ble.n	800b450 <_dtoa_r+0x938>
 800b472:	9901      	ldr	r1, [sp, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	4648      	mov	r0, r9
 800b478:	f000 fbfc 	bl	800bc74 <__lshift>
 800b47c:	4621      	mov	r1, r4
 800b47e:	9001      	str	r0, [sp, #4]
 800b480:	f000 fc64 	bl	800bd4c <__mcmp>
 800b484:	2800      	cmp	r0, #0
 800b486:	dc03      	bgt.n	800b490 <_dtoa_r+0x978>
 800b488:	d1e2      	bne.n	800b450 <_dtoa_r+0x938>
 800b48a:	f01a 0f01 	tst.w	sl, #1
 800b48e:	d0df      	beq.n	800b450 <_dtoa_r+0x938>
 800b490:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b494:	d1d9      	bne.n	800b44a <_dtoa_r+0x932>
 800b496:	2339      	movs	r3, #57	@ 0x39
 800b498:	f88b 3000 	strb.w	r3, [fp]
 800b49c:	4633      	mov	r3, r6
 800b49e:	461e      	mov	r6, r3
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4a6:	2a39      	cmp	r2, #57	@ 0x39
 800b4a8:	d053      	beq.n	800b552 <_dtoa_r+0xa3a>
 800b4aa:	3201      	adds	r2, #1
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	e60c      	b.n	800b0ca <_dtoa_r+0x5b2>
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	dd07      	ble.n	800b4c4 <_dtoa_r+0x9ac>
 800b4b4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b4b8:	d0ed      	beq.n	800b496 <_dtoa_r+0x97e>
 800b4ba:	f10a 0301 	add.w	r3, sl, #1
 800b4be:	f88b 3000 	strb.w	r3, [fp]
 800b4c2:	e602      	b.n	800b0ca <_dtoa_r+0x5b2>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	9a05      	ldr	r2, [sp, #20]
 800b4c8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d029      	beq.n	800b526 <_dtoa_r+0xa0e>
 800b4d2:	9901      	ldr	r1, [sp, #4]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	4648      	mov	r0, r9
 800b4da:	f000 f9d5 	bl	800b888 <__multadd>
 800b4de:	45a8      	cmp	r8, r5
 800b4e0:	9001      	str	r0, [sp, #4]
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	f04f 020a 	mov.w	r2, #10
 800b4ea:	4641      	mov	r1, r8
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	d107      	bne.n	800b500 <_dtoa_r+0x9e8>
 800b4f0:	f000 f9ca 	bl	800b888 <__multadd>
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	9b05      	ldr	r3, [sp, #20]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	e775      	b.n	800b3ec <_dtoa_r+0x8d4>
 800b500:	f000 f9c2 	bl	800b888 <__multadd>
 800b504:	4629      	mov	r1, r5
 800b506:	4680      	mov	r8, r0
 800b508:	2300      	movs	r3, #0
 800b50a:	220a      	movs	r2, #10
 800b50c:	4648      	mov	r0, r9
 800b50e:	f000 f9bb 	bl	800b888 <__multadd>
 800b512:	4605      	mov	r5, r0
 800b514:	e7f0      	b.n	800b4f8 <_dtoa_r+0x9e0>
 800b516:	f1bb 0f00 	cmp.w	fp, #0
 800b51a:	bfcc      	ite	gt
 800b51c:	465e      	movgt	r6, fp
 800b51e:	2601      	movle	r6, #1
 800b520:	443e      	add	r6, r7
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	9901      	ldr	r1, [sp, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	4648      	mov	r0, r9
 800b52c:	f000 fba2 	bl	800bc74 <__lshift>
 800b530:	4621      	mov	r1, r4
 800b532:	9001      	str	r0, [sp, #4]
 800b534:	f000 fc0a 	bl	800bd4c <__mcmp>
 800b538:	2800      	cmp	r0, #0
 800b53a:	dcaf      	bgt.n	800b49c <_dtoa_r+0x984>
 800b53c:	d102      	bne.n	800b544 <_dtoa_r+0xa2c>
 800b53e:	f01a 0f01 	tst.w	sl, #1
 800b542:	d1ab      	bne.n	800b49c <_dtoa_r+0x984>
 800b544:	4633      	mov	r3, r6
 800b546:	461e      	mov	r6, r3
 800b548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b54c:	2a30      	cmp	r2, #48	@ 0x30
 800b54e:	d0fa      	beq.n	800b546 <_dtoa_r+0xa2e>
 800b550:	e5bb      	b.n	800b0ca <_dtoa_r+0x5b2>
 800b552:	429f      	cmp	r7, r3
 800b554:	d1a3      	bne.n	800b49e <_dtoa_r+0x986>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	3301      	adds	r3, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	2331      	movs	r3, #49	@ 0x31
 800b55e:	703b      	strb	r3, [r7, #0]
 800b560:	e5b3      	b.n	800b0ca <_dtoa_r+0x5b2>
 800b562:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b564:	4f16      	ldr	r7, [pc, #88]	@ (800b5c0 <_dtoa_r+0xaa8>)
 800b566:	b11b      	cbz	r3, 800b570 <_dtoa_r+0xa58>
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	4638      	mov	r0, r7
 800b572:	b011      	add	sp, #68	@ 0x44
 800b574:	ecbd 8b02 	vpop	{d8}
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	9b07      	ldr	r3, [sp, #28]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	f77f ae36 	ble.w	800b1f0 <_dtoa_r+0x6d8>
 800b584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b586:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b588:	2001      	movs	r0, #1
 800b58a:	e656      	b.n	800b23a <_dtoa_r+0x722>
 800b58c:	f1bb 0f00 	cmp.w	fp, #0
 800b590:	f77f aed7 	ble.w	800b342 <_dtoa_r+0x82a>
 800b594:	463e      	mov	r6, r7
 800b596:	9801      	ldr	r0, [sp, #4]
 800b598:	4621      	mov	r1, r4
 800b59a:	f7ff fa33 	bl	800aa04 <quorem>
 800b59e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b5a2:	f806 ab01 	strb.w	sl, [r6], #1
 800b5a6:	1bf2      	subs	r2, r6, r7
 800b5a8:	4593      	cmp	fp, r2
 800b5aa:	ddb4      	ble.n	800b516 <_dtoa_r+0x9fe>
 800b5ac:	9901      	ldr	r1, [sp, #4]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	220a      	movs	r2, #10
 800b5b2:	4648      	mov	r0, r9
 800b5b4:	f000 f968 	bl	800b888 <__multadd>
 800b5b8:	9001      	str	r0, [sp, #4]
 800b5ba:	e7ec      	b.n	800b596 <_dtoa_r+0xa7e>
 800b5bc:	0800e961 	.word	0x0800e961
 800b5c0:	0800e8e5 	.word	0x0800e8e5

0800b5c4 <_free_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d041      	beq.n	800b650 <_free_r+0x8c>
 800b5cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5d0:	1f0c      	subs	r4, r1, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	bfb8      	it	lt
 800b5d6:	18e4      	addlt	r4, r4, r3
 800b5d8:	f000 f8e8 	bl	800b7ac <__malloc_lock>
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b654 <_free_r+0x90>)
 800b5de:	6813      	ldr	r3, [r2, #0]
 800b5e0:	b933      	cbnz	r3, 800b5f0 <_free_r+0x2c>
 800b5e2:	6063      	str	r3, [r4, #4]
 800b5e4:	6014      	str	r4, [r2, #0]
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ec:	f000 b8e4 	b.w	800b7b8 <__malloc_unlock>
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	d908      	bls.n	800b606 <_free_r+0x42>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	1821      	adds	r1, r4, r0
 800b5f8:	428b      	cmp	r3, r1
 800b5fa:	bf01      	itttt	eq
 800b5fc:	6819      	ldreq	r1, [r3, #0]
 800b5fe:	685b      	ldreq	r3, [r3, #4]
 800b600:	1809      	addeq	r1, r1, r0
 800b602:	6021      	streq	r1, [r4, #0]
 800b604:	e7ed      	b.n	800b5e2 <_free_r+0x1e>
 800b606:	461a      	mov	r2, r3
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	b10b      	cbz	r3, 800b610 <_free_r+0x4c>
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	d9fa      	bls.n	800b606 <_free_r+0x42>
 800b610:	6811      	ldr	r1, [r2, #0]
 800b612:	1850      	adds	r0, r2, r1
 800b614:	42a0      	cmp	r0, r4
 800b616:	d10b      	bne.n	800b630 <_free_r+0x6c>
 800b618:	6820      	ldr	r0, [r4, #0]
 800b61a:	4401      	add	r1, r0
 800b61c:	1850      	adds	r0, r2, r1
 800b61e:	4283      	cmp	r3, r0
 800b620:	6011      	str	r1, [r2, #0]
 800b622:	d1e0      	bne.n	800b5e6 <_free_r+0x22>
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	6053      	str	r3, [r2, #4]
 800b62a:	4408      	add	r0, r1
 800b62c:	6010      	str	r0, [r2, #0]
 800b62e:	e7da      	b.n	800b5e6 <_free_r+0x22>
 800b630:	d902      	bls.n	800b638 <_free_r+0x74>
 800b632:	230c      	movs	r3, #12
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	e7d6      	b.n	800b5e6 <_free_r+0x22>
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	1821      	adds	r1, r4, r0
 800b63c:	428b      	cmp	r3, r1
 800b63e:	bf04      	itt	eq
 800b640:	6819      	ldreq	r1, [r3, #0]
 800b642:	685b      	ldreq	r3, [r3, #4]
 800b644:	6063      	str	r3, [r4, #4]
 800b646:	bf04      	itt	eq
 800b648:	1809      	addeq	r1, r1, r0
 800b64a:	6021      	streq	r1, [r4, #0]
 800b64c:	6054      	str	r4, [r2, #4]
 800b64e:	e7ca      	b.n	800b5e6 <_free_r+0x22>
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	24000bb8 	.word	0x24000bb8

0800b658 <malloc>:
 800b658:	4b02      	ldr	r3, [pc, #8]	@ (800b664 <malloc+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f000 b825 	b.w	800b6ac <_malloc_r>
 800b662:	bf00      	nop
 800b664:	24000028 	.word	0x24000028

0800b668 <sbrk_aligned>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4e0f      	ldr	r6, [pc, #60]	@ (800b6a8 <sbrk_aligned+0x40>)
 800b66c:	460c      	mov	r4, r1
 800b66e:	6831      	ldr	r1, [r6, #0]
 800b670:	4605      	mov	r5, r0
 800b672:	b911      	cbnz	r1, 800b67a <sbrk_aligned+0x12>
 800b674:	f001 ff7e 	bl	800d574 <_sbrk_r>
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f001 ff79 	bl	800d574 <_sbrk_r>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d103      	bne.n	800b68e <sbrk_aligned+0x26>
 800b686:	f04f 34ff 	mov.w	r4, #4294967295
 800b68a:	4620      	mov	r0, r4
 800b68c:	bd70      	pop	{r4, r5, r6, pc}
 800b68e:	1cc4      	adds	r4, r0, #3
 800b690:	f024 0403 	bic.w	r4, r4, #3
 800b694:	42a0      	cmp	r0, r4
 800b696:	d0f8      	beq.n	800b68a <sbrk_aligned+0x22>
 800b698:	1a21      	subs	r1, r4, r0
 800b69a:	4628      	mov	r0, r5
 800b69c:	f001 ff6a 	bl	800d574 <_sbrk_r>
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	d1f2      	bne.n	800b68a <sbrk_aligned+0x22>
 800b6a4:	e7ef      	b.n	800b686 <sbrk_aligned+0x1e>
 800b6a6:	bf00      	nop
 800b6a8:	24000bb4 	.word	0x24000bb4

0800b6ac <_malloc_r>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	1ccd      	adds	r5, r1, #3
 800b6b2:	f025 0503 	bic.w	r5, r5, #3
 800b6b6:	3508      	adds	r5, #8
 800b6b8:	2d0c      	cmp	r5, #12
 800b6ba:	bf38      	it	cc
 800b6bc:	250c      	movcc	r5, #12
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	db01      	blt.n	800b6c8 <_malloc_r+0x1c>
 800b6c4:	42a9      	cmp	r1, r5
 800b6c6:	d904      	bls.n	800b6d2 <_malloc_r+0x26>
 800b6c8:	230c      	movs	r3, #12
 800b6ca:	6033      	str	r3, [r6, #0]
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7a8 <_malloc_r+0xfc>
 800b6d6:	f000 f869 	bl	800b7ac <__malloc_lock>
 800b6da:	f8d8 3000 	ldr.w	r3, [r8]
 800b6de:	461c      	mov	r4, r3
 800b6e0:	bb44      	cbnz	r4, 800b734 <_malloc_r+0x88>
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ffbf 	bl	800b668 <sbrk_aligned>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	d158      	bne.n	800b7a2 <_malloc_r+0xf6>
 800b6f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b6f4:	4627      	mov	r7, r4
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d143      	bne.n	800b782 <_malloc_r+0xd6>
 800b6fa:	2c00      	cmp	r4, #0
 800b6fc:	d04b      	beq.n	800b796 <_malloc_r+0xea>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	4639      	mov	r1, r7
 800b702:	4630      	mov	r0, r6
 800b704:	eb04 0903 	add.w	r9, r4, r3
 800b708:	f001 ff34 	bl	800d574 <_sbrk_r>
 800b70c:	4581      	cmp	r9, r0
 800b70e:	d142      	bne.n	800b796 <_malloc_r+0xea>
 800b710:	6821      	ldr	r1, [r4, #0]
 800b712:	1a6d      	subs	r5, r5, r1
 800b714:	4629      	mov	r1, r5
 800b716:	4630      	mov	r0, r6
 800b718:	f7ff ffa6 	bl	800b668 <sbrk_aligned>
 800b71c:	3001      	adds	r0, #1
 800b71e:	d03a      	beq.n	800b796 <_malloc_r+0xea>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	442b      	add	r3, r5
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	f8d8 3000 	ldr.w	r3, [r8]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	bb62      	cbnz	r2, 800b788 <_malloc_r+0xdc>
 800b72e:	f8c8 7000 	str.w	r7, [r8]
 800b732:	e00f      	b.n	800b754 <_malloc_r+0xa8>
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	1b52      	subs	r2, r2, r5
 800b738:	d420      	bmi.n	800b77c <_malloc_r+0xd0>
 800b73a:	2a0b      	cmp	r2, #11
 800b73c:	d917      	bls.n	800b76e <_malloc_r+0xc2>
 800b73e:	1961      	adds	r1, r4, r5
 800b740:	42a3      	cmp	r3, r4
 800b742:	6025      	str	r5, [r4, #0]
 800b744:	bf18      	it	ne
 800b746:	6059      	strne	r1, [r3, #4]
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	bf08      	it	eq
 800b74c:	f8c8 1000 	streq.w	r1, [r8]
 800b750:	5162      	str	r2, [r4, r5]
 800b752:	604b      	str	r3, [r1, #4]
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f82f 	bl	800b7b8 <__malloc_unlock>
 800b75a:	f104 000b 	add.w	r0, r4, #11
 800b75e:	1d23      	adds	r3, r4, #4
 800b760:	f020 0007 	bic.w	r0, r0, #7
 800b764:	1ac2      	subs	r2, r0, r3
 800b766:	bf1c      	itt	ne
 800b768:	1a1b      	subne	r3, r3, r0
 800b76a:	50a3      	strne	r3, [r4, r2]
 800b76c:	e7af      	b.n	800b6ce <_malloc_r+0x22>
 800b76e:	6862      	ldr	r2, [r4, #4]
 800b770:	42a3      	cmp	r3, r4
 800b772:	bf0c      	ite	eq
 800b774:	f8c8 2000 	streq.w	r2, [r8]
 800b778:	605a      	strne	r2, [r3, #4]
 800b77a:	e7eb      	b.n	800b754 <_malloc_r+0xa8>
 800b77c:	4623      	mov	r3, r4
 800b77e:	6864      	ldr	r4, [r4, #4]
 800b780:	e7ae      	b.n	800b6e0 <_malloc_r+0x34>
 800b782:	463c      	mov	r4, r7
 800b784:	687f      	ldr	r7, [r7, #4]
 800b786:	e7b6      	b.n	800b6f6 <_malloc_r+0x4a>
 800b788:	461a      	mov	r2, r3
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d1fb      	bne.n	800b788 <_malloc_r+0xdc>
 800b790:	2300      	movs	r3, #0
 800b792:	6053      	str	r3, [r2, #4]
 800b794:	e7de      	b.n	800b754 <_malloc_r+0xa8>
 800b796:	230c      	movs	r3, #12
 800b798:	6033      	str	r3, [r6, #0]
 800b79a:	4630      	mov	r0, r6
 800b79c:	f000 f80c 	bl	800b7b8 <__malloc_unlock>
 800b7a0:	e794      	b.n	800b6cc <_malloc_r+0x20>
 800b7a2:	6005      	str	r5, [r0, #0]
 800b7a4:	e7d6      	b.n	800b754 <_malloc_r+0xa8>
 800b7a6:	bf00      	nop
 800b7a8:	24000bb8 	.word	0x24000bb8

0800b7ac <__malloc_lock>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	@ (800b7b4 <__malloc_lock+0x8>)
 800b7ae:	f7ff b912 	b.w	800a9d6 <__retarget_lock_acquire_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	24000bb0 	.word	0x24000bb0

0800b7b8 <__malloc_unlock>:
 800b7b8:	4801      	ldr	r0, [pc, #4]	@ (800b7c0 <__malloc_unlock+0x8>)
 800b7ba:	f7ff b90d 	b.w	800a9d8 <__retarget_lock_release_recursive>
 800b7be:	bf00      	nop
 800b7c0:	24000bb0 	.word	0x24000bb0

0800b7c4 <_Balloc>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	69c6      	ldr	r6, [r0, #28]
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	b976      	cbnz	r6, 800b7ec <_Balloc+0x28>
 800b7ce:	2010      	movs	r0, #16
 800b7d0:	f7ff ff42 	bl	800b658 <malloc>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	61e0      	str	r0, [r4, #28]
 800b7d8:	b920      	cbnz	r0, 800b7e4 <_Balloc+0x20>
 800b7da:	4b18      	ldr	r3, [pc, #96]	@ (800b83c <_Balloc+0x78>)
 800b7dc:	4818      	ldr	r0, [pc, #96]	@ (800b840 <_Balloc+0x7c>)
 800b7de:	216b      	movs	r1, #107	@ 0x6b
 800b7e0:	f001 fee2 	bl	800d5a8 <__assert_func>
 800b7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7e8:	6006      	str	r6, [r0, #0]
 800b7ea:	60c6      	str	r6, [r0, #12]
 800b7ec:	69e6      	ldr	r6, [r4, #28]
 800b7ee:	68f3      	ldr	r3, [r6, #12]
 800b7f0:	b183      	cbz	r3, 800b814 <_Balloc+0x50>
 800b7f2:	69e3      	ldr	r3, [r4, #28]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7fa:	b9b8      	cbnz	r0, 800b82c <_Balloc+0x68>
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b802:	1d72      	adds	r2, r6, #5
 800b804:	0092      	lsls	r2, r2, #2
 800b806:	4620      	mov	r0, r4
 800b808:	f001 feec 	bl	800d5e4 <_calloc_r>
 800b80c:	b160      	cbz	r0, 800b828 <_Balloc+0x64>
 800b80e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b812:	e00e      	b.n	800b832 <_Balloc+0x6e>
 800b814:	2221      	movs	r2, #33	@ 0x21
 800b816:	2104      	movs	r1, #4
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 fee3 	bl	800d5e4 <_calloc_r>
 800b81e:	69e3      	ldr	r3, [r4, #28]
 800b820:	60f0      	str	r0, [r6, #12]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e4      	bne.n	800b7f2 <_Balloc+0x2e>
 800b828:	2000      	movs	r0, #0
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	6802      	ldr	r2, [r0, #0]
 800b82e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b832:	2300      	movs	r3, #0
 800b834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b838:	e7f7      	b.n	800b82a <_Balloc+0x66>
 800b83a:	bf00      	nop
 800b83c:	0800e8f2 	.word	0x0800e8f2
 800b840:	0800e972 	.word	0x0800e972

0800b844 <_Bfree>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	69c6      	ldr	r6, [r0, #28]
 800b848:	4605      	mov	r5, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	b976      	cbnz	r6, 800b86c <_Bfree+0x28>
 800b84e:	2010      	movs	r0, #16
 800b850:	f7ff ff02 	bl	800b658 <malloc>
 800b854:	4602      	mov	r2, r0
 800b856:	61e8      	str	r0, [r5, #28]
 800b858:	b920      	cbnz	r0, 800b864 <_Bfree+0x20>
 800b85a:	4b09      	ldr	r3, [pc, #36]	@ (800b880 <_Bfree+0x3c>)
 800b85c:	4809      	ldr	r0, [pc, #36]	@ (800b884 <_Bfree+0x40>)
 800b85e:	218f      	movs	r1, #143	@ 0x8f
 800b860:	f001 fea2 	bl	800d5a8 <__assert_func>
 800b864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b868:	6006      	str	r6, [r0, #0]
 800b86a:	60c6      	str	r6, [r0, #12]
 800b86c:	b13c      	cbz	r4, 800b87e <_Bfree+0x3a>
 800b86e:	69eb      	ldr	r3, [r5, #28]
 800b870:	6862      	ldr	r2, [r4, #4]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b878:	6021      	str	r1, [r4, #0]
 800b87a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	0800e8f2 	.word	0x0800e8f2
 800b884:	0800e972 	.word	0x0800e972

0800b888 <__multadd>:
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	690d      	ldr	r5, [r1, #16]
 800b88e:	4607      	mov	r7, r0
 800b890:	460c      	mov	r4, r1
 800b892:	461e      	mov	r6, r3
 800b894:	f101 0c14 	add.w	ip, r1, #20
 800b898:	2000      	movs	r0, #0
 800b89a:	f8dc 3000 	ldr.w	r3, [ip]
 800b89e:	b299      	uxth	r1, r3
 800b8a0:	fb02 6101 	mla	r1, r2, r1, r6
 800b8a4:	0c1e      	lsrs	r6, r3, #16
 800b8a6:	0c0b      	lsrs	r3, r1, #16
 800b8a8:	fb02 3306 	mla	r3, r2, r6, r3
 800b8ac:	b289      	uxth	r1, r1
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8b4:	4285      	cmp	r5, r0
 800b8b6:	f84c 1b04 	str.w	r1, [ip], #4
 800b8ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8be:	dcec      	bgt.n	800b89a <__multadd+0x12>
 800b8c0:	b30e      	cbz	r6, 800b906 <__multadd+0x7e>
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	42ab      	cmp	r3, r5
 800b8c6:	dc19      	bgt.n	800b8fc <__multadd+0x74>
 800b8c8:	6861      	ldr	r1, [r4, #4]
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	3101      	adds	r1, #1
 800b8ce:	f7ff ff79 	bl	800b7c4 <_Balloc>
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	b928      	cbnz	r0, 800b8e2 <__multadd+0x5a>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b90c <__multadd+0x84>)
 800b8da:	480d      	ldr	r0, [pc, #52]	@ (800b910 <__multadd+0x88>)
 800b8dc:	21ba      	movs	r1, #186	@ 0xba
 800b8de:	f001 fe63 	bl	800d5a8 <__assert_func>
 800b8e2:	6922      	ldr	r2, [r4, #16]
 800b8e4:	3202      	adds	r2, #2
 800b8e6:	f104 010c 	add.w	r1, r4, #12
 800b8ea:	0092      	lsls	r2, r2, #2
 800b8ec:	300c      	adds	r0, #12
 800b8ee:	f7ff f874 	bl	800a9da <memcpy>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	f7ff ffa5 	bl	800b844 <_Bfree>
 800b8fa:	4644      	mov	r4, r8
 800b8fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b900:	3501      	adds	r5, #1
 800b902:	615e      	str	r6, [r3, #20]
 800b904:	6125      	str	r5, [r4, #16]
 800b906:	4620      	mov	r0, r4
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90c:	0800e961 	.word	0x0800e961
 800b910:	0800e972 	.word	0x0800e972

0800b914 <__s2b>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	460c      	mov	r4, r1
 800b91a:	4615      	mov	r5, r2
 800b91c:	461f      	mov	r7, r3
 800b91e:	2209      	movs	r2, #9
 800b920:	3308      	adds	r3, #8
 800b922:	4606      	mov	r6, r0
 800b924:	fb93 f3f2 	sdiv	r3, r3, r2
 800b928:	2100      	movs	r1, #0
 800b92a:	2201      	movs	r2, #1
 800b92c:	429a      	cmp	r2, r3
 800b92e:	db09      	blt.n	800b944 <__s2b+0x30>
 800b930:	4630      	mov	r0, r6
 800b932:	f7ff ff47 	bl	800b7c4 <_Balloc>
 800b936:	b940      	cbnz	r0, 800b94a <__s2b+0x36>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b19      	ldr	r3, [pc, #100]	@ (800b9a0 <__s2b+0x8c>)
 800b93c:	4819      	ldr	r0, [pc, #100]	@ (800b9a4 <__s2b+0x90>)
 800b93e:	21d3      	movs	r1, #211	@ 0xd3
 800b940:	f001 fe32 	bl	800d5a8 <__assert_func>
 800b944:	0052      	lsls	r2, r2, #1
 800b946:	3101      	adds	r1, #1
 800b948:	e7f0      	b.n	800b92c <__s2b+0x18>
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	6143      	str	r3, [r0, #20]
 800b94e:	2d09      	cmp	r5, #9
 800b950:	f04f 0301 	mov.w	r3, #1
 800b954:	6103      	str	r3, [r0, #16]
 800b956:	dd16      	ble.n	800b986 <__s2b+0x72>
 800b958:	f104 0909 	add.w	r9, r4, #9
 800b95c:	46c8      	mov	r8, r9
 800b95e:	442c      	add	r4, r5
 800b960:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b964:	4601      	mov	r1, r0
 800b966:	3b30      	subs	r3, #48	@ 0x30
 800b968:	220a      	movs	r2, #10
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff8c 	bl	800b888 <__multadd>
 800b970:	45a0      	cmp	r8, r4
 800b972:	d1f5      	bne.n	800b960 <__s2b+0x4c>
 800b974:	f1a5 0408 	sub.w	r4, r5, #8
 800b978:	444c      	add	r4, r9
 800b97a:	1b2d      	subs	r5, r5, r4
 800b97c:	1963      	adds	r3, r4, r5
 800b97e:	42bb      	cmp	r3, r7
 800b980:	db04      	blt.n	800b98c <__s2b+0x78>
 800b982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b986:	340a      	adds	r4, #10
 800b988:	2509      	movs	r5, #9
 800b98a:	e7f6      	b.n	800b97a <__s2b+0x66>
 800b98c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b990:	4601      	mov	r1, r0
 800b992:	3b30      	subs	r3, #48	@ 0x30
 800b994:	220a      	movs	r2, #10
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff ff76 	bl	800b888 <__multadd>
 800b99c:	e7ee      	b.n	800b97c <__s2b+0x68>
 800b99e:	bf00      	nop
 800b9a0:	0800e961 	.word	0x0800e961
 800b9a4:	0800e972 	.word	0x0800e972

0800b9a8 <__hi0bits>:
 800b9a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	bf36      	itet	cc
 800b9b0:	0403      	lslcc	r3, r0, #16
 800b9b2:	2000      	movcs	r0, #0
 800b9b4:	2010      	movcc	r0, #16
 800b9b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ba:	bf3c      	itt	cc
 800b9bc:	021b      	lslcc	r3, r3, #8
 800b9be:	3008      	addcc	r0, #8
 800b9c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9c4:	bf3c      	itt	cc
 800b9c6:	011b      	lslcc	r3, r3, #4
 800b9c8:	3004      	addcc	r0, #4
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ce:	bf3c      	itt	cc
 800b9d0:	009b      	lslcc	r3, r3, #2
 800b9d2:	3002      	addcc	r0, #2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	db05      	blt.n	800b9e4 <__hi0bits+0x3c>
 800b9d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9dc:	f100 0001 	add.w	r0, r0, #1
 800b9e0:	bf08      	it	eq
 800b9e2:	2020      	moveq	r0, #32
 800b9e4:	4770      	bx	lr

0800b9e6 <__lo0bits>:
 800b9e6:	6803      	ldr	r3, [r0, #0]
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	f013 0007 	ands.w	r0, r3, #7
 800b9ee:	d00b      	beq.n	800ba08 <__lo0bits+0x22>
 800b9f0:	07d9      	lsls	r1, r3, #31
 800b9f2:	d421      	bmi.n	800ba38 <__lo0bits+0x52>
 800b9f4:	0798      	lsls	r0, r3, #30
 800b9f6:	bf49      	itett	mi
 800b9f8:	085b      	lsrmi	r3, r3, #1
 800b9fa:	089b      	lsrpl	r3, r3, #2
 800b9fc:	2001      	movmi	r0, #1
 800b9fe:	6013      	strmi	r3, [r2, #0]
 800ba00:	bf5c      	itt	pl
 800ba02:	6013      	strpl	r3, [r2, #0]
 800ba04:	2002      	movpl	r0, #2
 800ba06:	4770      	bx	lr
 800ba08:	b299      	uxth	r1, r3
 800ba0a:	b909      	cbnz	r1, 800ba10 <__lo0bits+0x2a>
 800ba0c:	0c1b      	lsrs	r3, r3, #16
 800ba0e:	2010      	movs	r0, #16
 800ba10:	b2d9      	uxtb	r1, r3
 800ba12:	b909      	cbnz	r1, 800ba18 <__lo0bits+0x32>
 800ba14:	3008      	adds	r0, #8
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	0719      	lsls	r1, r3, #28
 800ba1a:	bf04      	itt	eq
 800ba1c:	091b      	lsreq	r3, r3, #4
 800ba1e:	3004      	addeq	r0, #4
 800ba20:	0799      	lsls	r1, r3, #30
 800ba22:	bf04      	itt	eq
 800ba24:	089b      	lsreq	r3, r3, #2
 800ba26:	3002      	addeq	r0, #2
 800ba28:	07d9      	lsls	r1, r3, #31
 800ba2a:	d403      	bmi.n	800ba34 <__lo0bits+0x4e>
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	f100 0001 	add.w	r0, r0, #1
 800ba32:	d003      	beq.n	800ba3c <__lo0bits+0x56>
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	4770      	bx	lr
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4770      	bx	lr
 800ba3c:	2020      	movs	r0, #32
 800ba3e:	4770      	bx	lr

0800ba40 <__i2b>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	460c      	mov	r4, r1
 800ba44:	2101      	movs	r1, #1
 800ba46:	f7ff febd 	bl	800b7c4 <_Balloc>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	b928      	cbnz	r0, 800ba5a <__i2b+0x1a>
 800ba4e:	4b05      	ldr	r3, [pc, #20]	@ (800ba64 <__i2b+0x24>)
 800ba50:	4805      	ldr	r0, [pc, #20]	@ (800ba68 <__i2b+0x28>)
 800ba52:	f240 1145 	movw	r1, #325	@ 0x145
 800ba56:	f001 fda7 	bl	800d5a8 <__assert_func>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	6144      	str	r4, [r0, #20]
 800ba5e:	6103      	str	r3, [r0, #16]
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0800e961 	.word	0x0800e961
 800ba68:	0800e972 	.word	0x0800e972

0800ba6c <__multiply>:
 800ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	4614      	mov	r4, r2
 800ba72:	690a      	ldr	r2, [r1, #16]
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	bfa8      	it	ge
 800ba7a:	4623      	movge	r3, r4
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	bfa4      	itt	ge
 800ba80:	460c      	movge	r4, r1
 800ba82:	461f      	movge	r7, r3
 800ba84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	6861      	ldr	r1, [r4, #4]
 800ba90:	eb0a 0609 	add.w	r6, sl, r9
 800ba94:	42b3      	cmp	r3, r6
 800ba96:	b085      	sub	sp, #20
 800ba98:	bfb8      	it	lt
 800ba9a:	3101      	addlt	r1, #1
 800ba9c:	f7ff fe92 	bl	800b7c4 <_Balloc>
 800baa0:	b930      	cbnz	r0, 800bab0 <__multiply+0x44>
 800baa2:	4602      	mov	r2, r0
 800baa4:	4b44      	ldr	r3, [pc, #272]	@ (800bbb8 <__multiply+0x14c>)
 800baa6:	4845      	ldr	r0, [pc, #276]	@ (800bbbc <__multiply+0x150>)
 800baa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baac:	f001 fd7c 	bl	800d5a8 <__assert_func>
 800bab0:	f100 0514 	add.w	r5, r0, #20
 800bab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bab8:	462b      	mov	r3, r5
 800baba:	2200      	movs	r2, #0
 800babc:	4543      	cmp	r3, r8
 800babe:	d321      	bcc.n	800bb04 <__multiply+0x98>
 800bac0:	f107 0114 	add.w	r1, r7, #20
 800bac4:	f104 0214 	add.w	r2, r4, #20
 800bac8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bacc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bad0:	9302      	str	r3, [sp, #8]
 800bad2:	1b13      	subs	r3, r2, r4
 800bad4:	3b15      	subs	r3, #21
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	3304      	adds	r3, #4
 800badc:	f104 0715 	add.w	r7, r4, #21
 800bae0:	42ba      	cmp	r2, r7
 800bae2:	bf38      	it	cc
 800bae4:	2304      	movcc	r3, #4
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	9b02      	ldr	r3, [sp, #8]
 800baea:	9103      	str	r1, [sp, #12]
 800baec:	428b      	cmp	r3, r1
 800baee:	d80c      	bhi.n	800bb0a <__multiply+0x9e>
 800baf0:	2e00      	cmp	r6, #0
 800baf2:	dd03      	ble.n	800bafc <__multiply+0x90>
 800baf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d05b      	beq.n	800bbb4 <__multiply+0x148>
 800bafc:	6106      	str	r6, [r0, #16]
 800bafe:	b005      	add	sp, #20
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	f843 2b04 	str.w	r2, [r3], #4
 800bb08:	e7d8      	b.n	800babc <__multiply+0x50>
 800bb0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb0e:	f1ba 0f00 	cmp.w	sl, #0
 800bb12:	d024      	beq.n	800bb5e <__multiply+0xf2>
 800bb14:	f104 0e14 	add.w	lr, r4, #20
 800bb18:	46a9      	mov	r9, r5
 800bb1a:	f04f 0c00 	mov.w	ip, #0
 800bb1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb22:	f8d9 3000 	ldr.w	r3, [r9]
 800bb26:	fa1f fb87 	uxth.w	fp, r7
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb34:	f8d9 7000 	ldr.w	r7, [r9]
 800bb38:	4463      	add	r3, ip
 800bb3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb4c:	4572      	cmp	r2, lr
 800bb4e:	f849 3b04 	str.w	r3, [r9], #4
 800bb52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb56:	d8e2      	bhi.n	800bb1e <__multiply+0xb2>
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	f845 c003 	str.w	ip, [r5, r3]
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb64:	3104      	adds	r1, #4
 800bb66:	f1b9 0f00 	cmp.w	r9, #0
 800bb6a:	d021      	beq.n	800bbb0 <__multiply+0x144>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	f104 0c14 	add.w	ip, r4, #20
 800bb72:	46ae      	mov	lr, r5
 800bb74:	f04f 0a00 	mov.w	sl, #0
 800bb78:	f8bc b000 	ldrh.w	fp, [ip]
 800bb7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb80:	fb09 770b 	mla	r7, r9, fp, r7
 800bb84:	4457      	add	r7, sl
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb8c:	f84e 3b04 	str.w	r3, [lr], #4
 800bb90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb98:	f8be 3000 	ldrh.w	r3, [lr]
 800bb9c:	fb09 330a 	mla	r3, r9, sl, r3
 800bba0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bba4:	4562      	cmp	r2, ip
 800bba6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbaa:	d8e5      	bhi.n	800bb78 <__multiply+0x10c>
 800bbac:	9f01      	ldr	r7, [sp, #4]
 800bbae:	51eb      	str	r3, [r5, r7]
 800bbb0:	3504      	adds	r5, #4
 800bbb2:	e799      	b.n	800bae8 <__multiply+0x7c>
 800bbb4:	3e01      	subs	r6, #1
 800bbb6:	e79b      	b.n	800baf0 <__multiply+0x84>
 800bbb8:	0800e961 	.word	0x0800e961
 800bbbc:	0800e972 	.word	0x0800e972

0800bbc0 <__pow5mult>:
 800bbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc4:	4615      	mov	r5, r2
 800bbc6:	f012 0203 	ands.w	r2, r2, #3
 800bbca:	4607      	mov	r7, r0
 800bbcc:	460e      	mov	r6, r1
 800bbce:	d007      	beq.n	800bbe0 <__pow5mult+0x20>
 800bbd0:	4c25      	ldr	r4, [pc, #148]	@ (800bc68 <__pow5mult+0xa8>)
 800bbd2:	3a01      	subs	r2, #1
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbda:	f7ff fe55 	bl	800b888 <__multadd>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	10ad      	asrs	r5, r5, #2
 800bbe2:	d03d      	beq.n	800bc60 <__pow5mult+0xa0>
 800bbe4:	69fc      	ldr	r4, [r7, #28]
 800bbe6:	b97c      	cbnz	r4, 800bc08 <__pow5mult+0x48>
 800bbe8:	2010      	movs	r0, #16
 800bbea:	f7ff fd35 	bl	800b658 <malloc>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	61f8      	str	r0, [r7, #28]
 800bbf2:	b928      	cbnz	r0, 800bc00 <__pow5mult+0x40>
 800bbf4:	4b1d      	ldr	r3, [pc, #116]	@ (800bc6c <__pow5mult+0xac>)
 800bbf6:	481e      	ldr	r0, [pc, #120]	@ (800bc70 <__pow5mult+0xb0>)
 800bbf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbfc:	f001 fcd4 	bl	800d5a8 <__assert_func>
 800bc00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc04:	6004      	str	r4, [r0, #0]
 800bc06:	60c4      	str	r4, [r0, #12]
 800bc08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc10:	b94c      	cbnz	r4, 800bc26 <__pow5mult+0x66>
 800bc12:	f240 2171 	movw	r1, #625	@ 0x271
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7ff ff12 	bl	800ba40 <__i2b>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc22:	4604      	mov	r4, r0
 800bc24:	6003      	str	r3, [r0, #0]
 800bc26:	f04f 0900 	mov.w	r9, #0
 800bc2a:	07eb      	lsls	r3, r5, #31
 800bc2c:	d50a      	bpl.n	800bc44 <__pow5mult+0x84>
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4622      	mov	r2, r4
 800bc32:	4638      	mov	r0, r7
 800bc34:	f7ff ff1a 	bl	800ba6c <__multiply>
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4680      	mov	r8, r0
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f7ff fe01 	bl	800b844 <_Bfree>
 800bc42:	4646      	mov	r6, r8
 800bc44:	106d      	asrs	r5, r5, #1
 800bc46:	d00b      	beq.n	800bc60 <__pow5mult+0xa0>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	b938      	cbnz	r0, 800bc5c <__pow5mult+0x9c>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff ff0b 	bl	800ba6c <__multiply>
 800bc56:	6020      	str	r0, [r4, #0]
 800bc58:	f8c0 9000 	str.w	r9, [r0]
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	e7e4      	b.n	800bc2a <__pow5mult+0x6a>
 800bc60:	4630      	mov	r0, r6
 800bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc66:	bf00      	nop
 800bc68:	0800e9cc 	.word	0x0800e9cc
 800bc6c:	0800e8f2 	.word	0x0800e8f2
 800bc70:	0800e972 	.word	0x0800e972

0800bc74 <__lshift>:
 800bc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc78:	460c      	mov	r4, r1
 800bc7a:	6849      	ldr	r1, [r1, #4]
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	4607      	mov	r7, r0
 800bc86:	4691      	mov	r9, r2
 800bc88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc8c:	f108 0601 	add.w	r6, r8, #1
 800bc90:	42b3      	cmp	r3, r6
 800bc92:	db0b      	blt.n	800bcac <__lshift+0x38>
 800bc94:	4638      	mov	r0, r7
 800bc96:	f7ff fd95 	bl	800b7c4 <_Balloc>
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	b948      	cbnz	r0, 800bcb2 <__lshift+0x3e>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	4b28      	ldr	r3, [pc, #160]	@ (800bd44 <__lshift+0xd0>)
 800bca2:	4829      	ldr	r0, [pc, #164]	@ (800bd48 <__lshift+0xd4>)
 800bca4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bca8:	f001 fc7e 	bl	800d5a8 <__assert_func>
 800bcac:	3101      	adds	r1, #1
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	e7ee      	b.n	800bc90 <__lshift+0x1c>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f100 0114 	add.w	r1, r0, #20
 800bcb8:	f100 0210 	add.w	r2, r0, #16
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4553      	cmp	r3, sl
 800bcc0:	db33      	blt.n	800bd2a <__lshift+0xb6>
 800bcc2:	6920      	ldr	r0, [r4, #16]
 800bcc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcc8:	f104 0314 	add.w	r3, r4, #20
 800bccc:	f019 091f 	ands.w	r9, r9, #31
 800bcd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcd8:	d02b      	beq.n	800bd32 <__lshift+0xbe>
 800bcda:	f1c9 0e20 	rsb	lr, r9, #32
 800bcde:	468a      	mov	sl, r1
 800bce0:	2200      	movs	r2, #0
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	fa00 f009 	lsl.w	r0, r0, r9
 800bce8:	4310      	orrs	r0, r2
 800bcea:	f84a 0b04 	str.w	r0, [sl], #4
 800bcee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf2:	459c      	cmp	ip, r3
 800bcf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcf8:	d8f3      	bhi.n	800bce2 <__lshift+0x6e>
 800bcfa:	ebac 0304 	sub.w	r3, ip, r4
 800bcfe:	3b15      	subs	r3, #21
 800bd00:	f023 0303 	bic.w	r3, r3, #3
 800bd04:	3304      	adds	r3, #4
 800bd06:	f104 0015 	add.w	r0, r4, #21
 800bd0a:	4584      	cmp	ip, r0
 800bd0c:	bf38      	it	cc
 800bd0e:	2304      	movcc	r3, #4
 800bd10:	50ca      	str	r2, [r1, r3]
 800bd12:	b10a      	cbz	r2, 800bd18 <__lshift+0xa4>
 800bd14:	f108 0602 	add.w	r6, r8, #2
 800bd18:	3e01      	subs	r6, #1
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	612e      	str	r6, [r5, #16]
 800bd1e:	4621      	mov	r1, r4
 800bd20:	f7ff fd90 	bl	800b844 <_Bfree>
 800bd24:	4628      	mov	r0, r5
 800bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd2e:	3301      	adds	r3, #1
 800bd30:	e7c5      	b.n	800bcbe <__lshift+0x4a>
 800bd32:	3904      	subs	r1, #4
 800bd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd38:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd3c:	459c      	cmp	ip, r3
 800bd3e:	d8f9      	bhi.n	800bd34 <__lshift+0xc0>
 800bd40:	e7ea      	b.n	800bd18 <__lshift+0xa4>
 800bd42:	bf00      	nop
 800bd44:	0800e961 	.word	0x0800e961
 800bd48:	0800e972 	.word	0x0800e972

0800bd4c <__mcmp>:
 800bd4c:	690a      	ldr	r2, [r1, #16]
 800bd4e:	4603      	mov	r3, r0
 800bd50:	6900      	ldr	r0, [r0, #16]
 800bd52:	1a80      	subs	r0, r0, r2
 800bd54:	b530      	push	{r4, r5, lr}
 800bd56:	d10e      	bne.n	800bd76 <__mcmp+0x2a>
 800bd58:	3314      	adds	r3, #20
 800bd5a:	3114      	adds	r1, #20
 800bd5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd6c:	4295      	cmp	r5, r2
 800bd6e:	d003      	beq.n	800bd78 <__mcmp+0x2c>
 800bd70:	d205      	bcs.n	800bd7e <__mcmp+0x32>
 800bd72:	f04f 30ff 	mov.w	r0, #4294967295
 800bd76:	bd30      	pop	{r4, r5, pc}
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	d3f3      	bcc.n	800bd64 <__mcmp+0x18>
 800bd7c:	e7fb      	b.n	800bd76 <__mcmp+0x2a>
 800bd7e:	2001      	movs	r0, #1
 800bd80:	e7f9      	b.n	800bd76 <__mcmp+0x2a>
	...

0800bd84 <__mdiff>:
 800bd84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	4689      	mov	r9, r1
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	4648      	mov	r0, r9
 800bd90:	4614      	mov	r4, r2
 800bd92:	f7ff ffdb 	bl	800bd4c <__mcmp>
 800bd96:	1e05      	subs	r5, r0, #0
 800bd98:	d112      	bne.n	800bdc0 <__mdiff+0x3c>
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f7ff fd11 	bl	800b7c4 <_Balloc>
 800bda2:	4602      	mov	r2, r0
 800bda4:	b928      	cbnz	r0, 800bdb2 <__mdiff+0x2e>
 800bda6:	4b3f      	ldr	r3, [pc, #252]	@ (800bea4 <__mdiff+0x120>)
 800bda8:	f240 2137 	movw	r1, #567	@ 0x237
 800bdac:	483e      	ldr	r0, [pc, #248]	@ (800bea8 <__mdiff+0x124>)
 800bdae:	f001 fbfb 	bl	800d5a8 <__assert_func>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdb8:	4610      	mov	r0, r2
 800bdba:	b003      	add	sp, #12
 800bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc0:	bfbc      	itt	lt
 800bdc2:	464b      	movlt	r3, r9
 800bdc4:	46a1      	movlt	r9, r4
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdcc:	bfba      	itte	lt
 800bdce:	461c      	movlt	r4, r3
 800bdd0:	2501      	movlt	r5, #1
 800bdd2:	2500      	movge	r5, #0
 800bdd4:	f7ff fcf6 	bl	800b7c4 <_Balloc>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	b918      	cbnz	r0, 800bde4 <__mdiff+0x60>
 800bddc:	4b31      	ldr	r3, [pc, #196]	@ (800bea4 <__mdiff+0x120>)
 800bdde:	f240 2145 	movw	r1, #581	@ 0x245
 800bde2:	e7e3      	b.n	800bdac <__mdiff+0x28>
 800bde4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bde8:	6926      	ldr	r6, [r4, #16]
 800bdea:	60c5      	str	r5, [r0, #12]
 800bdec:	f109 0310 	add.w	r3, r9, #16
 800bdf0:	f109 0514 	add.w	r5, r9, #20
 800bdf4:	f104 0e14 	add.w	lr, r4, #20
 800bdf8:	f100 0b14 	add.w	fp, r0, #20
 800bdfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	46d9      	mov	r9, fp
 800be08:	f04f 0c00 	mov.w	ip, #0
 800be0c:	9b01      	ldr	r3, [sp, #4]
 800be0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	fa1f f38a 	uxth.w	r3, sl
 800be1c:	4619      	mov	r1, r3
 800be1e:	b283      	uxth	r3, r0
 800be20:	1acb      	subs	r3, r1, r3
 800be22:	0c00      	lsrs	r0, r0, #16
 800be24:	4463      	add	r3, ip
 800be26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be2e:	b29b      	uxth	r3, r3
 800be30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be34:	4576      	cmp	r6, lr
 800be36:	f849 3b04 	str.w	r3, [r9], #4
 800be3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be3e:	d8e5      	bhi.n	800be0c <__mdiff+0x88>
 800be40:	1b33      	subs	r3, r6, r4
 800be42:	3b15      	subs	r3, #21
 800be44:	f023 0303 	bic.w	r3, r3, #3
 800be48:	3415      	adds	r4, #21
 800be4a:	3304      	adds	r3, #4
 800be4c:	42a6      	cmp	r6, r4
 800be4e:	bf38      	it	cc
 800be50:	2304      	movcc	r3, #4
 800be52:	441d      	add	r5, r3
 800be54:	445b      	add	r3, fp
 800be56:	461e      	mov	r6, r3
 800be58:	462c      	mov	r4, r5
 800be5a:	4544      	cmp	r4, r8
 800be5c:	d30e      	bcc.n	800be7c <__mdiff+0xf8>
 800be5e:	f108 0103 	add.w	r1, r8, #3
 800be62:	1b49      	subs	r1, r1, r5
 800be64:	f021 0103 	bic.w	r1, r1, #3
 800be68:	3d03      	subs	r5, #3
 800be6a:	45a8      	cmp	r8, r5
 800be6c:	bf38      	it	cc
 800be6e:	2100      	movcc	r1, #0
 800be70:	440b      	add	r3, r1
 800be72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be76:	b191      	cbz	r1, 800be9e <__mdiff+0x11a>
 800be78:	6117      	str	r7, [r2, #16]
 800be7a:	e79d      	b.n	800bdb8 <__mdiff+0x34>
 800be7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800be80:	46e6      	mov	lr, ip
 800be82:	0c08      	lsrs	r0, r1, #16
 800be84:	fa1c fc81 	uxtah	ip, ip, r1
 800be88:	4471      	add	r1, lr
 800be8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be8e:	b289      	uxth	r1, r1
 800be90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be94:	f846 1b04 	str.w	r1, [r6], #4
 800be98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be9c:	e7dd      	b.n	800be5a <__mdiff+0xd6>
 800be9e:	3f01      	subs	r7, #1
 800bea0:	e7e7      	b.n	800be72 <__mdiff+0xee>
 800bea2:	bf00      	nop
 800bea4:	0800e961 	.word	0x0800e961
 800bea8:	0800e972 	.word	0x0800e972

0800beac <__ulp>:
 800beac:	b082      	sub	sp, #8
 800beae:	ed8d 0b00 	vstr	d0, [sp]
 800beb2:	9a01      	ldr	r2, [sp, #4]
 800beb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <__ulp+0x48>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dc08      	bgt.n	800bed2 <__ulp+0x26>
 800bec0:	425b      	negs	r3, r3
 800bec2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bec6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800beca:	da04      	bge.n	800bed6 <__ulp+0x2a>
 800becc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bed0:	4113      	asrs	r3, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	e008      	b.n	800bee8 <__ulp+0x3c>
 800bed6:	f1a2 0314 	sub.w	r3, r2, #20
 800beda:	2b1e      	cmp	r3, #30
 800bedc:	bfda      	itte	le
 800bede:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bee2:	40da      	lsrle	r2, r3
 800bee4:	2201      	movgt	r2, #1
 800bee6:	2300      	movs	r3, #0
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	ec41 0b10 	vmov	d0, r0, r1
 800bef0:	b002      	add	sp, #8
 800bef2:	4770      	bx	lr
 800bef4:	7ff00000 	.word	0x7ff00000

0800bef8 <__b2d>:
 800bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befc:	6906      	ldr	r6, [r0, #16]
 800befe:	f100 0814 	add.w	r8, r0, #20
 800bf02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf06:	1f37      	subs	r7, r6, #4
 800bf08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	f7ff fd4b 	bl	800b9a8 <__hi0bits>
 800bf12:	f1c0 0320 	rsb	r3, r0, #32
 800bf16:	280a      	cmp	r0, #10
 800bf18:	600b      	str	r3, [r1, #0]
 800bf1a:	491b      	ldr	r1, [pc, #108]	@ (800bf88 <__b2d+0x90>)
 800bf1c:	dc15      	bgt.n	800bf4a <__b2d+0x52>
 800bf1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf22:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf26:	45b8      	cmp	r8, r7
 800bf28:	ea43 0501 	orr.w	r5, r3, r1
 800bf2c:	bf34      	ite	cc
 800bf2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf32:	2300      	movcs	r3, #0
 800bf34:	3015      	adds	r0, #21
 800bf36:	fa02 f000 	lsl.w	r0, r2, r0
 800bf3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf3e:	4303      	orrs	r3, r0
 800bf40:	461c      	mov	r4, r3
 800bf42:	ec45 4b10 	vmov	d0, r4, r5
 800bf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4a:	45b8      	cmp	r8, r7
 800bf4c:	bf3a      	itte	cc
 800bf4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf52:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf56:	2300      	movcs	r3, #0
 800bf58:	380b      	subs	r0, #11
 800bf5a:	d012      	beq.n	800bf82 <__b2d+0x8a>
 800bf5c:	f1c0 0120 	rsb	r1, r0, #32
 800bf60:	fa23 f401 	lsr.w	r4, r3, r1
 800bf64:	4082      	lsls	r2, r0
 800bf66:	4322      	orrs	r2, r4
 800bf68:	4547      	cmp	r7, r8
 800bf6a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf6e:	bf8c      	ite	hi
 800bf70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf74:	2200      	movls	r2, #0
 800bf76:	4083      	lsls	r3, r0
 800bf78:	40ca      	lsrs	r2, r1
 800bf7a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	e7de      	b.n	800bf40 <__b2d+0x48>
 800bf82:	ea42 0501 	orr.w	r5, r2, r1
 800bf86:	e7db      	b.n	800bf40 <__b2d+0x48>
 800bf88:	3ff00000 	.word	0x3ff00000

0800bf8c <__d2b>:
 800bf8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf90:	460f      	mov	r7, r1
 800bf92:	2101      	movs	r1, #1
 800bf94:	ec59 8b10 	vmov	r8, r9, d0
 800bf98:	4616      	mov	r6, r2
 800bf9a:	f7ff fc13 	bl	800b7c4 <_Balloc>
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	b930      	cbnz	r0, 800bfb0 <__d2b+0x24>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	4b23      	ldr	r3, [pc, #140]	@ (800c034 <__d2b+0xa8>)
 800bfa6:	4824      	ldr	r0, [pc, #144]	@ (800c038 <__d2b+0xac>)
 800bfa8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfac:	f001 fafc 	bl	800d5a8 <__assert_func>
 800bfb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfb8:	b10d      	cbz	r5, 800bfbe <__d2b+0x32>
 800bfba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	f1b8 0300 	subs.w	r3, r8, #0
 800bfc4:	d023      	beq.n	800c00e <__d2b+0x82>
 800bfc6:	4668      	mov	r0, sp
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	f7ff fd0c 	bl	800b9e6 <__lo0bits>
 800bfce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfd2:	b1d0      	cbz	r0, 800c00a <__d2b+0x7e>
 800bfd4:	f1c0 0320 	rsb	r3, r0, #32
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	40c2      	lsrs	r2, r0
 800bfe0:	6163      	str	r3, [r4, #20]
 800bfe2:	9201      	str	r2, [sp, #4]
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	61a3      	str	r3, [r4, #24]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	bf0c      	ite	eq
 800bfec:	2201      	moveq	r2, #1
 800bfee:	2202      	movne	r2, #2
 800bff0:	6122      	str	r2, [r4, #16]
 800bff2:	b1a5      	cbz	r5, 800c01e <__d2b+0x92>
 800bff4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bff8:	4405      	add	r5, r0
 800bffa:	603d      	str	r5, [r7, #0]
 800bffc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c000:	6030      	str	r0, [r6, #0]
 800c002:	4620      	mov	r0, r4
 800c004:	b003      	add	sp, #12
 800c006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c00a:	6161      	str	r1, [r4, #20]
 800c00c:	e7ea      	b.n	800bfe4 <__d2b+0x58>
 800c00e:	a801      	add	r0, sp, #4
 800c010:	f7ff fce9 	bl	800b9e6 <__lo0bits>
 800c014:	9b01      	ldr	r3, [sp, #4]
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	3020      	adds	r0, #32
 800c01a:	2201      	movs	r2, #1
 800c01c:	e7e8      	b.n	800bff0 <__d2b+0x64>
 800c01e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c022:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c026:	6038      	str	r0, [r7, #0]
 800c028:	6918      	ldr	r0, [r3, #16]
 800c02a:	f7ff fcbd 	bl	800b9a8 <__hi0bits>
 800c02e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c032:	e7e5      	b.n	800c000 <__d2b+0x74>
 800c034:	0800e961 	.word	0x0800e961
 800c038:	0800e972 	.word	0x0800e972

0800c03c <__ratio>:
 800c03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	4688      	mov	r8, r1
 800c042:	4669      	mov	r1, sp
 800c044:	4681      	mov	r9, r0
 800c046:	f7ff ff57 	bl	800bef8 <__b2d>
 800c04a:	a901      	add	r1, sp, #4
 800c04c:	4640      	mov	r0, r8
 800c04e:	ec55 4b10 	vmov	r4, r5, d0
 800c052:	f7ff ff51 	bl	800bef8 <__b2d>
 800c056:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c05a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c064:	1a5b      	subs	r3, r3, r1
 800c066:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c06a:	ec57 6b10 	vmov	r6, r7, d0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfd6      	itet	le
 800c072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c076:	462a      	movgt	r2, r5
 800c078:	463a      	movle	r2, r7
 800c07a:	46ab      	mov	fp, r5
 800c07c:	46a2      	mov	sl, r4
 800c07e:	bfce      	itee	gt
 800c080:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c084:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c088:	ee00 3a90 	vmovle	s1, r3
 800c08c:	ec4b ab17 	vmov	d7, sl, fp
 800c090:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c094:	b003      	add	sp, #12
 800c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c09a <__copybits>:
 800c09a:	3901      	subs	r1, #1
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	1149      	asrs	r1, r1, #5
 800c0a0:	6914      	ldr	r4, [r2, #16]
 800c0a2:	3101      	adds	r1, #1
 800c0a4:	f102 0314 	add.w	r3, r2, #20
 800c0a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0b0:	1f05      	subs	r5, r0, #4
 800c0b2:	42a3      	cmp	r3, r4
 800c0b4:	d30c      	bcc.n	800c0d0 <__copybits+0x36>
 800c0b6:	1aa3      	subs	r3, r4, r2
 800c0b8:	3b11      	subs	r3, #17
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	3211      	adds	r2, #17
 800c0c0:	42a2      	cmp	r2, r4
 800c0c2:	bf88      	it	hi
 800c0c4:	2300      	movhi	r3, #0
 800c0c6:	4418      	add	r0, r3
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4288      	cmp	r0, r1
 800c0cc:	d305      	bcc.n	800c0da <__copybits+0x40>
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0d8:	e7eb      	b.n	800c0b2 <__copybits+0x18>
 800c0da:	f840 3b04 	str.w	r3, [r0], #4
 800c0de:	e7f4      	b.n	800c0ca <__copybits+0x30>

0800c0e0 <__any_on>:
 800c0e0:	f100 0214 	add.w	r2, r0, #20
 800c0e4:	6900      	ldr	r0, [r0, #16]
 800c0e6:	114b      	asrs	r3, r1, #5
 800c0e8:	4298      	cmp	r0, r3
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	db11      	blt.n	800c112 <__any_on+0x32>
 800c0ee:	dd0a      	ble.n	800c106 <__any_on+0x26>
 800c0f0:	f011 011f 	ands.w	r1, r1, #31
 800c0f4:	d007      	beq.n	800c106 <__any_on+0x26>
 800c0f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0fa:	fa24 f001 	lsr.w	r0, r4, r1
 800c0fe:	fa00 f101 	lsl.w	r1, r0, r1
 800c102:	428c      	cmp	r4, r1
 800c104:	d10b      	bne.n	800c11e <__any_on+0x3e>
 800c106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d803      	bhi.n	800c116 <__any_on+0x36>
 800c10e:	2000      	movs	r0, #0
 800c110:	bd10      	pop	{r4, pc}
 800c112:	4603      	mov	r3, r0
 800c114:	e7f7      	b.n	800c106 <__any_on+0x26>
 800c116:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c11a:	2900      	cmp	r1, #0
 800c11c:	d0f5      	beq.n	800c10a <__any_on+0x2a>
 800c11e:	2001      	movs	r0, #1
 800c120:	e7f6      	b.n	800c110 <__any_on+0x30>

0800c122 <sulp>:
 800c122:	b570      	push	{r4, r5, r6, lr}
 800c124:	4604      	mov	r4, r0
 800c126:	460d      	mov	r5, r1
 800c128:	4616      	mov	r6, r2
 800c12a:	ec45 4b10 	vmov	d0, r4, r5
 800c12e:	f7ff febd 	bl	800beac <__ulp>
 800c132:	b17e      	cbz	r6, 800c154 <sulp+0x32>
 800c134:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c138:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd09      	ble.n	800c154 <sulp+0x32>
 800c140:	051b      	lsls	r3, r3, #20
 800c142:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c146:	2000      	movs	r0, #0
 800c148:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c14c:	ec41 0b17 	vmov	d7, r0, r1
 800c150:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c154:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c158 <_strtod_l>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	ed2d 8b0a 	vpush	{d8-d12}
 800c160:	b097      	sub	sp, #92	@ 0x5c
 800c162:	4688      	mov	r8, r1
 800c164:	920e      	str	r2, [sp, #56]	@ 0x38
 800c166:	2200      	movs	r2, #0
 800c168:	9212      	str	r2, [sp, #72]	@ 0x48
 800c16a:	9005      	str	r0, [sp, #20]
 800c16c:	f04f 0a00 	mov.w	sl, #0
 800c170:	f04f 0b00 	mov.w	fp, #0
 800c174:	460a      	mov	r2, r1
 800c176:	9211      	str	r2, [sp, #68]	@ 0x44
 800c178:	7811      	ldrb	r1, [r2, #0]
 800c17a:	292b      	cmp	r1, #43	@ 0x2b
 800c17c:	d04c      	beq.n	800c218 <_strtod_l+0xc0>
 800c17e:	d839      	bhi.n	800c1f4 <_strtod_l+0x9c>
 800c180:	290d      	cmp	r1, #13
 800c182:	d833      	bhi.n	800c1ec <_strtod_l+0x94>
 800c184:	2908      	cmp	r1, #8
 800c186:	d833      	bhi.n	800c1f0 <_strtod_l+0x98>
 800c188:	2900      	cmp	r1, #0
 800c18a:	d03c      	beq.n	800c206 <_strtod_l+0xae>
 800c18c:	2200      	movs	r2, #0
 800c18e:	9208      	str	r2, [sp, #32]
 800c190:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c192:	782a      	ldrb	r2, [r5, #0]
 800c194:	2a30      	cmp	r2, #48	@ 0x30
 800c196:	f040 80b5 	bne.w	800c304 <_strtod_l+0x1ac>
 800c19a:	786a      	ldrb	r2, [r5, #1]
 800c19c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c1a0:	2a58      	cmp	r2, #88	@ 0x58
 800c1a2:	d170      	bne.n	800c286 <_strtod_l+0x12e>
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	9b08      	ldr	r3, [sp, #32]
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	ab12      	add	r3, sp, #72	@ 0x48
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	4a8b      	ldr	r2, [pc, #556]	@ (800c3dc <_strtod_l+0x284>)
 800c1b0:	9805      	ldr	r0, [sp, #20]
 800c1b2:	ab13      	add	r3, sp, #76	@ 0x4c
 800c1b4:	a911      	add	r1, sp, #68	@ 0x44
 800c1b6:	f001 fa91 	bl	800d6dc <__gethex>
 800c1ba:	f010 060f 	ands.w	r6, r0, #15
 800c1be:	4604      	mov	r4, r0
 800c1c0:	d005      	beq.n	800c1ce <_strtod_l+0x76>
 800c1c2:	2e06      	cmp	r6, #6
 800c1c4:	d12a      	bne.n	800c21c <_strtod_l+0xc4>
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	9511      	str	r5, [sp, #68]	@ 0x44
 800c1cc:	9308      	str	r3, [sp, #32]
 800c1ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f040 852f 	bne.w	800cc34 <_strtod_l+0xadc>
 800c1d6:	9b08      	ldr	r3, [sp, #32]
 800c1d8:	ec4b ab10 	vmov	d0, sl, fp
 800c1dc:	b1cb      	cbz	r3, 800c212 <_strtod_l+0xba>
 800c1de:	eeb1 0b40 	vneg.f64	d0, d0
 800c1e2:	b017      	add	sp, #92	@ 0x5c
 800c1e4:	ecbd 8b0a 	vpop	{d8-d12}
 800c1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ec:	2920      	cmp	r1, #32
 800c1ee:	d1cd      	bne.n	800c18c <_strtod_l+0x34>
 800c1f0:	3201      	adds	r2, #1
 800c1f2:	e7c0      	b.n	800c176 <_strtod_l+0x1e>
 800c1f4:	292d      	cmp	r1, #45	@ 0x2d
 800c1f6:	d1c9      	bne.n	800c18c <_strtod_l+0x34>
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	9108      	str	r1, [sp, #32]
 800c1fc:	1c51      	adds	r1, r2, #1
 800c1fe:	9111      	str	r1, [sp, #68]	@ 0x44
 800c200:	7852      	ldrb	r2, [r2, #1]
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1c4      	bne.n	800c190 <_strtod_l+0x38>
 800c206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c208:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f040 850f 	bne.w	800cc30 <_strtod_l+0xad8>
 800c212:	ec4b ab10 	vmov	d0, sl, fp
 800c216:	e7e4      	b.n	800c1e2 <_strtod_l+0x8a>
 800c218:	2100      	movs	r1, #0
 800c21a:	e7ee      	b.n	800c1fa <_strtod_l+0xa2>
 800c21c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c21e:	b13a      	cbz	r2, 800c230 <_strtod_l+0xd8>
 800c220:	2135      	movs	r1, #53	@ 0x35
 800c222:	a814      	add	r0, sp, #80	@ 0x50
 800c224:	f7ff ff39 	bl	800c09a <__copybits>
 800c228:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c22a:	9805      	ldr	r0, [sp, #20]
 800c22c:	f7ff fb0a 	bl	800b844 <_Bfree>
 800c230:	1e73      	subs	r3, r6, #1
 800c232:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c234:	2b04      	cmp	r3, #4
 800c236:	d806      	bhi.n	800c246 <_strtod_l+0xee>
 800c238:	e8df f003 	tbb	[pc, r3]
 800c23c:	201d0314 	.word	0x201d0314
 800c240:	14          	.byte	0x14
 800c241:	00          	.byte	0x00
 800c242:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c246:	05e3      	lsls	r3, r4, #23
 800c248:	bf48      	it	mi
 800c24a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c24e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c252:	0d1b      	lsrs	r3, r3, #20
 800c254:	051b      	lsls	r3, r3, #20
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1b9      	bne.n	800c1ce <_strtod_l+0x76>
 800c25a:	f7fe fb91 	bl	800a980 <__errno>
 800c25e:	2322      	movs	r3, #34	@ 0x22
 800c260:	6003      	str	r3, [r0, #0]
 800c262:	e7b4      	b.n	800c1ce <_strtod_l+0x76>
 800c264:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c26c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c270:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c274:	e7e7      	b.n	800c246 <_strtod_l+0xee>
 800c276:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c3e4 <_strtod_l+0x28c>
 800c27a:	e7e4      	b.n	800c246 <_strtod_l+0xee>
 800c27c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c280:	f04f 3aff 	mov.w	sl, #4294967295
 800c284:	e7df      	b.n	800c246 <_strtod_l+0xee>
 800c286:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c28c:	785b      	ldrb	r3, [r3, #1]
 800c28e:	2b30      	cmp	r3, #48	@ 0x30
 800c290:	d0f9      	beq.n	800c286 <_strtod_l+0x12e>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d09b      	beq.n	800c1ce <_strtod_l+0x76>
 800c296:	2301      	movs	r3, #1
 800c298:	2600      	movs	r6, #0
 800c29a:	9307      	str	r3, [sp, #28]
 800c29c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a0:	46b1      	mov	r9, r6
 800c2a2:	4635      	mov	r5, r6
 800c2a4:	220a      	movs	r2, #10
 800c2a6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c2a8:	7804      	ldrb	r4, [r0, #0]
 800c2aa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c2ae:	b2d9      	uxtb	r1, r3
 800c2b0:	2909      	cmp	r1, #9
 800c2b2:	d929      	bls.n	800c308 <_strtod_l+0x1b0>
 800c2b4:	494a      	ldr	r1, [pc, #296]	@ (800c3e0 <_strtod_l+0x288>)
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f001 f928 	bl	800d50c <strncmp>
 800c2bc:	b378      	cbz	r0, 800c31e <_strtod_l+0x1c6>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	462b      	mov	r3, r5
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	9006      	str	r0, [sp, #24]
 800c2c8:	2a65      	cmp	r2, #101	@ 0x65
 800c2ca:	d001      	beq.n	800c2d0 <_strtod_l+0x178>
 800c2cc:	2a45      	cmp	r2, #69	@ 0x45
 800c2ce:	d117      	bne.n	800c300 <_strtod_l+0x1a8>
 800c2d0:	b91b      	cbnz	r3, 800c2da <_strtod_l+0x182>
 800c2d2:	9b07      	ldr	r3, [sp, #28]
 800c2d4:	4303      	orrs	r3, r0
 800c2d6:	d096      	beq.n	800c206 <_strtod_l+0xae>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c2de:	f108 0201 	add.w	r2, r8, #1
 800c2e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800c2e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c2e8:	2a2b      	cmp	r2, #43	@ 0x2b
 800c2ea:	d06b      	beq.n	800c3c4 <_strtod_l+0x26c>
 800c2ec:	2a2d      	cmp	r2, #45	@ 0x2d
 800c2ee:	d071      	beq.n	800c3d4 <_strtod_l+0x27c>
 800c2f0:	f04f 0e00 	mov.w	lr, #0
 800c2f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c2f8:	2c09      	cmp	r4, #9
 800c2fa:	d979      	bls.n	800c3f0 <_strtod_l+0x298>
 800c2fc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c300:	2400      	movs	r4, #0
 800c302:	e094      	b.n	800c42e <_strtod_l+0x2d6>
 800c304:	2300      	movs	r3, #0
 800c306:	e7c7      	b.n	800c298 <_strtod_l+0x140>
 800c308:	2d08      	cmp	r5, #8
 800c30a:	f100 0001 	add.w	r0, r0, #1
 800c30e:	bfd4      	ite	le
 800c310:	fb02 3909 	mlale	r9, r2, r9, r3
 800c314:	fb02 3606 	mlagt	r6, r2, r6, r3
 800c318:	3501      	adds	r5, #1
 800c31a:	9011      	str	r0, [sp, #68]	@ 0x44
 800c31c:	e7c3      	b.n	800c2a6 <_strtod_l+0x14e>
 800c31e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	9211      	str	r2, [sp, #68]	@ 0x44
 800c324:	785a      	ldrb	r2, [r3, #1]
 800c326:	b375      	cbz	r5, 800c386 <_strtod_l+0x22e>
 800c328:	4607      	mov	r7, r0
 800c32a:	462b      	mov	r3, r5
 800c32c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c330:	2909      	cmp	r1, #9
 800c332:	d913      	bls.n	800c35c <_strtod_l+0x204>
 800c334:	2101      	movs	r1, #1
 800c336:	9106      	str	r1, [sp, #24]
 800c338:	e7c6      	b.n	800c2c8 <_strtod_l+0x170>
 800c33a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c340:	785a      	ldrb	r2, [r3, #1]
 800c342:	3001      	adds	r0, #1
 800c344:	2a30      	cmp	r2, #48	@ 0x30
 800c346:	d0f8      	beq.n	800c33a <_strtod_l+0x1e2>
 800c348:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	f200 8476 	bhi.w	800cc3e <_strtod_l+0xae6>
 800c352:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c354:	930a      	str	r3, [sp, #40]	@ 0x28
 800c356:	4607      	mov	r7, r0
 800c358:	2000      	movs	r0, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	3a30      	subs	r2, #48	@ 0x30
 800c35e:	f100 0101 	add.w	r1, r0, #1
 800c362:	d023      	beq.n	800c3ac <_strtod_l+0x254>
 800c364:	440f      	add	r7, r1
 800c366:	eb00 0c03 	add.w	ip, r0, r3
 800c36a:	4619      	mov	r1, r3
 800c36c:	240a      	movs	r4, #10
 800c36e:	4561      	cmp	r1, ip
 800c370:	d10b      	bne.n	800c38a <_strtod_l+0x232>
 800c372:	1c5c      	adds	r4, r3, #1
 800c374:	4403      	add	r3, r0
 800c376:	2b08      	cmp	r3, #8
 800c378:	4404      	add	r4, r0
 800c37a:	dc11      	bgt.n	800c3a0 <_strtod_l+0x248>
 800c37c:	230a      	movs	r3, #10
 800c37e:	fb03 2909 	mla	r9, r3, r9, r2
 800c382:	2100      	movs	r1, #0
 800c384:	e013      	b.n	800c3ae <_strtod_l+0x256>
 800c386:	4628      	mov	r0, r5
 800c388:	e7dc      	b.n	800c344 <_strtod_l+0x1ec>
 800c38a:	2908      	cmp	r1, #8
 800c38c:	f101 0101 	add.w	r1, r1, #1
 800c390:	dc02      	bgt.n	800c398 <_strtod_l+0x240>
 800c392:	fb04 f909 	mul.w	r9, r4, r9
 800c396:	e7ea      	b.n	800c36e <_strtod_l+0x216>
 800c398:	2910      	cmp	r1, #16
 800c39a:	bfd8      	it	le
 800c39c:	4366      	mulle	r6, r4
 800c39e:	e7e6      	b.n	800c36e <_strtod_l+0x216>
 800c3a0:	2b0f      	cmp	r3, #15
 800c3a2:	dcee      	bgt.n	800c382 <_strtod_l+0x22a>
 800c3a4:	230a      	movs	r3, #10
 800c3a6:	fb03 2606 	mla	r6, r3, r6, r2
 800c3aa:	e7ea      	b.n	800c382 <_strtod_l+0x22a>
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800c3b4:	785a      	ldrb	r2, [r3, #1]
 800c3b6:	4608      	mov	r0, r1
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	e7b7      	b.n	800c32c <_strtod_l+0x1d4>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	2700      	movs	r7, #0
 800c3c0:	9306      	str	r3, [sp, #24]
 800c3c2:	e786      	b.n	800c2d2 <_strtod_l+0x17a>
 800c3c4:	f04f 0e00 	mov.w	lr, #0
 800c3c8:	f108 0202 	add.w	r2, r8, #2
 800c3cc:	9211      	str	r2, [sp, #68]	@ 0x44
 800c3ce:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c3d2:	e78f      	b.n	800c2f4 <_strtod_l+0x19c>
 800c3d4:	f04f 0e01 	mov.w	lr, #1
 800c3d8:	e7f6      	b.n	800c3c8 <_strtod_l+0x270>
 800c3da:	bf00      	nop
 800c3dc:	0800eae0 	.word	0x0800eae0
 800c3e0:	0800eac8 	.word	0x0800eac8
 800c3e4:	7ff00000 	.word	0x7ff00000
 800c3e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3ea:	1c54      	adds	r4, r2, #1
 800c3ec:	9411      	str	r4, [sp, #68]	@ 0x44
 800c3ee:	7852      	ldrb	r2, [r2, #1]
 800c3f0:	2a30      	cmp	r2, #48	@ 0x30
 800c3f2:	d0f9      	beq.n	800c3e8 <_strtod_l+0x290>
 800c3f4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c3f8:	2c08      	cmp	r4, #8
 800c3fa:	d881      	bhi.n	800c300 <_strtod_l+0x1a8>
 800c3fc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c400:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c402:	9209      	str	r2, [sp, #36]	@ 0x24
 800c404:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c406:	1c51      	adds	r1, r2, #1
 800c408:	9111      	str	r1, [sp, #68]	@ 0x44
 800c40a:	7852      	ldrb	r2, [r2, #1]
 800c40c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c410:	2c09      	cmp	r4, #9
 800c412:	d938      	bls.n	800c486 <_strtod_l+0x32e>
 800c414:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c416:	1b0c      	subs	r4, r1, r4
 800c418:	2c08      	cmp	r4, #8
 800c41a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c41e:	dc02      	bgt.n	800c426 <_strtod_l+0x2ce>
 800c420:	4564      	cmp	r4, ip
 800c422:	bfa8      	it	ge
 800c424:	4664      	movge	r4, ip
 800c426:	f1be 0f00 	cmp.w	lr, #0
 800c42a:	d000      	beq.n	800c42e <_strtod_l+0x2d6>
 800c42c:	4264      	negs	r4, r4
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d14e      	bne.n	800c4d0 <_strtod_l+0x378>
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	4318      	orrs	r0, r3
 800c436:	f47f aeca 	bne.w	800c1ce <_strtod_l+0x76>
 800c43a:	9b06      	ldr	r3, [sp, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f47f aee2 	bne.w	800c206 <_strtod_l+0xae>
 800c442:	2a69      	cmp	r2, #105	@ 0x69
 800c444:	d027      	beq.n	800c496 <_strtod_l+0x33e>
 800c446:	dc24      	bgt.n	800c492 <_strtod_l+0x33a>
 800c448:	2a49      	cmp	r2, #73	@ 0x49
 800c44a:	d024      	beq.n	800c496 <_strtod_l+0x33e>
 800c44c:	2a4e      	cmp	r2, #78	@ 0x4e
 800c44e:	f47f aeda 	bne.w	800c206 <_strtod_l+0xae>
 800c452:	4997      	ldr	r1, [pc, #604]	@ (800c6b0 <_strtod_l+0x558>)
 800c454:	a811      	add	r0, sp, #68	@ 0x44
 800c456:	f001 fb63 	bl	800db20 <__match>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aed3 	beq.w	800c206 <_strtod_l+0xae>
 800c460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b28      	cmp	r3, #40	@ 0x28
 800c466:	d12d      	bne.n	800c4c4 <_strtod_l+0x36c>
 800c468:	4992      	ldr	r1, [pc, #584]	@ (800c6b4 <_strtod_l+0x55c>)
 800c46a:	aa14      	add	r2, sp, #80	@ 0x50
 800c46c:	a811      	add	r0, sp, #68	@ 0x44
 800c46e:	f001 fb6b 	bl	800db48 <__hexnan>
 800c472:	2805      	cmp	r0, #5
 800c474:	d126      	bne.n	800c4c4 <_strtod_l+0x36c>
 800c476:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c478:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c47c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c480:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c484:	e6a3      	b.n	800c1ce <_strtod_l+0x76>
 800c486:	240a      	movs	r4, #10
 800c488:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c48c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c490:	e7b8      	b.n	800c404 <_strtod_l+0x2ac>
 800c492:	2a6e      	cmp	r2, #110	@ 0x6e
 800c494:	e7db      	b.n	800c44e <_strtod_l+0x2f6>
 800c496:	4988      	ldr	r1, [pc, #544]	@ (800c6b8 <_strtod_l+0x560>)
 800c498:	a811      	add	r0, sp, #68	@ 0x44
 800c49a:	f001 fb41 	bl	800db20 <__match>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f43f aeb1 	beq.w	800c206 <_strtod_l+0xae>
 800c4a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4a6:	4985      	ldr	r1, [pc, #532]	@ (800c6bc <_strtod_l+0x564>)
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	a811      	add	r0, sp, #68	@ 0x44
 800c4ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4ae:	f001 fb37 	bl	800db20 <__match>
 800c4b2:	b910      	cbnz	r0, 800c4ba <_strtod_l+0x362>
 800c4b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4ba:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c6d0 <_strtod_l+0x578>
 800c4be:	f04f 0a00 	mov.w	sl, #0
 800c4c2:	e684      	b.n	800c1ce <_strtod_l+0x76>
 800c4c4:	487e      	ldr	r0, [pc, #504]	@ (800c6c0 <_strtod_l+0x568>)
 800c4c6:	f001 f867 	bl	800d598 <nan>
 800c4ca:	ec5b ab10 	vmov	sl, fp, d0
 800c4ce:	e67e      	b.n	800c1ce <_strtod_l+0x76>
 800c4d0:	ee07 9a90 	vmov	s15, r9
 800c4d4:	1be2      	subs	r2, r4, r7
 800c4d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	bf08      	it	eq
 800c4de:	461d      	moveq	r5, r3
 800c4e0:	2b10      	cmp	r3, #16
 800c4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	bfa8      	it	ge
 800c4e8:	2210      	movge	r2, #16
 800c4ea:	2b09      	cmp	r3, #9
 800c4ec:	ec5b ab17 	vmov	sl, fp, d7
 800c4f0:	dc15      	bgt.n	800c51e <_strtod_l+0x3c6>
 800c4f2:	1be1      	subs	r1, r4, r7
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	f43f ae6a 	beq.w	800c1ce <_strtod_l+0x76>
 800c4fa:	eba4 0107 	sub.w	r1, r4, r7
 800c4fe:	dd72      	ble.n	800c5e6 <_strtod_l+0x48e>
 800c500:	2916      	cmp	r1, #22
 800c502:	dc59      	bgt.n	800c5b8 <_strtod_l+0x460>
 800c504:	4b6f      	ldr	r3, [pc, #444]	@ (800c6c4 <_strtod_l+0x56c>)
 800c506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c50c:	ed93 7b00 	vldr	d7, [r3]
 800c510:	ec4b ab16 	vmov	d6, sl, fp
 800c514:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c518:	ec5b ab17 	vmov	sl, fp, d7
 800c51c:	e657      	b.n	800c1ce <_strtod_l+0x76>
 800c51e:	4969      	ldr	r1, [pc, #420]	@ (800c6c4 <_strtod_l+0x56c>)
 800c520:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c524:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c528:	ee06 6a90 	vmov	s13, r6
 800c52c:	2b0f      	cmp	r3, #15
 800c52e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c532:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c536:	ec5b ab16 	vmov	sl, fp, d6
 800c53a:	ddda      	ble.n	800c4f2 <_strtod_l+0x39a>
 800c53c:	1a9a      	subs	r2, r3, r2
 800c53e:	1be1      	subs	r1, r4, r7
 800c540:	440a      	add	r2, r1
 800c542:	2a00      	cmp	r2, #0
 800c544:	f340 8094 	ble.w	800c670 <_strtod_l+0x518>
 800c548:	f012 000f 	ands.w	r0, r2, #15
 800c54c:	d00a      	beq.n	800c564 <_strtod_l+0x40c>
 800c54e:	495d      	ldr	r1, [pc, #372]	@ (800c6c4 <_strtod_l+0x56c>)
 800c550:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c554:	ed91 7b00 	vldr	d7, [r1]
 800c558:	ec4b ab16 	vmov	d6, sl, fp
 800c55c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c560:	ec5b ab17 	vmov	sl, fp, d7
 800c564:	f032 020f 	bics.w	r2, r2, #15
 800c568:	d073      	beq.n	800c652 <_strtod_l+0x4fa>
 800c56a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c56e:	dd47      	ble.n	800c600 <_strtod_l+0x4a8>
 800c570:	2400      	movs	r4, #0
 800c572:	4625      	mov	r5, r4
 800c574:	9407      	str	r4, [sp, #28]
 800c576:	4626      	mov	r6, r4
 800c578:	9a05      	ldr	r2, [sp, #20]
 800c57a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c6d0 <_strtod_l+0x578>
 800c57e:	2322      	movs	r3, #34	@ 0x22
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	f04f 0a00 	mov.w	sl, #0
 800c586:	9b07      	ldr	r3, [sp, #28]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f43f ae20 	beq.w	800c1ce <_strtod_l+0x76>
 800c58e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c590:	9805      	ldr	r0, [sp, #20]
 800c592:	f7ff f957 	bl	800b844 <_Bfree>
 800c596:	9805      	ldr	r0, [sp, #20]
 800c598:	4631      	mov	r1, r6
 800c59a:	f7ff f953 	bl	800b844 <_Bfree>
 800c59e:	9805      	ldr	r0, [sp, #20]
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7ff f94f 	bl	800b844 <_Bfree>
 800c5a6:	9907      	ldr	r1, [sp, #28]
 800c5a8:	9805      	ldr	r0, [sp, #20]
 800c5aa:	f7ff f94b 	bl	800b844 <_Bfree>
 800c5ae:	9805      	ldr	r0, [sp, #20]
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	f7ff f947 	bl	800b844 <_Bfree>
 800c5b6:	e60a      	b.n	800c1ce <_strtod_l+0x76>
 800c5b8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c5bc:	1be0      	subs	r0, r4, r7
 800c5be:	4281      	cmp	r1, r0
 800c5c0:	dbbc      	blt.n	800c53c <_strtod_l+0x3e4>
 800c5c2:	4a40      	ldr	r2, [pc, #256]	@ (800c6c4 <_strtod_l+0x56c>)
 800c5c4:	f1c3 030f 	rsb	r3, r3, #15
 800c5c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c5cc:	ed91 7b00 	vldr	d7, [r1]
 800c5d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5d2:	ec4b ab16 	vmov	d6, sl, fp
 800c5d6:	1acb      	subs	r3, r1, r3
 800c5d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c5dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5e0:	ed92 6b00 	vldr	d6, [r2]
 800c5e4:	e796      	b.n	800c514 <_strtod_l+0x3bc>
 800c5e6:	3116      	adds	r1, #22
 800c5e8:	dba8      	blt.n	800c53c <_strtod_l+0x3e4>
 800c5ea:	4b36      	ldr	r3, [pc, #216]	@ (800c6c4 <_strtod_l+0x56c>)
 800c5ec:	1b3c      	subs	r4, r7, r4
 800c5ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c5f2:	ed94 7b00 	vldr	d7, [r4]
 800c5f6:	ec4b ab16 	vmov	d6, sl, fp
 800c5fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c5fe:	e78b      	b.n	800c518 <_strtod_l+0x3c0>
 800c600:	2000      	movs	r0, #0
 800c602:	ec4b ab17 	vmov	d7, sl, fp
 800c606:	4e30      	ldr	r6, [pc, #192]	@ (800c6c8 <_strtod_l+0x570>)
 800c608:	1112      	asrs	r2, r2, #4
 800c60a:	4601      	mov	r1, r0
 800c60c:	2a01      	cmp	r2, #1
 800c60e:	dc23      	bgt.n	800c658 <_strtod_l+0x500>
 800c610:	b108      	cbz	r0, 800c616 <_strtod_l+0x4be>
 800c612:	ec5b ab17 	vmov	sl, fp, d7
 800c616:	4a2c      	ldr	r2, [pc, #176]	@ (800c6c8 <_strtod_l+0x570>)
 800c618:	482c      	ldr	r0, [pc, #176]	@ (800c6cc <_strtod_l+0x574>)
 800c61a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c61e:	ed92 7b00 	vldr	d7, [r2]
 800c622:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c626:	ec4b ab16 	vmov	d6, sl, fp
 800c62a:	4a29      	ldr	r2, [pc, #164]	@ (800c6d0 <_strtod_l+0x578>)
 800c62c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c630:	ee17 1a90 	vmov	r1, s15
 800c634:	400a      	ands	r2, r1
 800c636:	4282      	cmp	r2, r0
 800c638:	ec5b ab17 	vmov	sl, fp, d7
 800c63c:	d898      	bhi.n	800c570 <_strtod_l+0x418>
 800c63e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c642:	4282      	cmp	r2, r0
 800c644:	bf86      	itte	hi
 800c646:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c6d4 <_strtod_l+0x57c>
 800c64a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c64e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c652:	2200      	movs	r2, #0
 800c654:	9206      	str	r2, [sp, #24]
 800c656:	e076      	b.n	800c746 <_strtod_l+0x5ee>
 800c658:	f012 0f01 	tst.w	r2, #1
 800c65c:	d004      	beq.n	800c668 <_strtod_l+0x510>
 800c65e:	ed96 6b00 	vldr	d6, [r6]
 800c662:	2001      	movs	r0, #1
 800c664:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c668:	3101      	adds	r1, #1
 800c66a:	1052      	asrs	r2, r2, #1
 800c66c:	3608      	adds	r6, #8
 800c66e:	e7cd      	b.n	800c60c <_strtod_l+0x4b4>
 800c670:	d0ef      	beq.n	800c652 <_strtod_l+0x4fa>
 800c672:	4252      	negs	r2, r2
 800c674:	f012 000f 	ands.w	r0, r2, #15
 800c678:	d00a      	beq.n	800c690 <_strtod_l+0x538>
 800c67a:	4912      	ldr	r1, [pc, #72]	@ (800c6c4 <_strtod_l+0x56c>)
 800c67c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c680:	ed91 7b00 	vldr	d7, [r1]
 800c684:	ec4b ab16 	vmov	d6, sl, fp
 800c688:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c68c:	ec5b ab17 	vmov	sl, fp, d7
 800c690:	1112      	asrs	r2, r2, #4
 800c692:	d0de      	beq.n	800c652 <_strtod_l+0x4fa>
 800c694:	2a1f      	cmp	r2, #31
 800c696:	dd1f      	ble.n	800c6d8 <_strtod_l+0x580>
 800c698:	2400      	movs	r4, #0
 800c69a:	4625      	mov	r5, r4
 800c69c:	9407      	str	r4, [sp, #28]
 800c69e:	4626      	mov	r6, r4
 800c6a0:	9a05      	ldr	r2, [sp, #20]
 800c6a2:	2322      	movs	r3, #34	@ 0x22
 800c6a4:	f04f 0a00 	mov.w	sl, #0
 800c6a8:	f04f 0b00 	mov.w	fp, #0
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e76a      	b.n	800c586 <_strtod_l+0x42e>
 800c6b0:	0800e8b9 	.word	0x0800e8b9
 800c6b4:	0800eacc 	.word	0x0800eacc
 800c6b8:	0800e8b1 	.word	0x0800e8b1
 800c6bc:	0800e8e8 	.word	0x0800e8e8
 800c6c0:	0800ec75 	.word	0x0800ec75
 800c6c4:	0800ea00 	.word	0x0800ea00
 800c6c8:	0800e9d8 	.word	0x0800e9d8
 800c6cc:	7ca00000 	.word	0x7ca00000
 800c6d0:	7ff00000 	.word	0x7ff00000
 800c6d4:	7fefffff 	.word	0x7fefffff
 800c6d8:	f012 0110 	ands.w	r1, r2, #16
 800c6dc:	bf18      	it	ne
 800c6de:	216a      	movne	r1, #106	@ 0x6a
 800c6e0:	9106      	str	r1, [sp, #24]
 800c6e2:	ec4b ab17 	vmov	d7, sl, fp
 800c6e6:	49b0      	ldr	r1, [pc, #704]	@ (800c9a8 <_strtod_l+0x850>)
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	07d6      	lsls	r6, r2, #31
 800c6ec:	d504      	bpl.n	800c6f8 <_strtod_l+0x5a0>
 800c6ee:	ed91 6b00 	vldr	d6, [r1]
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6f8:	1052      	asrs	r2, r2, #1
 800c6fa:	f101 0108 	add.w	r1, r1, #8
 800c6fe:	d1f4      	bne.n	800c6ea <_strtod_l+0x592>
 800c700:	b108      	cbz	r0, 800c706 <_strtod_l+0x5ae>
 800c702:	ec5b ab17 	vmov	sl, fp, d7
 800c706:	9a06      	ldr	r2, [sp, #24]
 800c708:	b1b2      	cbz	r2, 800c738 <_strtod_l+0x5e0>
 800c70a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c70e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c712:	2a00      	cmp	r2, #0
 800c714:	4658      	mov	r0, fp
 800c716:	dd0f      	ble.n	800c738 <_strtod_l+0x5e0>
 800c718:	2a1f      	cmp	r2, #31
 800c71a:	dd55      	ble.n	800c7c8 <_strtod_l+0x670>
 800c71c:	2a34      	cmp	r2, #52	@ 0x34
 800c71e:	bfde      	ittt	le
 800c720:	f04f 32ff 	movle.w	r2, #4294967295
 800c724:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c728:	408a      	lslle	r2, r1
 800c72a:	f04f 0a00 	mov.w	sl, #0
 800c72e:	bfcc      	ite	gt
 800c730:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c734:	ea02 0b00 	andle.w	fp, r2, r0
 800c738:	ec4b ab17 	vmov	d7, sl, fp
 800c73c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c744:	d0a8      	beq.n	800c698 <_strtod_l+0x540>
 800c746:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c748:	9805      	ldr	r0, [sp, #20]
 800c74a:	f8cd 9000 	str.w	r9, [sp]
 800c74e:	462a      	mov	r2, r5
 800c750:	f7ff f8e0 	bl	800b914 <__s2b>
 800c754:	9007      	str	r0, [sp, #28]
 800c756:	2800      	cmp	r0, #0
 800c758:	f43f af0a 	beq.w	800c570 <_strtod_l+0x418>
 800c75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c75e:	1b3f      	subs	r7, r7, r4
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfb4      	ite	lt
 800c764:	463b      	movlt	r3, r7
 800c766:	2300      	movge	r3, #0
 800c768:	930a      	str	r3, [sp, #40]	@ 0x28
 800c76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c998 <_strtod_l+0x840>
 800c770:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c774:	2400      	movs	r4, #0
 800c776:	930d      	str	r3, [sp, #52]	@ 0x34
 800c778:	4625      	mov	r5, r4
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	9805      	ldr	r0, [sp, #20]
 800c77e:	6859      	ldr	r1, [r3, #4]
 800c780:	f7ff f820 	bl	800b7c4 <_Balloc>
 800c784:	4606      	mov	r6, r0
 800c786:	2800      	cmp	r0, #0
 800c788:	f43f aef6 	beq.w	800c578 <_strtod_l+0x420>
 800c78c:	9b07      	ldr	r3, [sp, #28]
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	ec4b ab19 	vmov	d9, sl, fp
 800c794:	3202      	adds	r2, #2
 800c796:	f103 010c 	add.w	r1, r3, #12
 800c79a:	0092      	lsls	r2, r2, #2
 800c79c:	300c      	adds	r0, #12
 800c79e:	f7fe f91c 	bl	800a9da <memcpy>
 800c7a2:	eeb0 0b49 	vmov.f64	d0, d9
 800c7a6:	9805      	ldr	r0, [sp, #20]
 800c7a8:	aa14      	add	r2, sp, #80	@ 0x50
 800c7aa:	a913      	add	r1, sp, #76	@ 0x4c
 800c7ac:	f7ff fbee 	bl	800bf8c <__d2b>
 800c7b0:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	f43f aee0 	beq.w	800c578 <_strtod_l+0x420>
 800c7b8:	9805      	ldr	r0, [sp, #20]
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	f7ff f940 	bl	800ba40 <__i2b>
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	b940      	cbnz	r0, 800c7d6 <_strtod_l+0x67e>
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	e6d7      	b.n	800c578 <_strtod_l+0x420>
 800c7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c7cc:	fa01 f202 	lsl.w	r2, r1, r2
 800c7d0:	ea02 0a0a 	and.w	sl, r2, sl
 800c7d4:	e7b0      	b.n	800c738 <_strtod_l+0x5e0>
 800c7d6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c7d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c7da:	2f00      	cmp	r7, #0
 800c7dc:	bfab      	itete	ge
 800c7de:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c7e0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c7e2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c7e6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c7ea:	bfac      	ite	ge
 800c7ec:	eb07 0903 	addge.w	r9, r7, r3
 800c7f0:	eba3 0807 	sublt.w	r8, r3, r7
 800c7f4:	9b06      	ldr	r3, [sp, #24]
 800c7f6:	1aff      	subs	r7, r7, r3
 800c7f8:	4417      	add	r7, r2
 800c7fa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c7fe:	4a6b      	ldr	r2, [pc, #428]	@ (800c9ac <_strtod_l+0x854>)
 800c800:	3f01      	subs	r7, #1
 800c802:	4297      	cmp	r7, r2
 800c804:	da51      	bge.n	800c8aa <_strtod_l+0x752>
 800c806:	1bd1      	subs	r1, r2, r7
 800c808:	291f      	cmp	r1, #31
 800c80a:	eba3 0301 	sub.w	r3, r3, r1
 800c80e:	f04f 0201 	mov.w	r2, #1
 800c812:	dc3e      	bgt.n	800c892 <_strtod_l+0x73a>
 800c814:	408a      	lsls	r2, r1
 800c816:	920c      	str	r2, [sp, #48]	@ 0x30
 800c818:	2200      	movs	r2, #0
 800c81a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c81c:	eb09 0703 	add.w	r7, r9, r3
 800c820:	4498      	add	r8, r3
 800c822:	9b06      	ldr	r3, [sp, #24]
 800c824:	45b9      	cmp	r9, r7
 800c826:	4498      	add	r8, r3
 800c828:	464b      	mov	r3, r9
 800c82a:	bfa8      	it	ge
 800c82c:	463b      	movge	r3, r7
 800c82e:	4543      	cmp	r3, r8
 800c830:	bfa8      	it	ge
 800c832:	4643      	movge	r3, r8
 800c834:	2b00      	cmp	r3, #0
 800c836:	bfc2      	ittt	gt
 800c838:	1aff      	subgt	r7, r7, r3
 800c83a:	eba8 0803 	subgt.w	r8, r8, r3
 800c83e:	eba9 0903 	subgt.w	r9, r9, r3
 800c842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd16      	ble.n	800c876 <_strtod_l+0x71e>
 800c848:	4629      	mov	r1, r5
 800c84a:	9805      	ldr	r0, [sp, #20]
 800c84c:	461a      	mov	r2, r3
 800c84e:	f7ff f9b7 	bl	800bbc0 <__pow5mult>
 800c852:	4605      	mov	r5, r0
 800c854:	2800      	cmp	r0, #0
 800c856:	d0b5      	beq.n	800c7c4 <_strtod_l+0x66c>
 800c858:	4601      	mov	r1, r0
 800c85a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c85c:	9805      	ldr	r0, [sp, #20]
 800c85e:	f7ff f905 	bl	800ba6c <__multiply>
 800c862:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c864:	2800      	cmp	r0, #0
 800c866:	f43f ae87 	beq.w	800c578 <_strtod_l+0x420>
 800c86a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c86c:	9805      	ldr	r0, [sp, #20]
 800c86e:	f7fe ffe9 	bl	800b844 <_Bfree>
 800c872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c874:	9312      	str	r3, [sp, #72]	@ 0x48
 800c876:	2f00      	cmp	r7, #0
 800c878:	dc1b      	bgt.n	800c8b2 <_strtod_l+0x75a>
 800c87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd21      	ble.n	800c8c4 <_strtod_l+0x76c>
 800c880:	4631      	mov	r1, r6
 800c882:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c884:	9805      	ldr	r0, [sp, #20]
 800c886:	f7ff f99b 	bl	800bbc0 <__pow5mult>
 800c88a:	4606      	mov	r6, r0
 800c88c:	b9d0      	cbnz	r0, 800c8c4 <_strtod_l+0x76c>
 800c88e:	2600      	movs	r6, #0
 800c890:	e672      	b.n	800c578 <_strtod_l+0x420>
 800c892:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c896:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c89a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c89e:	37e2      	adds	r7, #226	@ 0xe2
 800c8a0:	fa02 f107 	lsl.w	r1, r2, r7
 800c8a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c8a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8a8:	e7b8      	b.n	800c81c <_strtod_l+0x6c4>
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	e7f9      	b.n	800c8a6 <_strtod_l+0x74e>
 800c8b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c8b4:	9805      	ldr	r0, [sp, #20]
 800c8b6:	463a      	mov	r2, r7
 800c8b8:	f7ff f9dc 	bl	800bc74 <__lshift>
 800c8bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d1db      	bne.n	800c87a <_strtod_l+0x722>
 800c8c2:	e659      	b.n	800c578 <_strtod_l+0x420>
 800c8c4:	f1b8 0f00 	cmp.w	r8, #0
 800c8c8:	dd07      	ble.n	800c8da <_strtod_l+0x782>
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	9805      	ldr	r0, [sp, #20]
 800c8ce:	4642      	mov	r2, r8
 800c8d0:	f7ff f9d0 	bl	800bc74 <__lshift>
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d0d9      	beq.n	800c88e <_strtod_l+0x736>
 800c8da:	f1b9 0f00 	cmp.w	r9, #0
 800c8de:	dd08      	ble.n	800c8f2 <_strtod_l+0x79a>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	9805      	ldr	r0, [sp, #20]
 800c8e4:	464a      	mov	r2, r9
 800c8e6:	f7ff f9c5 	bl	800bc74 <__lshift>
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	f43f ae43 	beq.w	800c578 <_strtod_l+0x420>
 800c8f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c8f4:	9805      	ldr	r0, [sp, #20]
 800c8f6:	4632      	mov	r2, r6
 800c8f8:	f7ff fa44 	bl	800bd84 <__mdiff>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f43f ae3a 	beq.w	800c578 <_strtod_l+0x420>
 800c904:	2300      	movs	r3, #0
 800c906:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c90a:	60c3      	str	r3, [r0, #12]
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7ff fa1d 	bl	800bd4c <__mcmp>
 800c912:	2800      	cmp	r0, #0
 800c914:	da4e      	bge.n	800c9b4 <_strtod_l+0x85c>
 800c916:	ea58 080a 	orrs.w	r8, r8, sl
 800c91a:	d174      	bne.n	800ca06 <_strtod_l+0x8ae>
 800c91c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c920:	2b00      	cmp	r3, #0
 800c922:	d170      	bne.n	800ca06 <_strtod_l+0x8ae>
 800c924:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c928:	0d1b      	lsrs	r3, r3, #20
 800c92a:	051b      	lsls	r3, r3, #20
 800c92c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c930:	d969      	bls.n	800ca06 <_strtod_l+0x8ae>
 800c932:	6963      	ldr	r3, [r4, #20]
 800c934:	b913      	cbnz	r3, 800c93c <_strtod_l+0x7e4>
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	dd64      	ble.n	800ca06 <_strtod_l+0x8ae>
 800c93c:	4621      	mov	r1, r4
 800c93e:	2201      	movs	r2, #1
 800c940:	9805      	ldr	r0, [sp, #20]
 800c942:	f7ff f997 	bl	800bc74 <__lshift>
 800c946:	4629      	mov	r1, r5
 800c948:	4604      	mov	r4, r0
 800c94a:	f7ff f9ff 	bl	800bd4c <__mcmp>
 800c94e:	2800      	cmp	r0, #0
 800c950:	dd59      	ble.n	800ca06 <_strtod_l+0x8ae>
 800c952:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c956:	9a06      	ldr	r2, [sp, #24]
 800c958:	0d1b      	lsrs	r3, r3, #20
 800c95a:	051b      	lsls	r3, r3, #20
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	d070      	beq.n	800ca42 <_strtod_l+0x8ea>
 800c960:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c964:	d86d      	bhi.n	800ca42 <_strtod_l+0x8ea>
 800c966:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c96a:	f67f ae99 	bls.w	800c6a0 <_strtod_l+0x548>
 800c96e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c9a0 <_strtod_l+0x848>
 800c972:	ec4b ab16 	vmov	d6, sl, fp
 800c976:	4b0e      	ldr	r3, [pc, #56]	@ (800c9b0 <_strtod_l+0x858>)
 800c978:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c97c:	ee17 2a90 	vmov	r2, s15
 800c980:	4013      	ands	r3, r2
 800c982:	ec5b ab17 	vmov	sl, fp, d7
 800c986:	2b00      	cmp	r3, #0
 800c988:	f47f ae01 	bne.w	800c58e <_strtod_l+0x436>
 800c98c:	9a05      	ldr	r2, [sp, #20]
 800c98e:	2322      	movs	r3, #34	@ 0x22
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	e5fc      	b.n	800c58e <_strtod_l+0x436>
 800c994:	f3af 8000 	nop.w
 800c998:	ffc00000 	.word	0xffc00000
 800c99c:	41dfffff 	.word	0x41dfffff
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	39500000 	.word	0x39500000
 800c9a8:	0800eaf8 	.word	0x0800eaf8
 800c9ac:	fffffc02 	.word	0xfffffc02
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	46d9      	mov	r9, fp
 800c9b6:	d15d      	bne.n	800ca74 <_strtod_l+0x91c>
 800c9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9bc:	f1b8 0f00 	cmp.w	r8, #0
 800c9c0:	d02a      	beq.n	800ca18 <_strtod_l+0x8c0>
 800c9c2:	4aab      	ldr	r2, [pc, #684]	@ (800cc70 <_strtod_l+0xb18>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d12a      	bne.n	800ca1e <_strtod_l+0x8c6>
 800c9c8:	9b06      	ldr	r3, [sp, #24]
 800c9ca:	4652      	mov	r2, sl
 800c9cc:	b1fb      	cbz	r3, 800ca0e <_strtod_l+0x8b6>
 800c9ce:	4ba9      	ldr	r3, [pc, #676]	@ (800cc74 <_strtod_l+0xb1c>)
 800c9d0:	ea0b 0303 	and.w	r3, fp, r3
 800c9d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c9d8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9dc:	d81a      	bhi.n	800ca14 <_strtod_l+0x8bc>
 800c9de:	0d1b      	lsrs	r3, r3, #20
 800c9e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d118      	bne.n	800ca1e <_strtod_l+0x8c6>
 800c9ec:	4ba2      	ldr	r3, [pc, #648]	@ (800cc78 <_strtod_l+0xb20>)
 800c9ee:	4599      	cmp	r9, r3
 800c9f0:	d102      	bne.n	800c9f8 <_strtod_l+0x8a0>
 800c9f2:	3201      	adds	r2, #1
 800c9f4:	f43f adc0 	beq.w	800c578 <_strtod_l+0x420>
 800c9f8:	4b9e      	ldr	r3, [pc, #632]	@ (800cc74 <_strtod_l+0xb1c>)
 800c9fa:	ea09 0303 	and.w	r3, r9, r3
 800c9fe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ca02:	f04f 0a00 	mov.w	sl, #0
 800ca06:	9b06      	ldr	r3, [sp, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1b0      	bne.n	800c96e <_strtod_l+0x816>
 800ca0c:	e5bf      	b.n	800c58e <_strtod_l+0x436>
 800ca0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca12:	e7e9      	b.n	800c9e8 <_strtod_l+0x890>
 800ca14:	460b      	mov	r3, r1
 800ca16:	e7e7      	b.n	800c9e8 <_strtod_l+0x890>
 800ca18:	ea53 030a 	orrs.w	r3, r3, sl
 800ca1c:	d099      	beq.n	800c952 <_strtod_l+0x7fa>
 800ca1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca20:	b1c3      	cbz	r3, 800ca54 <_strtod_l+0x8fc>
 800ca22:	ea13 0f09 	tst.w	r3, r9
 800ca26:	d0ee      	beq.n	800ca06 <_strtod_l+0x8ae>
 800ca28:	9a06      	ldr	r2, [sp, #24]
 800ca2a:	4650      	mov	r0, sl
 800ca2c:	4659      	mov	r1, fp
 800ca2e:	f1b8 0f00 	cmp.w	r8, #0
 800ca32:	d013      	beq.n	800ca5c <_strtod_l+0x904>
 800ca34:	f7ff fb75 	bl	800c122 <sulp>
 800ca38:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ca3c:	ec5b ab17 	vmov	sl, fp, d7
 800ca40:	e7e1      	b.n	800ca06 <_strtod_l+0x8ae>
 800ca42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ca46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca4e:	f04f 3aff 	mov.w	sl, #4294967295
 800ca52:	e7d8      	b.n	800ca06 <_strtod_l+0x8ae>
 800ca54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca56:	ea13 0f0a 	tst.w	r3, sl
 800ca5a:	e7e4      	b.n	800ca26 <_strtod_l+0x8ce>
 800ca5c:	f7ff fb61 	bl	800c122 <sulp>
 800ca60:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ca64:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ca68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6c:	ec5b ab10 	vmov	sl, fp, d0
 800ca70:	d1c9      	bne.n	800ca06 <_strtod_l+0x8ae>
 800ca72:	e615      	b.n	800c6a0 <_strtod_l+0x548>
 800ca74:	4629      	mov	r1, r5
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7ff fae0 	bl	800c03c <__ratio>
 800ca7c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ca80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ca84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca88:	d85d      	bhi.n	800cb46 <_strtod_l+0x9ee>
 800ca8a:	f1b8 0f00 	cmp.w	r8, #0
 800ca8e:	d164      	bne.n	800cb5a <_strtod_l+0xa02>
 800ca90:	f1ba 0f00 	cmp.w	sl, #0
 800ca94:	d14b      	bne.n	800cb2e <_strtod_l+0x9d6>
 800ca96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca9a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d160      	bne.n	800cb64 <_strtod_l+0xa0c>
 800caa2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800caa6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800caaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caae:	d401      	bmi.n	800cab4 <_strtod_l+0x95c>
 800cab0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cab4:	eeb1 ab48 	vneg.f64	d10, d8
 800cab8:	486e      	ldr	r0, [pc, #440]	@ (800cc74 <_strtod_l+0xb1c>)
 800caba:	4970      	ldr	r1, [pc, #448]	@ (800cc7c <_strtod_l+0xb24>)
 800cabc:	ea09 0700 	and.w	r7, r9, r0
 800cac0:	428f      	cmp	r7, r1
 800cac2:	ec53 2b1a 	vmov	r2, r3, d10
 800cac6:	d17d      	bne.n	800cbc4 <_strtod_l+0xa6c>
 800cac8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800cacc:	ec4b ab1c 	vmov	d12, sl, fp
 800cad0:	eeb0 0b4c 	vmov.f64	d0, d12
 800cad4:	f7ff f9ea 	bl	800beac <__ulp>
 800cad8:	4866      	ldr	r0, [pc, #408]	@ (800cc74 <_strtod_l+0xb1c>)
 800cada:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800cade:	ee1c 3a90 	vmov	r3, s25
 800cae2:	4a67      	ldr	r2, [pc, #412]	@ (800cc80 <_strtod_l+0xb28>)
 800cae4:	ea03 0100 	and.w	r1, r3, r0
 800cae8:	4291      	cmp	r1, r2
 800caea:	ec5b ab1c 	vmov	sl, fp, d12
 800caee:	d93c      	bls.n	800cb6a <_strtod_l+0xa12>
 800caf0:	ee19 2a90 	vmov	r2, s19
 800caf4:	4b60      	ldr	r3, [pc, #384]	@ (800cc78 <_strtod_l+0xb20>)
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d104      	bne.n	800cb04 <_strtod_l+0x9ac>
 800cafa:	ee19 3a10 	vmov	r3, s18
 800cafe:	3301      	adds	r3, #1
 800cb00:	f43f ad3a 	beq.w	800c578 <_strtod_l+0x420>
 800cb04:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800cc78 <_strtod_l+0xb20>
 800cb08:	f04f 3aff 	mov.w	sl, #4294967295
 800cb0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cb0e:	9805      	ldr	r0, [sp, #20]
 800cb10:	f7fe fe98 	bl	800b844 <_Bfree>
 800cb14:	9805      	ldr	r0, [sp, #20]
 800cb16:	4631      	mov	r1, r6
 800cb18:	f7fe fe94 	bl	800b844 <_Bfree>
 800cb1c:	9805      	ldr	r0, [sp, #20]
 800cb1e:	4629      	mov	r1, r5
 800cb20:	f7fe fe90 	bl	800b844 <_Bfree>
 800cb24:	9805      	ldr	r0, [sp, #20]
 800cb26:	4621      	mov	r1, r4
 800cb28:	f7fe fe8c 	bl	800b844 <_Bfree>
 800cb2c:	e625      	b.n	800c77a <_strtod_l+0x622>
 800cb2e:	f1ba 0f01 	cmp.w	sl, #1
 800cb32:	d103      	bne.n	800cb3c <_strtod_l+0x9e4>
 800cb34:	f1bb 0f00 	cmp.w	fp, #0
 800cb38:	f43f adb2 	beq.w	800c6a0 <_strtod_l+0x548>
 800cb3c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cb40:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cb44:	e7b8      	b.n	800cab8 <_strtod_l+0x960>
 800cb46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cb4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cb4e:	f1b8 0f00 	cmp.w	r8, #0
 800cb52:	d0af      	beq.n	800cab4 <_strtod_l+0x95c>
 800cb54:	eeb0 ab48 	vmov.f64	d10, d8
 800cb58:	e7ae      	b.n	800cab8 <_strtod_l+0x960>
 800cb5a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800cb5e:	eeb0 8b4a 	vmov.f64	d8, d10
 800cb62:	e7a9      	b.n	800cab8 <_strtod_l+0x960>
 800cb64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cb68:	e7a6      	b.n	800cab8 <_strtod_l+0x960>
 800cb6a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb6e:	9b06      	ldr	r3, [sp, #24]
 800cb70:	46d9      	mov	r9, fp
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1ca      	bne.n	800cb0c <_strtod_l+0x9b4>
 800cb76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb7a:	0d1b      	lsrs	r3, r3, #20
 800cb7c:	051b      	lsls	r3, r3, #20
 800cb7e:	429f      	cmp	r7, r3
 800cb80:	d1c4      	bne.n	800cb0c <_strtod_l+0x9b4>
 800cb82:	ec51 0b18 	vmov	r0, r1, d8
 800cb86:	f7f3 fdd7 	bl	8000738 <__aeabi_d2lz>
 800cb8a:	f7f3 fd8f 	bl	80006ac <__aeabi_l2d>
 800cb8e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800cb92:	ec41 0b17 	vmov	d7, r0, r1
 800cb96:	ea49 090a 	orr.w	r9, r9, sl
 800cb9a:	ea59 0908 	orrs.w	r9, r9, r8
 800cb9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cba2:	d03c      	beq.n	800cc1e <_strtod_l+0xac6>
 800cba4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800cc58 <_strtod_l+0xb00>
 800cba8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	f53f aced 	bmi.w	800c58e <_strtod_l+0x436>
 800cbb4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800cc60 <_strtod_l+0xb08>
 800cbb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc0:	dda4      	ble.n	800cb0c <_strtod_l+0x9b4>
 800cbc2:	e4e4      	b.n	800c58e <_strtod_l+0x436>
 800cbc4:	9906      	ldr	r1, [sp, #24]
 800cbc6:	b1e1      	cbz	r1, 800cc02 <_strtod_l+0xaaa>
 800cbc8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800cbcc:	d819      	bhi.n	800cc02 <_strtod_l+0xaaa>
 800cbce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd6:	d811      	bhi.n	800cbfc <_strtod_l+0xaa4>
 800cbd8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cbdc:	ee18 3a10 	vmov	r3, s16
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	bf38      	it	cc
 800cbe4:	2301      	movcc	r3, #1
 800cbe6:	ee08 3a10 	vmov	s16, r3
 800cbea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cbee:	f1b8 0f00 	cmp.w	r8, #0
 800cbf2:	d111      	bne.n	800cc18 <_strtod_l+0xac0>
 800cbf4:	eeb1 7b48 	vneg.f64	d7, d8
 800cbf8:	ec53 2b17 	vmov	r2, r3, d7
 800cbfc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800cc00:	1bcb      	subs	r3, r1, r7
 800cc02:	eeb0 0b49 	vmov.f64	d0, d9
 800cc06:	ec43 2b1a 	vmov	d10, r2, r3
 800cc0a:	f7ff f94f 	bl	800beac <__ulp>
 800cc0e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800cc12:	ec5b ab19 	vmov	sl, fp, d9
 800cc16:	e7aa      	b.n	800cb6e <_strtod_l+0xa16>
 800cc18:	eeb0 7b48 	vmov.f64	d7, d8
 800cc1c:	e7ec      	b.n	800cbf8 <_strtod_l+0xaa0>
 800cc1e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800cc68 <_strtod_l+0xb10>
 800cc22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	f57f af6f 	bpl.w	800cb0c <_strtod_l+0x9b4>
 800cc2e:	e4ae      	b.n	800c58e <_strtod_l+0x436>
 800cc30:	2300      	movs	r3, #0
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	f7ff bacc 	b.w	800c1d6 <_strtod_l+0x7e>
 800cc3e:	2a65      	cmp	r2, #101	@ 0x65
 800cc40:	f43f abbc 	beq.w	800c3bc <_strtod_l+0x264>
 800cc44:	2a45      	cmp	r2, #69	@ 0x45
 800cc46:	f43f abb9 	beq.w	800c3bc <_strtod_l+0x264>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9306      	str	r3, [sp, #24]
 800cc4e:	f7ff bbf0 	b.w	800c432 <_strtod_l+0x2da>
 800cc52:	bf00      	nop
 800cc54:	f3af 8000 	nop.w
 800cc58:	94a03595 	.word	0x94a03595
 800cc5c:	3fdfffff 	.word	0x3fdfffff
 800cc60:	35afe535 	.word	0x35afe535
 800cc64:	3fe00000 	.word	0x3fe00000
 800cc68:	94a03595 	.word	0x94a03595
 800cc6c:	3fcfffff 	.word	0x3fcfffff
 800cc70:	000fffff 	.word	0x000fffff
 800cc74:	7ff00000 	.word	0x7ff00000
 800cc78:	7fefffff 	.word	0x7fefffff
 800cc7c:	7fe00000 	.word	0x7fe00000
 800cc80:	7c9fffff 	.word	0x7c9fffff

0800cc84 <_strtod_r>:
 800cc84:	4b01      	ldr	r3, [pc, #4]	@ (800cc8c <_strtod_r+0x8>)
 800cc86:	f7ff ba67 	b.w	800c158 <_strtod_l>
 800cc8a:	bf00      	nop
 800cc8c:	24000078 	.word	0x24000078

0800cc90 <_strtol_l.constprop.0>:
 800cc90:	2b24      	cmp	r3, #36	@ 0x24
 800cc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc96:	4686      	mov	lr, r0
 800cc98:	4690      	mov	r8, r2
 800cc9a:	d801      	bhi.n	800cca0 <_strtol_l.constprop.0+0x10>
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d106      	bne.n	800ccae <_strtol_l.constprop.0+0x1e>
 800cca0:	f7fd fe6e 	bl	800a980 <__errno>
 800cca4:	2316      	movs	r3, #22
 800cca6:	6003      	str	r3, [r0, #0]
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccae:	4834      	ldr	r0, [pc, #208]	@ (800cd80 <_strtol_l.constprop.0+0xf0>)
 800ccb0:	460d      	mov	r5, r1
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccb8:	5d06      	ldrb	r6, [r0, r4]
 800ccba:	f016 0608 	ands.w	r6, r6, #8
 800ccbe:	d1f8      	bne.n	800ccb2 <_strtol_l.constprop.0+0x22>
 800ccc0:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccc2:	d12d      	bne.n	800cd20 <_strtol_l.constprop.0+0x90>
 800ccc4:	782c      	ldrb	r4, [r5, #0]
 800ccc6:	2601      	movs	r6, #1
 800ccc8:	1c95      	adds	r5, r2, #2
 800ccca:	f033 0210 	bics.w	r2, r3, #16
 800ccce:	d109      	bne.n	800cce4 <_strtol_l.constprop.0+0x54>
 800ccd0:	2c30      	cmp	r4, #48	@ 0x30
 800ccd2:	d12a      	bne.n	800cd2a <_strtol_l.constprop.0+0x9a>
 800ccd4:	782a      	ldrb	r2, [r5, #0]
 800ccd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccda:	2a58      	cmp	r2, #88	@ 0x58
 800ccdc:	d125      	bne.n	800cd2a <_strtol_l.constprop.0+0x9a>
 800ccde:	786c      	ldrb	r4, [r5, #1]
 800cce0:	2310      	movs	r3, #16
 800cce2:	3502      	adds	r5, #2
 800cce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ccec:	2200      	movs	r2, #0
 800ccee:	fbbc f9f3 	udiv	r9, ip, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	fb03 ca19 	mls	sl, r3, r9, ip
 800ccf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ccfc:	2f09      	cmp	r7, #9
 800ccfe:	d81b      	bhi.n	800cd38 <_strtol_l.constprop.0+0xa8>
 800cd00:	463c      	mov	r4, r7
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	dd27      	ble.n	800cd56 <_strtol_l.constprop.0+0xc6>
 800cd06:	1c57      	adds	r7, r2, #1
 800cd08:	d007      	beq.n	800cd1a <_strtol_l.constprop.0+0x8a>
 800cd0a:	4581      	cmp	r9, r0
 800cd0c:	d320      	bcc.n	800cd50 <_strtol_l.constprop.0+0xc0>
 800cd0e:	d101      	bne.n	800cd14 <_strtol_l.constprop.0+0x84>
 800cd10:	45a2      	cmp	sl, r4
 800cd12:	db1d      	blt.n	800cd50 <_strtol_l.constprop.0+0xc0>
 800cd14:	fb00 4003 	mla	r0, r0, r3, r4
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd1e:	e7eb      	b.n	800ccf8 <_strtol_l.constprop.0+0x68>
 800cd20:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd22:	bf04      	itt	eq
 800cd24:	782c      	ldrbeq	r4, [r5, #0]
 800cd26:	1c95      	addeq	r5, r2, #2
 800cd28:	e7cf      	b.n	800ccca <_strtol_l.constprop.0+0x3a>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1da      	bne.n	800cce4 <_strtol_l.constprop.0+0x54>
 800cd2e:	2c30      	cmp	r4, #48	@ 0x30
 800cd30:	bf0c      	ite	eq
 800cd32:	2308      	moveq	r3, #8
 800cd34:	230a      	movne	r3, #10
 800cd36:	e7d5      	b.n	800cce4 <_strtol_l.constprop.0+0x54>
 800cd38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd3c:	2f19      	cmp	r7, #25
 800cd3e:	d801      	bhi.n	800cd44 <_strtol_l.constprop.0+0xb4>
 800cd40:	3c37      	subs	r4, #55	@ 0x37
 800cd42:	e7de      	b.n	800cd02 <_strtol_l.constprop.0+0x72>
 800cd44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd48:	2f19      	cmp	r7, #25
 800cd4a:	d804      	bhi.n	800cd56 <_strtol_l.constprop.0+0xc6>
 800cd4c:	3c57      	subs	r4, #87	@ 0x57
 800cd4e:	e7d8      	b.n	800cd02 <_strtol_l.constprop.0+0x72>
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	e7e1      	b.n	800cd1a <_strtol_l.constprop.0+0x8a>
 800cd56:	1c53      	adds	r3, r2, #1
 800cd58:	d108      	bne.n	800cd6c <_strtol_l.constprop.0+0xdc>
 800cd5a:	2322      	movs	r3, #34	@ 0x22
 800cd5c:	f8ce 3000 	str.w	r3, [lr]
 800cd60:	4660      	mov	r0, ip
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	d0a0      	beq.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd68:	1e69      	subs	r1, r5, #1
 800cd6a:	e006      	b.n	800cd7a <_strtol_l.constprop.0+0xea>
 800cd6c:	b106      	cbz	r6, 800cd70 <_strtol_l.constprop.0+0xe0>
 800cd6e:	4240      	negs	r0, r0
 800cd70:	f1b8 0f00 	cmp.w	r8, #0
 800cd74:	d099      	beq.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd76:	2a00      	cmp	r2, #0
 800cd78:	d1f6      	bne.n	800cd68 <_strtol_l.constprop.0+0xd8>
 800cd7a:	f8c8 1000 	str.w	r1, [r8]
 800cd7e:	e794      	b.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd80:	0800eb21 	.word	0x0800eb21

0800cd84 <_strtol_r>:
 800cd84:	f7ff bf84 	b.w	800cc90 <_strtol_l.constprop.0>

0800cd88 <__ssputs_r>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	688e      	ldr	r6, [r1, #8]
 800cd8e:	461f      	mov	r7, r3
 800cd90:	42be      	cmp	r6, r7
 800cd92:	680b      	ldr	r3, [r1, #0]
 800cd94:	4682      	mov	sl, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	4690      	mov	r8, r2
 800cd9a:	d82d      	bhi.n	800cdf8 <__ssputs_r+0x70>
 800cd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cda0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cda4:	d026      	beq.n	800cdf4 <__ssputs_r+0x6c>
 800cda6:	6965      	ldr	r5, [r4, #20]
 800cda8:	6909      	ldr	r1, [r1, #16]
 800cdaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdae:	eba3 0901 	sub.w	r9, r3, r1
 800cdb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdb6:	1c7b      	adds	r3, r7, #1
 800cdb8:	444b      	add	r3, r9
 800cdba:	106d      	asrs	r5, r5, #1
 800cdbc:	429d      	cmp	r5, r3
 800cdbe:	bf38      	it	cc
 800cdc0:	461d      	movcc	r5, r3
 800cdc2:	0553      	lsls	r3, r2, #21
 800cdc4:	d527      	bpl.n	800ce16 <__ssputs_r+0x8e>
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7fe fc70 	bl	800b6ac <_malloc_r>
 800cdcc:	4606      	mov	r6, r0
 800cdce:	b360      	cbz	r0, 800ce2a <__ssputs_r+0xa2>
 800cdd0:	6921      	ldr	r1, [r4, #16]
 800cdd2:	464a      	mov	r2, r9
 800cdd4:	f7fd fe01 	bl	800a9da <memcpy>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	6126      	str	r6, [r4, #16]
 800cde6:	6165      	str	r5, [r4, #20]
 800cde8:	444e      	add	r6, r9
 800cdea:	eba5 0509 	sub.w	r5, r5, r9
 800cdee:	6026      	str	r6, [r4, #0]
 800cdf0:	60a5      	str	r5, [r4, #8]
 800cdf2:	463e      	mov	r6, r7
 800cdf4:	42be      	cmp	r6, r7
 800cdf6:	d900      	bls.n	800cdfa <__ssputs_r+0x72>
 800cdf8:	463e      	mov	r6, r7
 800cdfa:	6820      	ldr	r0, [r4, #0]
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	4641      	mov	r1, r8
 800ce00:	f000 fb6a 	bl	800d4d8 <memmove>
 800ce04:	68a3      	ldr	r3, [r4, #8]
 800ce06:	1b9b      	subs	r3, r3, r6
 800ce08:	60a3      	str	r3, [r4, #8]
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	4433      	add	r3, r6
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	2000      	movs	r0, #0
 800ce12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce16:	462a      	mov	r2, r5
 800ce18:	f000 ff43 	bl	800dca2 <_realloc_r>
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d1e0      	bne.n	800cde4 <__ssputs_r+0x5c>
 800ce22:	6921      	ldr	r1, [r4, #16]
 800ce24:	4650      	mov	r0, sl
 800ce26:	f7fe fbcd 	bl	800b5c4 <_free_r>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	f8ca 3000 	str.w	r3, [sl]
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e7e9      	b.n	800ce12 <__ssputs_r+0x8a>
	...

0800ce40 <_svfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	4698      	mov	r8, r3
 800ce46:	898b      	ldrh	r3, [r1, #12]
 800ce48:	061b      	lsls	r3, r3, #24
 800ce4a:	b09d      	sub	sp, #116	@ 0x74
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	460d      	mov	r5, r1
 800ce50:	4614      	mov	r4, r2
 800ce52:	d510      	bpl.n	800ce76 <_svfiprintf_r+0x36>
 800ce54:	690b      	ldr	r3, [r1, #16]
 800ce56:	b973      	cbnz	r3, 800ce76 <_svfiprintf_r+0x36>
 800ce58:	2140      	movs	r1, #64	@ 0x40
 800ce5a:	f7fe fc27 	bl	800b6ac <_malloc_r>
 800ce5e:	6028      	str	r0, [r5, #0]
 800ce60:	6128      	str	r0, [r5, #16]
 800ce62:	b930      	cbnz	r0, 800ce72 <_svfiprintf_r+0x32>
 800ce64:	230c      	movs	r3, #12
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	b01d      	add	sp, #116	@ 0x74
 800ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce72:	2340      	movs	r3, #64	@ 0x40
 800ce74:	616b      	str	r3, [r5, #20]
 800ce76:	2300      	movs	r3, #0
 800ce78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce7a:	2320      	movs	r3, #32
 800ce7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce84:	2330      	movs	r3, #48	@ 0x30
 800ce86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d024 <_svfiprintf_r+0x1e4>
 800ce8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce8e:	f04f 0901 	mov.w	r9, #1
 800ce92:	4623      	mov	r3, r4
 800ce94:	469a      	mov	sl, r3
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	b10a      	cbz	r2, 800cea0 <_svfiprintf_r+0x60>
 800ce9c:	2a25      	cmp	r2, #37	@ 0x25
 800ce9e:	d1f9      	bne.n	800ce94 <_svfiprintf_r+0x54>
 800cea0:	ebba 0b04 	subs.w	fp, sl, r4
 800cea4:	d00b      	beq.n	800cebe <_svfiprintf_r+0x7e>
 800cea6:	465b      	mov	r3, fp
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff ff6b 	bl	800cd88 <__ssputs_r>
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f000 80a7 	beq.w	800d006 <_svfiprintf_r+0x1c6>
 800ceb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceba:	445a      	add	r2, fp
 800cebc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cebe:	f89a 3000 	ldrb.w	r3, [sl]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 809f 	beq.w	800d006 <_svfiprintf_r+0x1c6>
 800cec8:	2300      	movs	r3, #0
 800ceca:	f04f 32ff 	mov.w	r2, #4294967295
 800cece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced2:	f10a 0a01 	add.w	sl, sl, #1
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cede:	931a      	str	r3, [sp, #104]	@ 0x68
 800cee0:	4654      	mov	r4, sl
 800cee2:	2205      	movs	r2, #5
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	484e      	ldr	r0, [pc, #312]	@ (800d024 <_svfiprintf_r+0x1e4>)
 800ceea:	f7f3 f9f9 	bl	80002e0 <memchr>
 800ceee:	9a04      	ldr	r2, [sp, #16]
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_svfiprintf_r+0xea>
 800cef2:	06d0      	lsls	r0, r2, #27
 800cef4:	bf44      	itt	mi
 800cef6:	2320      	movmi	r3, #32
 800cef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cefc:	0711      	lsls	r1, r2, #28
 800cefe:	bf44      	itt	mi
 800cf00:	232b      	movmi	r3, #43	@ 0x2b
 800cf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf06:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf0c:	d015      	beq.n	800cf3a <_svfiprintf_r+0xfa>
 800cf0e:	9a07      	ldr	r2, [sp, #28]
 800cf10:	4654      	mov	r4, sl
 800cf12:	2000      	movs	r0, #0
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4621      	mov	r1, r4
 800cf1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1e:	3b30      	subs	r3, #48	@ 0x30
 800cf20:	2b09      	cmp	r3, #9
 800cf22:	d94b      	bls.n	800cfbc <_svfiprintf_r+0x17c>
 800cf24:	b1b0      	cbz	r0, 800cf54 <_svfiprintf_r+0x114>
 800cf26:	9207      	str	r2, [sp, #28]
 800cf28:	e014      	b.n	800cf54 <_svfiprintf_r+0x114>
 800cf2a:	eba0 0308 	sub.w	r3, r0, r8
 800cf2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	46a2      	mov	sl, r4
 800cf38:	e7d2      	b.n	800cee0 <_svfiprintf_r+0xa0>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	1d19      	adds	r1, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9103      	str	r1, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfbb      	ittet	lt
 800cf46:	425b      	neglt	r3, r3
 800cf48:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4c:	9307      	strge	r3, [sp, #28]
 800cf4e:	9307      	strlt	r3, [sp, #28]
 800cf50:	bfb8      	it	lt
 800cf52:	9204      	strlt	r2, [sp, #16]
 800cf54:	7823      	ldrb	r3, [r4, #0]
 800cf56:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf58:	d10a      	bne.n	800cf70 <_svfiprintf_r+0x130>
 800cf5a:	7863      	ldrb	r3, [r4, #1]
 800cf5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf5e:	d132      	bne.n	800cfc6 <_svfiprintf_r+0x186>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	1d1a      	adds	r2, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	9203      	str	r2, [sp, #12]
 800cf68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf6c:	3402      	adds	r4, #2
 800cf6e:	9305      	str	r3, [sp, #20]
 800cf70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d034 <_svfiprintf_r+0x1f4>
 800cf74:	7821      	ldrb	r1, [r4, #0]
 800cf76:	2203      	movs	r2, #3
 800cf78:	4650      	mov	r0, sl
 800cf7a:	f7f3 f9b1 	bl	80002e0 <memchr>
 800cf7e:	b138      	cbz	r0, 800cf90 <_svfiprintf_r+0x150>
 800cf80:	9b04      	ldr	r3, [sp, #16]
 800cf82:	eba0 000a 	sub.w	r0, r0, sl
 800cf86:	2240      	movs	r2, #64	@ 0x40
 800cf88:	4082      	lsls	r2, r0
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	3401      	adds	r4, #1
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf94:	4824      	ldr	r0, [pc, #144]	@ (800d028 <_svfiprintf_r+0x1e8>)
 800cf96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	f7f3 f9a0 	bl	80002e0 <memchr>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d036      	beq.n	800d012 <_svfiprintf_r+0x1d2>
 800cfa4:	4b21      	ldr	r3, [pc, #132]	@ (800d02c <_svfiprintf_r+0x1ec>)
 800cfa6:	bb1b      	cbnz	r3, 800cff0 <_svfiprintf_r+0x1b0>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	3307      	adds	r3, #7
 800cfac:	f023 0307 	bic.w	r3, r3, #7
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb6:	4433      	add	r3, r6
 800cfb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfba:	e76a      	b.n	800ce92 <_svfiprintf_r+0x52>
 800cfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	e7a8      	b.n	800cf18 <_svfiprintf_r+0xd8>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	3401      	adds	r4, #1
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	f04f 0c0a 	mov.w	ip, #10
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd8:	3a30      	subs	r2, #48	@ 0x30
 800cfda:	2a09      	cmp	r2, #9
 800cfdc:	d903      	bls.n	800cfe6 <_svfiprintf_r+0x1a6>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d0c6      	beq.n	800cf70 <_svfiprintf_r+0x130>
 800cfe2:	9105      	str	r1, [sp, #20]
 800cfe4:	e7c4      	b.n	800cf70 <_svfiprintf_r+0x130>
 800cfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfea:	4604      	mov	r4, r0
 800cfec:	2301      	movs	r3, #1
 800cfee:	e7f0      	b.n	800cfd2 <_svfiprintf_r+0x192>
 800cff0:	ab03      	add	r3, sp, #12
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	462a      	mov	r2, r5
 800cff6:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <_svfiprintf_r+0x1f0>)
 800cff8:	a904      	add	r1, sp, #16
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7fc fc90 	bl	8009920 <_printf_float>
 800d000:	1c42      	adds	r2, r0, #1
 800d002:	4606      	mov	r6, r0
 800d004:	d1d6      	bne.n	800cfb4 <_svfiprintf_r+0x174>
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	065b      	lsls	r3, r3, #25
 800d00a:	f53f af2d 	bmi.w	800ce68 <_svfiprintf_r+0x28>
 800d00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d010:	e72c      	b.n	800ce6c <_svfiprintf_r+0x2c>
 800d012:	ab03      	add	r3, sp, #12
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	462a      	mov	r2, r5
 800d018:	4b05      	ldr	r3, [pc, #20]	@ (800d030 <_svfiprintf_r+0x1f0>)
 800d01a:	a904      	add	r1, sp, #16
 800d01c:	4638      	mov	r0, r7
 800d01e:	f7fc ff07 	bl	8009e30 <_printf_i>
 800d022:	e7ed      	b.n	800d000 <_svfiprintf_r+0x1c0>
 800d024:	0800ec21 	.word	0x0800ec21
 800d028:	0800ec2b 	.word	0x0800ec2b
 800d02c:	08009921 	.word	0x08009921
 800d030:	0800cd89 	.word	0x0800cd89
 800d034:	0800ec27 	.word	0x0800ec27

0800d038 <__sfputc_r>:
 800d038:	6893      	ldr	r3, [r2, #8]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	b410      	push	{r4}
 800d040:	6093      	str	r3, [r2, #8]
 800d042:	da08      	bge.n	800d056 <__sfputc_r+0x1e>
 800d044:	6994      	ldr	r4, [r2, #24]
 800d046:	42a3      	cmp	r3, r4
 800d048:	db01      	blt.n	800d04e <__sfputc_r+0x16>
 800d04a:	290a      	cmp	r1, #10
 800d04c:	d103      	bne.n	800d056 <__sfputc_r+0x1e>
 800d04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d052:	f7fd bbae 	b.w	800a7b2 <__swbuf_r>
 800d056:	6813      	ldr	r3, [r2, #0]
 800d058:	1c58      	adds	r0, r3, #1
 800d05a:	6010      	str	r0, [r2, #0]
 800d05c:	7019      	strb	r1, [r3, #0]
 800d05e:	4608      	mov	r0, r1
 800d060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <__sfputs_r>:
 800d066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d068:	4606      	mov	r6, r0
 800d06a:	460f      	mov	r7, r1
 800d06c:	4614      	mov	r4, r2
 800d06e:	18d5      	adds	r5, r2, r3
 800d070:	42ac      	cmp	r4, r5
 800d072:	d101      	bne.n	800d078 <__sfputs_r+0x12>
 800d074:	2000      	movs	r0, #0
 800d076:	e007      	b.n	800d088 <__sfputs_r+0x22>
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	463a      	mov	r2, r7
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ffda 	bl	800d038 <__sfputc_r>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d1f3      	bne.n	800d070 <__sfputs_r+0xa>
 800d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d08c <_vfiprintf_r>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	460d      	mov	r5, r1
 800d092:	b09d      	sub	sp, #116	@ 0x74
 800d094:	4614      	mov	r4, r2
 800d096:	4698      	mov	r8, r3
 800d098:	4606      	mov	r6, r0
 800d09a:	b118      	cbz	r0, 800d0a4 <_vfiprintf_r+0x18>
 800d09c:	6a03      	ldr	r3, [r0, #32]
 800d09e:	b90b      	cbnz	r3, 800d0a4 <_vfiprintf_r+0x18>
 800d0a0:	f7fd fa7e 	bl	800a5a0 <__sinit>
 800d0a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0a6:	07d9      	lsls	r1, r3, #31
 800d0a8:	d405      	bmi.n	800d0b6 <_vfiprintf_r+0x2a>
 800d0aa:	89ab      	ldrh	r3, [r5, #12]
 800d0ac:	059a      	lsls	r2, r3, #22
 800d0ae:	d402      	bmi.n	800d0b6 <_vfiprintf_r+0x2a>
 800d0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0b2:	f7fd fc90 	bl	800a9d6 <__retarget_lock_acquire_recursive>
 800d0b6:	89ab      	ldrh	r3, [r5, #12]
 800d0b8:	071b      	lsls	r3, r3, #28
 800d0ba:	d501      	bpl.n	800d0c0 <_vfiprintf_r+0x34>
 800d0bc:	692b      	ldr	r3, [r5, #16]
 800d0be:	b99b      	cbnz	r3, 800d0e8 <_vfiprintf_r+0x5c>
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7fd fbb4 	bl	800a830 <__swsetup_r>
 800d0c8:	b170      	cbz	r0, 800d0e8 <_vfiprintf_r+0x5c>
 800d0ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0cc:	07dc      	lsls	r4, r3, #31
 800d0ce:	d504      	bpl.n	800d0da <_vfiprintf_r+0x4e>
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	b01d      	add	sp, #116	@ 0x74
 800d0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0da:	89ab      	ldrh	r3, [r5, #12]
 800d0dc:	0598      	lsls	r0, r3, #22
 800d0de:	d4f7      	bmi.n	800d0d0 <_vfiprintf_r+0x44>
 800d0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0e2:	f7fd fc79 	bl	800a9d8 <__retarget_lock_release_recursive>
 800d0e6:	e7f3      	b.n	800d0d0 <_vfiprintf_r+0x44>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ec:	2320      	movs	r3, #32
 800d0ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f6:	2330      	movs	r3, #48	@ 0x30
 800d0f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2a8 <_vfiprintf_r+0x21c>
 800d0fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d100:	f04f 0901 	mov.w	r9, #1
 800d104:	4623      	mov	r3, r4
 800d106:	469a      	mov	sl, r3
 800d108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d10c:	b10a      	cbz	r2, 800d112 <_vfiprintf_r+0x86>
 800d10e:	2a25      	cmp	r2, #37	@ 0x25
 800d110:	d1f9      	bne.n	800d106 <_vfiprintf_r+0x7a>
 800d112:	ebba 0b04 	subs.w	fp, sl, r4
 800d116:	d00b      	beq.n	800d130 <_vfiprintf_r+0xa4>
 800d118:	465b      	mov	r3, fp
 800d11a:	4622      	mov	r2, r4
 800d11c:	4629      	mov	r1, r5
 800d11e:	4630      	mov	r0, r6
 800d120:	f7ff ffa1 	bl	800d066 <__sfputs_r>
 800d124:	3001      	adds	r0, #1
 800d126:	f000 80a7 	beq.w	800d278 <_vfiprintf_r+0x1ec>
 800d12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d12c:	445a      	add	r2, fp
 800d12e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d130:	f89a 3000 	ldrb.w	r3, [sl]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 809f 	beq.w	800d278 <_vfiprintf_r+0x1ec>
 800d13a:	2300      	movs	r3, #0
 800d13c:	f04f 32ff 	mov.w	r2, #4294967295
 800d140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d144:	f10a 0a01 	add.w	sl, sl, #1
 800d148:	9304      	str	r3, [sp, #16]
 800d14a:	9307      	str	r3, [sp, #28]
 800d14c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d150:	931a      	str	r3, [sp, #104]	@ 0x68
 800d152:	4654      	mov	r4, sl
 800d154:	2205      	movs	r2, #5
 800d156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15a:	4853      	ldr	r0, [pc, #332]	@ (800d2a8 <_vfiprintf_r+0x21c>)
 800d15c:	f7f3 f8c0 	bl	80002e0 <memchr>
 800d160:	9a04      	ldr	r2, [sp, #16]
 800d162:	b9d8      	cbnz	r0, 800d19c <_vfiprintf_r+0x110>
 800d164:	06d1      	lsls	r1, r2, #27
 800d166:	bf44      	itt	mi
 800d168:	2320      	movmi	r3, #32
 800d16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d16e:	0713      	lsls	r3, r2, #28
 800d170:	bf44      	itt	mi
 800d172:	232b      	movmi	r3, #43	@ 0x2b
 800d174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d178:	f89a 3000 	ldrb.w	r3, [sl]
 800d17c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d17e:	d015      	beq.n	800d1ac <_vfiprintf_r+0x120>
 800d180:	9a07      	ldr	r2, [sp, #28]
 800d182:	4654      	mov	r4, sl
 800d184:	2000      	movs	r0, #0
 800d186:	f04f 0c0a 	mov.w	ip, #10
 800d18a:	4621      	mov	r1, r4
 800d18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d190:	3b30      	subs	r3, #48	@ 0x30
 800d192:	2b09      	cmp	r3, #9
 800d194:	d94b      	bls.n	800d22e <_vfiprintf_r+0x1a2>
 800d196:	b1b0      	cbz	r0, 800d1c6 <_vfiprintf_r+0x13a>
 800d198:	9207      	str	r2, [sp, #28]
 800d19a:	e014      	b.n	800d1c6 <_vfiprintf_r+0x13a>
 800d19c:	eba0 0308 	sub.w	r3, r0, r8
 800d1a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	9304      	str	r3, [sp, #16]
 800d1a8:	46a2      	mov	sl, r4
 800d1aa:	e7d2      	b.n	800d152 <_vfiprintf_r+0xc6>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	1d19      	adds	r1, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	9103      	str	r1, [sp, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	bfbb      	ittet	lt
 800d1b8:	425b      	neglt	r3, r3
 800d1ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d1be:	9307      	strge	r3, [sp, #28]
 800d1c0:	9307      	strlt	r3, [sp, #28]
 800d1c2:	bfb8      	it	lt
 800d1c4:	9204      	strlt	r2, [sp, #16]
 800d1c6:	7823      	ldrb	r3, [r4, #0]
 800d1c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1ca:	d10a      	bne.n	800d1e2 <_vfiprintf_r+0x156>
 800d1cc:	7863      	ldrb	r3, [r4, #1]
 800d1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1d0:	d132      	bne.n	800d238 <_vfiprintf_r+0x1ac>
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	1d1a      	adds	r2, r3, #4
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	9203      	str	r2, [sp, #12]
 800d1da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1de:	3402      	adds	r4, #2
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2b8 <_vfiprintf_r+0x22c>
 800d1e6:	7821      	ldrb	r1, [r4, #0]
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	f7f3 f878 	bl	80002e0 <memchr>
 800d1f0:	b138      	cbz	r0, 800d202 <_vfiprintf_r+0x176>
 800d1f2:	9b04      	ldr	r3, [sp, #16]
 800d1f4:	eba0 000a 	sub.w	r0, r0, sl
 800d1f8:	2240      	movs	r2, #64	@ 0x40
 800d1fa:	4082      	lsls	r2, r0
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	3401      	adds	r4, #1
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d206:	4829      	ldr	r0, [pc, #164]	@ (800d2ac <_vfiprintf_r+0x220>)
 800d208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d20c:	2206      	movs	r2, #6
 800d20e:	f7f3 f867 	bl	80002e0 <memchr>
 800d212:	2800      	cmp	r0, #0
 800d214:	d03f      	beq.n	800d296 <_vfiprintf_r+0x20a>
 800d216:	4b26      	ldr	r3, [pc, #152]	@ (800d2b0 <_vfiprintf_r+0x224>)
 800d218:	bb1b      	cbnz	r3, 800d262 <_vfiprintf_r+0x1d6>
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	3307      	adds	r3, #7
 800d21e:	f023 0307 	bic.w	r3, r3, #7
 800d222:	3308      	adds	r3, #8
 800d224:	9303      	str	r3, [sp, #12]
 800d226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d228:	443b      	add	r3, r7
 800d22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d22c:	e76a      	b.n	800d104 <_vfiprintf_r+0x78>
 800d22e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d232:	460c      	mov	r4, r1
 800d234:	2001      	movs	r0, #1
 800d236:	e7a8      	b.n	800d18a <_vfiprintf_r+0xfe>
 800d238:	2300      	movs	r3, #0
 800d23a:	3401      	adds	r4, #1
 800d23c:	9305      	str	r3, [sp, #20]
 800d23e:	4619      	mov	r1, r3
 800d240:	f04f 0c0a 	mov.w	ip, #10
 800d244:	4620      	mov	r0, r4
 800d246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d24a:	3a30      	subs	r2, #48	@ 0x30
 800d24c:	2a09      	cmp	r2, #9
 800d24e:	d903      	bls.n	800d258 <_vfiprintf_r+0x1cc>
 800d250:	2b00      	cmp	r3, #0
 800d252:	d0c6      	beq.n	800d1e2 <_vfiprintf_r+0x156>
 800d254:	9105      	str	r1, [sp, #20]
 800d256:	e7c4      	b.n	800d1e2 <_vfiprintf_r+0x156>
 800d258:	fb0c 2101 	mla	r1, ip, r1, r2
 800d25c:	4604      	mov	r4, r0
 800d25e:	2301      	movs	r3, #1
 800d260:	e7f0      	b.n	800d244 <_vfiprintf_r+0x1b8>
 800d262:	ab03      	add	r3, sp, #12
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	462a      	mov	r2, r5
 800d268:	4b12      	ldr	r3, [pc, #72]	@ (800d2b4 <_vfiprintf_r+0x228>)
 800d26a:	a904      	add	r1, sp, #16
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7fc fb57 	bl	8009920 <_printf_float>
 800d272:	4607      	mov	r7, r0
 800d274:	1c78      	adds	r0, r7, #1
 800d276:	d1d6      	bne.n	800d226 <_vfiprintf_r+0x19a>
 800d278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	d405      	bmi.n	800d28a <_vfiprintf_r+0x1fe>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	059a      	lsls	r2, r3, #22
 800d282:	d402      	bmi.n	800d28a <_vfiprintf_r+0x1fe>
 800d284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d286:	f7fd fba7 	bl	800a9d8 <__retarget_lock_release_recursive>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	065b      	lsls	r3, r3, #25
 800d28e:	f53f af1f 	bmi.w	800d0d0 <_vfiprintf_r+0x44>
 800d292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d294:	e71e      	b.n	800d0d4 <_vfiprintf_r+0x48>
 800d296:	ab03      	add	r3, sp, #12
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	462a      	mov	r2, r5
 800d29c:	4b05      	ldr	r3, [pc, #20]	@ (800d2b4 <_vfiprintf_r+0x228>)
 800d29e:	a904      	add	r1, sp, #16
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f7fc fdc5 	bl	8009e30 <_printf_i>
 800d2a6:	e7e4      	b.n	800d272 <_vfiprintf_r+0x1e6>
 800d2a8:	0800ec21 	.word	0x0800ec21
 800d2ac:	0800ec2b 	.word	0x0800ec2b
 800d2b0:	08009921 	.word	0x08009921
 800d2b4:	0800d067 	.word	0x0800d067
 800d2b8:	0800ec27 	.word	0x0800ec27

0800d2bc <__sflush_r>:
 800d2bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	0716      	lsls	r6, r2, #28
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	d454      	bmi.n	800d376 <__sflush_r+0xba>
 800d2cc:	684b      	ldr	r3, [r1, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	dc02      	bgt.n	800d2d8 <__sflush_r+0x1c>
 800d2d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	dd48      	ble.n	800d36a <__sflush_r+0xae>
 800d2d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2da:	2e00      	cmp	r6, #0
 800d2dc:	d045      	beq.n	800d36a <__sflush_r+0xae>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2e4:	682f      	ldr	r7, [r5, #0]
 800d2e6:	6a21      	ldr	r1, [r4, #32]
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	d030      	beq.n	800d34e <__sflush_r+0x92>
 800d2ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	0759      	lsls	r1, r3, #29
 800d2f2:	d505      	bpl.n	800d300 <__sflush_r+0x44>
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	1ad2      	subs	r2, r2, r3
 800d2f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2fa:	b10b      	cbz	r3, 800d300 <__sflush_r+0x44>
 800d2fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	2300      	movs	r3, #0
 800d302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d304:	6a21      	ldr	r1, [r4, #32]
 800d306:	4628      	mov	r0, r5
 800d308:	47b0      	blx	r6
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	d106      	bne.n	800d31e <__sflush_r+0x62>
 800d310:	6829      	ldr	r1, [r5, #0]
 800d312:	291d      	cmp	r1, #29
 800d314:	d82b      	bhi.n	800d36e <__sflush_r+0xb2>
 800d316:	4a2a      	ldr	r2, [pc, #168]	@ (800d3c0 <__sflush_r+0x104>)
 800d318:	410a      	asrs	r2, r1
 800d31a:	07d6      	lsls	r6, r2, #31
 800d31c:	d427      	bmi.n	800d36e <__sflush_r+0xb2>
 800d31e:	2200      	movs	r2, #0
 800d320:	6062      	str	r2, [r4, #4]
 800d322:	04d9      	lsls	r1, r3, #19
 800d324:	6922      	ldr	r2, [r4, #16]
 800d326:	6022      	str	r2, [r4, #0]
 800d328:	d504      	bpl.n	800d334 <__sflush_r+0x78>
 800d32a:	1c42      	adds	r2, r0, #1
 800d32c:	d101      	bne.n	800d332 <__sflush_r+0x76>
 800d32e:	682b      	ldr	r3, [r5, #0]
 800d330:	b903      	cbnz	r3, 800d334 <__sflush_r+0x78>
 800d332:	6560      	str	r0, [r4, #84]	@ 0x54
 800d334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d336:	602f      	str	r7, [r5, #0]
 800d338:	b1b9      	cbz	r1, 800d36a <__sflush_r+0xae>
 800d33a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d33e:	4299      	cmp	r1, r3
 800d340:	d002      	beq.n	800d348 <__sflush_r+0x8c>
 800d342:	4628      	mov	r0, r5
 800d344:	f7fe f93e 	bl	800b5c4 <_free_r>
 800d348:	2300      	movs	r3, #0
 800d34a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d34c:	e00d      	b.n	800d36a <__sflush_r+0xae>
 800d34e:	2301      	movs	r3, #1
 800d350:	4628      	mov	r0, r5
 800d352:	47b0      	blx	r6
 800d354:	4602      	mov	r2, r0
 800d356:	1c50      	adds	r0, r2, #1
 800d358:	d1c9      	bne.n	800d2ee <__sflush_r+0x32>
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d0c6      	beq.n	800d2ee <__sflush_r+0x32>
 800d360:	2b1d      	cmp	r3, #29
 800d362:	d001      	beq.n	800d368 <__sflush_r+0xac>
 800d364:	2b16      	cmp	r3, #22
 800d366:	d11e      	bne.n	800d3a6 <__sflush_r+0xea>
 800d368:	602f      	str	r7, [r5, #0]
 800d36a:	2000      	movs	r0, #0
 800d36c:	e022      	b.n	800d3b4 <__sflush_r+0xf8>
 800d36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d372:	b21b      	sxth	r3, r3
 800d374:	e01b      	b.n	800d3ae <__sflush_r+0xf2>
 800d376:	690f      	ldr	r7, [r1, #16]
 800d378:	2f00      	cmp	r7, #0
 800d37a:	d0f6      	beq.n	800d36a <__sflush_r+0xae>
 800d37c:	0793      	lsls	r3, r2, #30
 800d37e:	680e      	ldr	r6, [r1, #0]
 800d380:	bf08      	it	eq
 800d382:	694b      	ldreq	r3, [r1, #20]
 800d384:	600f      	str	r7, [r1, #0]
 800d386:	bf18      	it	ne
 800d388:	2300      	movne	r3, #0
 800d38a:	eba6 0807 	sub.w	r8, r6, r7
 800d38e:	608b      	str	r3, [r1, #8]
 800d390:	f1b8 0f00 	cmp.w	r8, #0
 800d394:	dde9      	ble.n	800d36a <__sflush_r+0xae>
 800d396:	6a21      	ldr	r1, [r4, #32]
 800d398:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d39a:	4643      	mov	r3, r8
 800d39c:	463a      	mov	r2, r7
 800d39e:	4628      	mov	r0, r5
 800d3a0:	47b0      	blx	r6
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	dc08      	bgt.n	800d3b8 <__sflush_r+0xfc>
 800d3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ae:	81a3      	strh	r3, [r4, #12]
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b8:	4407      	add	r7, r0
 800d3ba:	eba8 0800 	sub.w	r8, r8, r0
 800d3be:	e7e7      	b.n	800d390 <__sflush_r+0xd4>
 800d3c0:	dfbffffe 	.word	0xdfbffffe

0800d3c4 <_fflush_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	690b      	ldr	r3, [r1, #16]
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	b913      	cbnz	r3, 800d3d4 <_fflush_r+0x10>
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	b118      	cbz	r0, 800d3de <_fflush_r+0x1a>
 800d3d6:	6a03      	ldr	r3, [r0, #32]
 800d3d8:	b90b      	cbnz	r3, 800d3de <_fflush_r+0x1a>
 800d3da:	f7fd f8e1 	bl	800a5a0 <__sinit>
 800d3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d0f3      	beq.n	800d3ce <_fflush_r+0xa>
 800d3e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3e8:	07d0      	lsls	r0, r2, #31
 800d3ea:	d404      	bmi.n	800d3f6 <_fflush_r+0x32>
 800d3ec:	0599      	lsls	r1, r3, #22
 800d3ee:	d402      	bmi.n	800d3f6 <_fflush_r+0x32>
 800d3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3f2:	f7fd faf0 	bl	800a9d6 <__retarget_lock_acquire_recursive>
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	f7ff ff5f 	bl	800d2bc <__sflush_r>
 800d3fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d400:	07da      	lsls	r2, r3, #31
 800d402:	4605      	mov	r5, r0
 800d404:	d4e4      	bmi.n	800d3d0 <_fflush_r+0xc>
 800d406:	89a3      	ldrh	r3, [r4, #12]
 800d408:	059b      	lsls	r3, r3, #22
 800d40a:	d4e1      	bmi.n	800d3d0 <_fflush_r+0xc>
 800d40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d40e:	f7fd fae3 	bl	800a9d8 <__retarget_lock_release_recursive>
 800d412:	e7dd      	b.n	800d3d0 <_fflush_r+0xc>

0800d414 <__swhatbuf_r>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	460c      	mov	r4, r1
 800d418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d41c:	2900      	cmp	r1, #0
 800d41e:	b096      	sub	sp, #88	@ 0x58
 800d420:	4615      	mov	r5, r2
 800d422:	461e      	mov	r6, r3
 800d424:	da0d      	bge.n	800d442 <__swhatbuf_r+0x2e>
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d42c:	f04f 0100 	mov.w	r1, #0
 800d430:	bf14      	ite	ne
 800d432:	2340      	movne	r3, #64	@ 0x40
 800d434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d438:	2000      	movs	r0, #0
 800d43a:	6031      	str	r1, [r6, #0]
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	b016      	add	sp, #88	@ 0x58
 800d440:	bd70      	pop	{r4, r5, r6, pc}
 800d442:	466a      	mov	r2, sp
 800d444:	f000 f874 	bl	800d530 <_fstat_r>
 800d448:	2800      	cmp	r0, #0
 800d44a:	dbec      	blt.n	800d426 <__swhatbuf_r+0x12>
 800d44c:	9901      	ldr	r1, [sp, #4]
 800d44e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d456:	4259      	negs	r1, r3
 800d458:	4159      	adcs	r1, r3
 800d45a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d45e:	e7eb      	b.n	800d438 <__swhatbuf_r+0x24>

0800d460 <__smakebuf_r>:
 800d460:	898b      	ldrh	r3, [r1, #12]
 800d462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d464:	079d      	lsls	r5, r3, #30
 800d466:	4606      	mov	r6, r0
 800d468:	460c      	mov	r4, r1
 800d46a:	d507      	bpl.n	800d47c <__smakebuf_r+0x1c>
 800d46c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	6123      	str	r3, [r4, #16]
 800d474:	2301      	movs	r3, #1
 800d476:	6163      	str	r3, [r4, #20]
 800d478:	b003      	add	sp, #12
 800d47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d47c:	ab01      	add	r3, sp, #4
 800d47e:	466a      	mov	r2, sp
 800d480:	f7ff ffc8 	bl	800d414 <__swhatbuf_r>
 800d484:	9f00      	ldr	r7, [sp, #0]
 800d486:	4605      	mov	r5, r0
 800d488:	4639      	mov	r1, r7
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7fe f90e 	bl	800b6ac <_malloc_r>
 800d490:	b948      	cbnz	r0, 800d4a6 <__smakebuf_r+0x46>
 800d492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d496:	059a      	lsls	r2, r3, #22
 800d498:	d4ee      	bmi.n	800d478 <__smakebuf_r+0x18>
 800d49a:	f023 0303 	bic.w	r3, r3, #3
 800d49e:	f043 0302 	orr.w	r3, r3, #2
 800d4a2:	81a3      	strh	r3, [r4, #12]
 800d4a4:	e7e2      	b.n	800d46c <__smakebuf_r+0xc>
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	6020      	str	r0, [r4, #0]
 800d4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d4b6:	b15b      	cbz	r3, 800d4d0 <__smakebuf_r+0x70>
 800d4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f000 f849 	bl	800d554 <_isatty_r>
 800d4c2:	b128      	cbz	r0, 800d4d0 <__smakebuf_r+0x70>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	f023 0303 	bic.w	r3, r3, #3
 800d4ca:	f043 0301 	orr.w	r3, r3, #1
 800d4ce:	81a3      	strh	r3, [r4, #12]
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	431d      	orrs	r5, r3
 800d4d4:	81a5      	strh	r5, [r4, #12]
 800d4d6:	e7cf      	b.n	800d478 <__smakebuf_r+0x18>

0800d4d8 <memmove>:
 800d4d8:	4288      	cmp	r0, r1
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	eb01 0402 	add.w	r4, r1, r2
 800d4e0:	d902      	bls.n	800d4e8 <memmove+0x10>
 800d4e2:	4284      	cmp	r4, r0
 800d4e4:	4623      	mov	r3, r4
 800d4e6:	d807      	bhi.n	800d4f8 <memmove+0x20>
 800d4e8:	1e43      	subs	r3, r0, #1
 800d4ea:	42a1      	cmp	r1, r4
 800d4ec:	d008      	beq.n	800d500 <memmove+0x28>
 800d4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4f6:	e7f8      	b.n	800d4ea <memmove+0x12>
 800d4f8:	4402      	add	r2, r0
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	428a      	cmp	r2, r1
 800d4fe:	d100      	bne.n	800d502 <memmove+0x2a>
 800d500:	bd10      	pop	{r4, pc}
 800d502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d50a:	e7f7      	b.n	800d4fc <memmove+0x24>

0800d50c <strncmp>:
 800d50c:	b510      	push	{r4, lr}
 800d50e:	b16a      	cbz	r2, 800d52c <strncmp+0x20>
 800d510:	3901      	subs	r1, #1
 800d512:	1884      	adds	r4, r0, r2
 800d514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d518:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d103      	bne.n	800d528 <strncmp+0x1c>
 800d520:	42a0      	cmp	r0, r4
 800d522:	d001      	beq.n	800d528 <strncmp+0x1c>
 800d524:	2a00      	cmp	r2, #0
 800d526:	d1f5      	bne.n	800d514 <strncmp+0x8>
 800d528:	1ad0      	subs	r0, r2, r3
 800d52a:	bd10      	pop	{r4, pc}
 800d52c:	4610      	mov	r0, r2
 800d52e:	e7fc      	b.n	800d52a <strncmp+0x1e>

0800d530 <_fstat_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	4d07      	ldr	r5, [pc, #28]	@ (800d550 <_fstat_r+0x20>)
 800d534:	2300      	movs	r3, #0
 800d536:	4604      	mov	r4, r0
 800d538:	4608      	mov	r0, r1
 800d53a:	4611      	mov	r1, r2
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	f7f4 fdc7 	bl	80020d0 <_fstat>
 800d542:	1c43      	adds	r3, r0, #1
 800d544:	d102      	bne.n	800d54c <_fstat_r+0x1c>
 800d546:	682b      	ldr	r3, [r5, #0]
 800d548:	b103      	cbz	r3, 800d54c <_fstat_r+0x1c>
 800d54a:	6023      	str	r3, [r4, #0]
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	bf00      	nop
 800d550:	24000bac 	.word	0x24000bac

0800d554 <_isatty_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d06      	ldr	r5, [pc, #24]	@ (800d570 <_isatty_r+0x1c>)
 800d558:	2300      	movs	r3, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	602b      	str	r3, [r5, #0]
 800d560:	f7f4 fdc6 	bl	80020f0 <_isatty>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d102      	bne.n	800d56e <_isatty_r+0x1a>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b103      	cbz	r3, 800d56e <_isatty_r+0x1a>
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	bd38      	pop	{r3, r4, r5, pc}
 800d570:	24000bac 	.word	0x24000bac

0800d574 <_sbrk_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_sbrk_r+0x1c>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	f7f4 fdce 	bl	8002120 <_sbrk>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_sbrk_r+0x1a>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_sbrk_r+0x1a>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	24000bac 	.word	0x24000bac
 800d594:	00000000 	.word	0x00000000

0800d598 <nan>:
 800d598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5a0 <nan+0x8>
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	7ff80000 	.word	0x7ff80000

0800d5a8 <__assert_func>:
 800d5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b09      	ldr	r3, [pc, #36]	@ (800d5d4 <__assert_func+0x2c>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	68d8      	ldr	r0, [r3, #12]
 800d5b6:	b954      	cbnz	r4, 800d5ce <__assert_func+0x26>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <__assert_func+0x30>)
 800d5ba:	461c      	mov	r4, r3
 800d5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5c0:	9100      	str	r1, [sp, #0]
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	4905      	ldr	r1, [pc, #20]	@ (800d5dc <__assert_func+0x34>)
 800d5c6:	f000 fba7 	bl	800dd18 <fiprintf>
 800d5ca:	f000 fbb7 	bl	800dd3c <abort>
 800d5ce:	4b04      	ldr	r3, [pc, #16]	@ (800d5e0 <__assert_func+0x38>)
 800d5d0:	e7f4      	b.n	800d5bc <__assert_func+0x14>
 800d5d2:	bf00      	nop
 800d5d4:	24000028 	.word	0x24000028
 800d5d8:	0800ec75 	.word	0x0800ec75
 800d5dc:	0800ec47 	.word	0x0800ec47
 800d5e0:	0800ec3a 	.word	0x0800ec3a

0800d5e4 <_calloc_r>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d5ea:	b93c      	cbnz	r4, 800d5fc <_calloc_r+0x18>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7fe f85d 	bl	800b6ac <_malloc_r>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b928      	cbnz	r0, 800d602 <_calloc_r+0x1e>
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	220c      	movs	r2, #12
 800d5fe:	6002      	str	r2, [r0, #0]
 800d600:	e7f9      	b.n	800d5f6 <_calloc_r+0x12>
 800d602:	462a      	mov	r2, r5
 800d604:	4621      	mov	r1, r4
 800d606:	f7fd f969 	bl	800a8dc <memset>
 800d60a:	e7f5      	b.n	800d5f8 <_calloc_r+0x14>

0800d60c <rshift>:
 800d60c:	6903      	ldr	r3, [r0, #16]
 800d60e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d616:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d61a:	f100 0414 	add.w	r4, r0, #20
 800d61e:	dd45      	ble.n	800d6ac <rshift+0xa0>
 800d620:	f011 011f 	ands.w	r1, r1, #31
 800d624:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d628:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d62c:	d10c      	bne.n	800d648 <rshift+0x3c>
 800d62e:	f100 0710 	add.w	r7, r0, #16
 800d632:	4629      	mov	r1, r5
 800d634:	42b1      	cmp	r1, r6
 800d636:	d334      	bcc.n	800d6a2 <rshift+0x96>
 800d638:	1a9b      	subs	r3, r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	1eea      	subs	r2, r5, #3
 800d63e:	4296      	cmp	r6, r2
 800d640:	bf38      	it	cc
 800d642:	2300      	movcc	r3, #0
 800d644:	4423      	add	r3, r4
 800d646:	e015      	b.n	800d674 <rshift+0x68>
 800d648:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d64c:	f1c1 0820 	rsb	r8, r1, #32
 800d650:	40cf      	lsrs	r7, r1
 800d652:	f105 0e04 	add.w	lr, r5, #4
 800d656:	46a1      	mov	r9, r4
 800d658:	4576      	cmp	r6, lr
 800d65a:	46f4      	mov	ip, lr
 800d65c:	d815      	bhi.n	800d68a <rshift+0x7e>
 800d65e:	1a9a      	subs	r2, r3, r2
 800d660:	0092      	lsls	r2, r2, #2
 800d662:	3a04      	subs	r2, #4
 800d664:	3501      	adds	r5, #1
 800d666:	42ae      	cmp	r6, r5
 800d668:	bf38      	it	cc
 800d66a:	2200      	movcc	r2, #0
 800d66c:	18a3      	adds	r3, r4, r2
 800d66e:	50a7      	str	r7, [r4, r2]
 800d670:	b107      	cbz	r7, 800d674 <rshift+0x68>
 800d672:	3304      	adds	r3, #4
 800d674:	1b1a      	subs	r2, r3, r4
 800d676:	42a3      	cmp	r3, r4
 800d678:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d67c:	bf08      	it	eq
 800d67e:	2300      	moveq	r3, #0
 800d680:	6102      	str	r2, [r0, #16]
 800d682:	bf08      	it	eq
 800d684:	6143      	streq	r3, [r0, #20]
 800d686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68a:	f8dc c000 	ldr.w	ip, [ip]
 800d68e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d692:	ea4c 0707 	orr.w	r7, ip, r7
 800d696:	f849 7b04 	str.w	r7, [r9], #4
 800d69a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d69e:	40cf      	lsrs	r7, r1
 800d6a0:	e7da      	b.n	800d658 <rshift+0x4c>
 800d6a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d6a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d6aa:	e7c3      	b.n	800d634 <rshift+0x28>
 800d6ac:	4623      	mov	r3, r4
 800d6ae:	e7e1      	b.n	800d674 <rshift+0x68>

0800d6b0 <__hexdig_fun>:
 800d6b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d6b4:	2b09      	cmp	r3, #9
 800d6b6:	d802      	bhi.n	800d6be <__hexdig_fun+0xe>
 800d6b8:	3820      	subs	r0, #32
 800d6ba:	b2c0      	uxtb	r0, r0
 800d6bc:	4770      	bx	lr
 800d6be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d6c2:	2b05      	cmp	r3, #5
 800d6c4:	d801      	bhi.n	800d6ca <__hexdig_fun+0x1a>
 800d6c6:	3847      	subs	r0, #71	@ 0x47
 800d6c8:	e7f7      	b.n	800d6ba <__hexdig_fun+0xa>
 800d6ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d6ce:	2b05      	cmp	r3, #5
 800d6d0:	d801      	bhi.n	800d6d6 <__hexdig_fun+0x26>
 800d6d2:	3827      	subs	r0, #39	@ 0x27
 800d6d4:	e7f1      	b.n	800d6ba <__hexdig_fun+0xa>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	4770      	bx	lr
	...

0800d6dc <__gethex>:
 800d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	b085      	sub	sp, #20
 800d6e2:	468a      	mov	sl, r1
 800d6e4:	9302      	str	r3, [sp, #8]
 800d6e6:	680b      	ldr	r3, [r1, #0]
 800d6e8:	9001      	str	r0, [sp, #4]
 800d6ea:	4690      	mov	r8, r2
 800d6ec:	1c9c      	adds	r4, r3, #2
 800d6ee:	46a1      	mov	r9, r4
 800d6f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d6f4:	2830      	cmp	r0, #48	@ 0x30
 800d6f6:	d0fa      	beq.n	800d6ee <__gethex+0x12>
 800d6f8:	eba9 0303 	sub.w	r3, r9, r3
 800d6fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d700:	f7ff ffd6 	bl	800d6b0 <__hexdig_fun>
 800d704:	4605      	mov	r5, r0
 800d706:	2800      	cmp	r0, #0
 800d708:	d168      	bne.n	800d7dc <__gethex+0x100>
 800d70a:	49a0      	ldr	r1, [pc, #640]	@ (800d98c <__gethex+0x2b0>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	4648      	mov	r0, r9
 800d710:	f7ff fefc 	bl	800d50c <strncmp>
 800d714:	4607      	mov	r7, r0
 800d716:	2800      	cmp	r0, #0
 800d718:	d167      	bne.n	800d7ea <__gethex+0x10e>
 800d71a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d71e:	4626      	mov	r6, r4
 800d720:	f7ff ffc6 	bl	800d6b0 <__hexdig_fun>
 800d724:	2800      	cmp	r0, #0
 800d726:	d062      	beq.n	800d7ee <__gethex+0x112>
 800d728:	4623      	mov	r3, r4
 800d72a:	7818      	ldrb	r0, [r3, #0]
 800d72c:	2830      	cmp	r0, #48	@ 0x30
 800d72e:	4699      	mov	r9, r3
 800d730:	f103 0301 	add.w	r3, r3, #1
 800d734:	d0f9      	beq.n	800d72a <__gethex+0x4e>
 800d736:	f7ff ffbb 	bl	800d6b0 <__hexdig_fun>
 800d73a:	fab0 f580 	clz	r5, r0
 800d73e:	096d      	lsrs	r5, r5, #5
 800d740:	f04f 0b01 	mov.w	fp, #1
 800d744:	464a      	mov	r2, r9
 800d746:	4616      	mov	r6, r2
 800d748:	3201      	adds	r2, #1
 800d74a:	7830      	ldrb	r0, [r6, #0]
 800d74c:	f7ff ffb0 	bl	800d6b0 <__hexdig_fun>
 800d750:	2800      	cmp	r0, #0
 800d752:	d1f8      	bne.n	800d746 <__gethex+0x6a>
 800d754:	498d      	ldr	r1, [pc, #564]	@ (800d98c <__gethex+0x2b0>)
 800d756:	2201      	movs	r2, #1
 800d758:	4630      	mov	r0, r6
 800d75a:	f7ff fed7 	bl	800d50c <strncmp>
 800d75e:	2800      	cmp	r0, #0
 800d760:	d13f      	bne.n	800d7e2 <__gethex+0x106>
 800d762:	b944      	cbnz	r4, 800d776 <__gethex+0x9a>
 800d764:	1c74      	adds	r4, r6, #1
 800d766:	4622      	mov	r2, r4
 800d768:	4616      	mov	r6, r2
 800d76a:	3201      	adds	r2, #1
 800d76c:	7830      	ldrb	r0, [r6, #0]
 800d76e:	f7ff ff9f 	bl	800d6b0 <__hexdig_fun>
 800d772:	2800      	cmp	r0, #0
 800d774:	d1f8      	bne.n	800d768 <__gethex+0x8c>
 800d776:	1ba4      	subs	r4, r4, r6
 800d778:	00a7      	lsls	r7, r4, #2
 800d77a:	7833      	ldrb	r3, [r6, #0]
 800d77c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d780:	2b50      	cmp	r3, #80	@ 0x50
 800d782:	d13e      	bne.n	800d802 <__gethex+0x126>
 800d784:	7873      	ldrb	r3, [r6, #1]
 800d786:	2b2b      	cmp	r3, #43	@ 0x2b
 800d788:	d033      	beq.n	800d7f2 <__gethex+0x116>
 800d78a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d78c:	d034      	beq.n	800d7f8 <__gethex+0x11c>
 800d78e:	1c71      	adds	r1, r6, #1
 800d790:	2400      	movs	r4, #0
 800d792:	7808      	ldrb	r0, [r1, #0]
 800d794:	f7ff ff8c 	bl	800d6b0 <__hexdig_fun>
 800d798:	1e43      	subs	r3, r0, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b18      	cmp	r3, #24
 800d79e:	d830      	bhi.n	800d802 <__gethex+0x126>
 800d7a0:	f1a0 0210 	sub.w	r2, r0, #16
 800d7a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7a8:	f7ff ff82 	bl	800d6b0 <__hexdig_fun>
 800d7ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800d7b0:	fa5f fc8c 	uxtb.w	ip, ip
 800d7b4:	f1bc 0f18 	cmp.w	ip, #24
 800d7b8:	f04f 030a 	mov.w	r3, #10
 800d7bc:	d91e      	bls.n	800d7fc <__gethex+0x120>
 800d7be:	b104      	cbz	r4, 800d7c2 <__gethex+0xe6>
 800d7c0:	4252      	negs	r2, r2
 800d7c2:	4417      	add	r7, r2
 800d7c4:	f8ca 1000 	str.w	r1, [sl]
 800d7c8:	b1ed      	cbz	r5, 800d806 <__gethex+0x12a>
 800d7ca:	f1bb 0f00 	cmp.w	fp, #0
 800d7ce:	bf0c      	ite	eq
 800d7d0:	2506      	moveq	r5, #6
 800d7d2:	2500      	movne	r5, #0
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	b005      	add	sp, #20
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	2500      	movs	r5, #0
 800d7de:	462c      	mov	r4, r5
 800d7e0:	e7b0      	b.n	800d744 <__gethex+0x68>
 800d7e2:	2c00      	cmp	r4, #0
 800d7e4:	d1c7      	bne.n	800d776 <__gethex+0x9a>
 800d7e6:	4627      	mov	r7, r4
 800d7e8:	e7c7      	b.n	800d77a <__gethex+0x9e>
 800d7ea:	464e      	mov	r6, r9
 800d7ec:	462f      	mov	r7, r5
 800d7ee:	2501      	movs	r5, #1
 800d7f0:	e7c3      	b.n	800d77a <__gethex+0x9e>
 800d7f2:	2400      	movs	r4, #0
 800d7f4:	1cb1      	adds	r1, r6, #2
 800d7f6:	e7cc      	b.n	800d792 <__gethex+0xb6>
 800d7f8:	2401      	movs	r4, #1
 800d7fa:	e7fb      	b.n	800d7f4 <__gethex+0x118>
 800d7fc:	fb03 0002 	mla	r0, r3, r2, r0
 800d800:	e7ce      	b.n	800d7a0 <__gethex+0xc4>
 800d802:	4631      	mov	r1, r6
 800d804:	e7de      	b.n	800d7c4 <__gethex+0xe8>
 800d806:	eba6 0309 	sub.w	r3, r6, r9
 800d80a:	3b01      	subs	r3, #1
 800d80c:	4629      	mov	r1, r5
 800d80e:	2b07      	cmp	r3, #7
 800d810:	dc0a      	bgt.n	800d828 <__gethex+0x14c>
 800d812:	9801      	ldr	r0, [sp, #4]
 800d814:	f7fd ffd6 	bl	800b7c4 <_Balloc>
 800d818:	4604      	mov	r4, r0
 800d81a:	b940      	cbnz	r0, 800d82e <__gethex+0x152>
 800d81c:	4b5c      	ldr	r3, [pc, #368]	@ (800d990 <__gethex+0x2b4>)
 800d81e:	4602      	mov	r2, r0
 800d820:	21e4      	movs	r1, #228	@ 0xe4
 800d822:	485c      	ldr	r0, [pc, #368]	@ (800d994 <__gethex+0x2b8>)
 800d824:	f7ff fec0 	bl	800d5a8 <__assert_func>
 800d828:	3101      	adds	r1, #1
 800d82a:	105b      	asrs	r3, r3, #1
 800d82c:	e7ef      	b.n	800d80e <__gethex+0x132>
 800d82e:	f100 0a14 	add.w	sl, r0, #20
 800d832:	2300      	movs	r3, #0
 800d834:	4655      	mov	r5, sl
 800d836:	469b      	mov	fp, r3
 800d838:	45b1      	cmp	r9, r6
 800d83a:	d337      	bcc.n	800d8ac <__gethex+0x1d0>
 800d83c:	f845 bb04 	str.w	fp, [r5], #4
 800d840:	eba5 050a 	sub.w	r5, r5, sl
 800d844:	10ad      	asrs	r5, r5, #2
 800d846:	6125      	str	r5, [r4, #16]
 800d848:	4658      	mov	r0, fp
 800d84a:	f7fe f8ad 	bl	800b9a8 <__hi0bits>
 800d84e:	016d      	lsls	r5, r5, #5
 800d850:	f8d8 6000 	ldr.w	r6, [r8]
 800d854:	1a2d      	subs	r5, r5, r0
 800d856:	42b5      	cmp	r5, r6
 800d858:	dd54      	ble.n	800d904 <__gethex+0x228>
 800d85a:	1bad      	subs	r5, r5, r6
 800d85c:	4629      	mov	r1, r5
 800d85e:	4620      	mov	r0, r4
 800d860:	f7fe fc3e 	bl	800c0e0 <__any_on>
 800d864:	4681      	mov	r9, r0
 800d866:	b178      	cbz	r0, 800d888 <__gethex+0x1ac>
 800d868:	1e6b      	subs	r3, r5, #1
 800d86a:	1159      	asrs	r1, r3, #5
 800d86c:	f003 021f 	and.w	r2, r3, #31
 800d870:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d874:	f04f 0901 	mov.w	r9, #1
 800d878:	fa09 f202 	lsl.w	r2, r9, r2
 800d87c:	420a      	tst	r2, r1
 800d87e:	d003      	beq.n	800d888 <__gethex+0x1ac>
 800d880:	454b      	cmp	r3, r9
 800d882:	dc36      	bgt.n	800d8f2 <__gethex+0x216>
 800d884:	f04f 0902 	mov.w	r9, #2
 800d888:	4629      	mov	r1, r5
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7ff febe 	bl	800d60c <rshift>
 800d890:	442f      	add	r7, r5
 800d892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d896:	42bb      	cmp	r3, r7
 800d898:	da42      	bge.n	800d920 <__gethex+0x244>
 800d89a:	9801      	ldr	r0, [sp, #4]
 800d89c:	4621      	mov	r1, r4
 800d89e:	f7fd ffd1 	bl	800b844 <_Bfree>
 800d8a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	25a3      	movs	r5, #163	@ 0xa3
 800d8aa:	e793      	b.n	800d7d4 <__gethex+0xf8>
 800d8ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d8b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d8b2:	d012      	beq.n	800d8da <__gethex+0x1fe>
 800d8b4:	2b20      	cmp	r3, #32
 800d8b6:	d104      	bne.n	800d8c2 <__gethex+0x1e6>
 800d8b8:	f845 bb04 	str.w	fp, [r5], #4
 800d8bc:	f04f 0b00 	mov.w	fp, #0
 800d8c0:	465b      	mov	r3, fp
 800d8c2:	7830      	ldrb	r0, [r6, #0]
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	f7ff fef3 	bl	800d6b0 <__hexdig_fun>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	f000 000f 	and.w	r0, r0, #15
 800d8d0:	4098      	lsls	r0, r3
 800d8d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	e7ae      	b.n	800d838 <__gethex+0x15c>
 800d8da:	45b1      	cmp	r9, r6
 800d8dc:	d8ea      	bhi.n	800d8b4 <__gethex+0x1d8>
 800d8de:	492b      	ldr	r1, [pc, #172]	@ (800d98c <__gethex+0x2b0>)
 800d8e0:	9303      	str	r3, [sp, #12]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff fe11 	bl	800d50c <strncmp>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d1e1      	bne.n	800d8b4 <__gethex+0x1d8>
 800d8f0:	e7a2      	b.n	800d838 <__gethex+0x15c>
 800d8f2:	1ea9      	subs	r1, r5, #2
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7fe fbf3 	bl	800c0e0 <__any_on>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d0c2      	beq.n	800d884 <__gethex+0x1a8>
 800d8fe:	f04f 0903 	mov.w	r9, #3
 800d902:	e7c1      	b.n	800d888 <__gethex+0x1ac>
 800d904:	da09      	bge.n	800d91a <__gethex+0x23e>
 800d906:	1b75      	subs	r5, r6, r5
 800d908:	4621      	mov	r1, r4
 800d90a:	9801      	ldr	r0, [sp, #4]
 800d90c:	462a      	mov	r2, r5
 800d90e:	f7fe f9b1 	bl	800bc74 <__lshift>
 800d912:	1b7f      	subs	r7, r7, r5
 800d914:	4604      	mov	r4, r0
 800d916:	f100 0a14 	add.w	sl, r0, #20
 800d91a:	f04f 0900 	mov.w	r9, #0
 800d91e:	e7b8      	b.n	800d892 <__gethex+0x1b6>
 800d920:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d924:	42bd      	cmp	r5, r7
 800d926:	dd6f      	ble.n	800da08 <__gethex+0x32c>
 800d928:	1bed      	subs	r5, r5, r7
 800d92a:	42ae      	cmp	r6, r5
 800d92c:	dc34      	bgt.n	800d998 <__gethex+0x2bc>
 800d92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d022      	beq.n	800d97c <__gethex+0x2a0>
 800d936:	2b03      	cmp	r3, #3
 800d938:	d024      	beq.n	800d984 <__gethex+0x2a8>
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d115      	bne.n	800d96a <__gethex+0x28e>
 800d93e:	42ae      	cmp	r6, r5
 800d940:	d113      	bne.n	800d96a <__gethex+0x28e>
 800d942:	2e01      	cmp	r6, #1
 800d944:	d10b      	bne.n	800d95e <__gethex+0x282>
 800d946:	9a02      	ldr	r2, [sp, #8]
 800d948:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	2301      	movs	r3, #1
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	f8ca 3000 	str.w	r3, [sl]
 800d956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d958:	2562      	movs	r5, #98	@ 0x62
 800d95a:	601c      	str	r4, [r3, #0]
 800d95c:	e73a      	b.n	800d7d4 <__gethex+0xf8>
 800d95e:	1e71      	subs	r1, r6, #1
 800d960:	4620      	mov	r0, r4
 800d962:	f7fe fbbd 	bl	800c0e0 <__any_on>
 800d966:	2800      	cmp	r0, #0
 800d968:	d1ed      	bne.n	800d946 <__gethex+0x26a>
 800d96a:	9801      	ldr	r0, [sp, #4]
 800d96c:	4621      	mov	r1, r4
 800d96e:	f7fd ff69 	bl	800b844 <_Bfree>
 800d972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d974:	2300      	movs	r3, #0
 800d976:	6013      	str	r3, [r2, #0]
 800d978:	2550      	movs	r5, #80	@ 0x50
 800d97a:	e72b      	b.n	800d7d4 <__gethex+0xf8>
 800d97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f3      	bne.n	800d96a <__gethex+0x28e>
 800d982:	e7e0      	b.n	800d946 <__gethex+0x26a>
 800d984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1dd      	bne.n	800d946 <__gethex+0x26a>
 800d98a:	e7ee      	b.n	800d96a <__gethex+0x28e>
 800d98c:	0800eac8 	.word	0x0800eac8
 800d990:	0800e961 	.word	0x0800e961
 800d994:	0800ec76 	.word	0x0800ec76
 800d998:	1e6f      	subs	r7, r5, #1
 800d99a:	f1b9 0f00 	cmp.w	r9, #0
 800d99e:	d130      	bne.n	800da02 <__gethex+0x326>
 800d9a0:	b127      	cbz	r7, 800d9ac <__gethex+0x2d0>
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f7fe fb9b 	bl	800c0e0 <__any_on>
 800d9aa:	4681      	mov	r9, r0
 800d9ac:	117a      	asrs	r2, r7, #5
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d9b4:	f007 071f 	and.w	r7, r7, #31
 800d9b8:	40bb      	lsls	r3, r7
 800d9ba:	4213      	tst	r3, r2
 800d9bc:	4629      	mov	r1, r5
 800d9be:	4620      	mov	r0, r4
 800d9c0:	bf18      	it	ne
 800d9c2:	f049 0902 	orrne.w	r9, r9, #2
 800d9c6:	f7ff fe21 	bl	800d60c <rshift>
 800d9ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d9ce:	1b76      	subs	r6, r6, r5
 800d9d0:	2502      	movs	r5, #2
 800d9d2:	f1b9 0f00 	cmp.w	r9, #0
 800d9d6:	d047      	beq.n	800da68 <__gethex+0x38c>
 800d9d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d015      	beq.n	800da0c <__gethex+0x330>
 800d9e0:	2b03      	cmp	r3, #3
 800d9e2:	d017      	beq.n	800da14 <__gethex+0x338>
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d109      	bne.n	800d9fc <__gethex+0x320>
 800d9e8:	f019 0f02 	tst.w	r9, #2
 800d9ec:	d006      	beq.n	800d9fc <__gethex+0x320>
 800d9ee:	f8da 3000 	ldr.w	r3, [sl]
 800d9f2:	ea49 0903 	orr.w	r9, r9, r3
 800d9f6:	f019 0f01 	tst.w	r9, #1
 800d9fa:	d10e      	bne.n	800da1a <__gethex+0x33e>
 800d9fc:	f045 0510 	orr.w	r5, r5, #16
 800da00:	e032      	b.n	800da68 <__gethex+0x38c>
 800da02:	f04f 0901 	mov.w	r9, #1
 800da06:	e7d1      	b.n	800d9ac <__gethex+0x2d0>
 800da08:	2501      	movs	r5, #1
 800da0a:	e7e2      	b.n	800d9d2 <__gethex+0x2f6>
 800da0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da0e:	f1c3 0301 	rsb	r3, r3, #1
 800da12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d0f0      	beq.n	800d9fc <__gethex+0x320>
 800da1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da1e:	f104 0314 	add.w	r3, r4, #20
 800da22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da2a:	f04f 0c00 	mov.w	ip, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f853 2b04 	ldr.w	r2, [r3], #4
 800da34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da38:	d01b      	beq.n	800da72 <__gethex+0x396>
 800da3a:	3201      	adds	r2, #1
 800da3c:	6002      	str	r2, [r0, #0]
 800da3e:	2d02      	cmp	r5, #2
 800da40:	f104 0314 	add.w	r3, r4, #20
 800da44:	d13c      	bne.n	800dac0 <__gethex+0x3e4>
 800da46:	f8d8 2000 	ldr.w	r2, [r8]
 800da4a:	3a01      	subs	r2, #1
 800da4c:	42b2      	cmp	r2, r6
 800da4e:	d109      	bne.n	800da64 <__gethex+0x388>
 800da50:	1171      	asrs	r1, r6, #5
 800da52:	2201      	movs	r2, #1
 800da54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da58:	f006 061f 	and.w	r6, r6, #31
 800da5c:	fa02 f606 	lsl.w	r6, r2, r6
 800da60:	421e      	tst	r6, r3
 800da62:	d13a      	bne.n	800dada <__gethex+0x3fe>
 800da64:	f045 0520 	orr.w	r5, r5, #32
 800da68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da6a:	601c      	str	r4, [r3, #0]
 800da6c:	9b02      	ldr	r3, [sp, #8]
 800da6e:	601f      	str	r7, [r3, #0]
 800da70:	e6b0      	b.n	800d7d4 <__gethex+0xf8>
 800da72:	4299      	cmp	r1, r3
 800da74:	f843 cc04 	str.w	ip, [r3, #-4]
 800da78:	d8d9      	bhi.n	800da2e <__gethex+0x352>
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	459b      	cmp	fp, r3
 800da7e:	db17      	blt.n	800dab0 <__gethex+0x3d4>
 800da80:	6861      	ldr	r1, [r4, #4]
 800da82:	9801      	ldr	r0, [sp, #4]
 800da84:	3101      	adds	r1, #1
 800da86:	f7fd fe9d 	bl	800b7c4 <_Balloc>
 800da8a:	4681      	mov	r9, r0
 800da8c:	b918      	cbnz	r0, 800da96 <__gethex+0x3ba>
 800da8e:	4b1a      	ldr	r3, [pc, #104]	@ (800daf8 <__gethex+0x41c>)
 800da90:	4602      	mov	r2, r0
 800da92:	2184      	movs	r1, #132	@ 0x84
 800da94:	e6c5      	b.n	800d822 <__gethex+0x146>
 800da96:	6922      	ldr	r2, [r4, #16]
 800da98:	3202      	adds	r2, #2
 800da9a:	f104 010c 	add.w	r1, r4, #12
 800da9e:	0092      	lsls	r2, r2, #2
 800daa0:	300c      	adds	r0, #12
 800daa2:	f7fc ff9a 	bl	800a9da <memcpy>
 800daa6:	4621      	mov	r1, r4
 800daa8:	9801      	ldr	r0, [sp, #4]
 800daaa:	f7fd fecb 	bl	800b844 <_Bfree>
 800daae:	464c      	mov	r4, r9
 800dab0:	6923      	ldr	r3, [r4, #16]
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dab8:	6122      	str	r2, [r4, #16]
 800daba:	2201      	movs	r2, #1
 800dabc:	615a      	str	r2, [r3, #20]
 800dabe:	e7be      	b.n	800da3e <__gethex+0x362>
 800dac0:	6922      	ldr	r2, [r4, #16]
 800dac2:	455a      	cmp	r2, fp
 800dac4:	dd0b      	ble.n	800dade <__gethex+0x402>
 800dac6:	2101      	movs	r1, #1
 800dac8:	4620      	mov	r0, r4
 800daca:	f7ff fd9f 	bl	800d60c <rshift>
 800dace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dad2:	3701      	adds	r7, #1
 800dad4:	42bb      	cmp	r3, r7
 800dad6:	f6ff aee0 	blt.w	800d89a <__gethex+0x1be>
 800dada:	2501      	movs	r5, #1
 800dadc:	e7c2      	b.n	800da64 <__gethex+0x388>
 800dade:	f016 061f 	ands.w	r6, r6, #31
 800dae2:	d0fa      	beq.n	800dada <__gethex+0x3fe>
 800dae4:	4453      	add	r3, sl
 800dae6:	f1c6 0620 	rsb	r6, r6, #32
 800daea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800daee:	f7fd ff5b 	bl	800b9a8 <__hi0bits>
 800daf2:	42b0      	cmp	r0, r6
 800daf4:	dbe7      	blt.n	800dac6 <__gethex+0x3ea>
 800daf6:	e7f0      	b.n	800dada <__gethex+0x3fe>
 800daf8:	0800e961 	.word	0x0800e961

0800dafc <L_shift>:
 800dafc:	f1c2 0208 	rsb	r2, r2, #8
 800db00:	0092      	lsls	r2, r2, #2
 800db02:	b570      	push	{r4, r5, r6, lr}
 800db04:	f1c2 0620 	rsb	r6, r2, #32
 800db08:	6843      	ldr	r3, [r0, #4]
 800db0a:	6804      	ldr	r4, [r0, #0]
 800db0c:	fa03 f506 	lsl.w	r5, r3, r6
 800db10:	432c      	orrs	r4, r5
 800db12:	40d3      	lsrs	r3, r2
 800db14:	6004      	str	r4, [r0, #0]
 800db16:	f840 3f04 	str.w	r3, [r0, #4]!
 800db1a:	4288      	cmp	r0, r1
 800db1c:	d3f4      	bcc.n	800db08 <L_shift+0xc>
 800db1e:	bd70      	pop	{r4, r5, r6, pc}

0800db20 <__match>:
 800db20:	b530      	push	{r4, r5, lr}
 800db22:	6803      	ldr	r3, [r0, #0]
 800db24:	3301      	adds	r3, #1
 800db26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db2a:	b914      	cbnz	r4, 800db32 <__match+0x12>
 800db2c:	6003      	str	r3, [r0, #0]
 800db2e:	2001      	movs	r0, #1
 800db30:	bd30      	pop	{r4, r5, pc}
 800db32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db3a:	2d19      	cmp	r5, #25
 800db3c:	bf98      	it	ls
 800db3e:	3220      	addls	r2, #32
 800db40:	42a2      	cmp	r2, r4
 800db42:	d0f0      	beq.n	800db26 <__match+0x6>
 800db44:	2000      	movs	r0, #0
 800db46:	e7f3      	b.n	800db30 <__match+0x10>

0800db48 <__hexnan>:
 800db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	680b      	ldr	r3, [r1, #0]
 800db4e:	6801      	ldr	r1, [r0, #0]
 800db50:	115e      	asrs	r6, r3, #5
 800db52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db56:	f013 031f 	ands.w	r3, r3, #31
 800db5a:	b087      	sub	sp, #28
 800db5c:	bf18      	it	ne
 800db5e:	3604      	addne	r6, #4
 800db60:	2500      	movs	r5, #0
 800db62:	1f37      	subs	r7, r6, #4
 800db64:	4682      	mov	sl, r0
 800db66:	4690      	mov	r8, r2
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800db6e:	46b9      	mov	r9, r7
 800db70:	463c      	mov	r4, r7
 800db72:	9502      	str	r5, [sp, #8]
 800db74:	46ab      	mov	fp, r5
 800db76:	784a      	ldrb	r2, [r1, #1]
 800db78:	1c4b      	adds	r3, r1, #1
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	b342      	cbz	r2, 800dbd0 <__hexnan+0x88>
 800db7e:	4610      	mov	r0, r2
 800db80:	9105      	str	r1, [sp, #20]
 800db82:	9204      	str	r2, [sp, #16]
 800db84:	f7ff fd94 	bl	800d6b0 <__hexdig_fun>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d151      	bne.n	800dc30 <__hexnan+0xe8>
 800db8c:	9a04      	ldr	r2, [sp, #16]
 800db8e:	9905      	ldr	r1, [sp, #20]
 800db90:	2a20      	cmp	r2, #32
 800db92:	d818      	bhi.n	800dbc6 <__hexnan+0x7e>
 800db94:	9b02      	ldr	r3, [sp, #8]
 800db96:	459b      	cmp	fp, r3
 800db98:	dd13      	ble.n	800dbc2 <__hexnan+0x7a>
 800db9a:	454c      	cmp	r4, r9
 800db9c:	d206      	bcs.n	800dbac <__hexnan+0x64>
 800db9e:	2d07      	cmp	r5, #7
 800dba0:	dc04      	bgt.n	800dbac <__hexnan+0x64>
 800dba2:	462a      	mov	r2, r5
 800dba4:	4649      	mov	r1, r9
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7ff ffa8 	bl	800dafc <L_shift>
 800dbac:	4544      	cmp	r4, r8
 800dbae:	d952      	bls.n	800dc56 <__hexnan+0x10e>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f1a4 0904 	sub.w	r9, r4, #4
 800dbb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbba:	f8cd b008 	str.w	fp, [sp, #8]
 800dbbe:	464c      	mov	r4, r9
 800dbc0:	461d      	mov	r5, r3
 800dbc2:	9903      	ldr	r1, [sp, #12]
 800dbc4:	e7d7      	b.n	800db76 <__hexnan+0x2e>
 800dbc6:	2a29      	cmp	r2, #41	@ 0x29
 800dbc8:	d157      	bne.n	800dc7a <__hexnan+0x132>
 800dbca:	3102      	adds	r1, #2
 800dbcc:	f8ca 1000 	str.w	r1, [sl]
 800dbd0:	f1bb 0f00 	cmp.w	fp, #0
 800dbd4:	d051      	beq.n	800dc7a <__hexnan+0x132>
 800dbd6:	454c      	cmp	r4, r9
 800dbd8:	d206      	bcs.n	800dbe8 <__hexnan+0xa0>
 800dbda:	2d07      	cmp	r5, #7
 800dbdc:	dc04      	bgt.n	800dbe8 <__hexnan+0xa0>
 800dbde:	462a      	mov	r2, r5
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f7ff ff8a 	bl	800dafc <L_shift>
 800dbe8:	4544      	cmp	r4, r8
 800dbea:	d936      	bls.n	800dc5a <__hexnan+0x112>
 800dbec:	f1a8 0204 	sub.w	r2, r8, #4
 800dbf0:	4623      	mov	r3, r4
 800dbf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dbf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dbfa:	429f      	cmp	r7, r3
 800dbfc:	d2f9      	bcs.n	800dbf2 <__hexnan+0xaa>
 800dbfe:	1b3b      	subs	r3, r7, r4
 800dc00:	f023 0303 	bic.w	r3, r3, #3
 800dc04:	3304      	adds	r3, #4
 800dc06:	3401      	adds	r4, #1
 800dc08:	3e03      	subs	r6, #3
 800dc0a:	42b4      	cmp	r4, r6
 800dc0c:	bf88      	it	hi
 800dc0e:	2304      	movhi	r3, #4
 800dc10:	4443      	add	r3, r8
 800dc12:	2200      	movs	r2, #0
 800dc14:	f843 2b04 	str.w	r2, [r3], #4
 800dc18:	429f      	cmp	r7, r3
 800dc1a:	d2fb      	bcs.n	800dc14 <__hexnan+0xcc>
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	b91b      	cbnz	r3, 800dc28 <__hexnan+0xe0>
 800dc20:	4547      	cmp	r7, r8
 800dc22:	d128      	bne.n	800dc76 <__hexnan+0x12e>
 800dc24:	2301      	movs	r3, #1
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	2005      	movs	r0, #5
 800dc2a:	b007      	add	sp, #28
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc30:	3501      	adds	r5, #1
 800dc32:	2d08      	cmp	r5, #8
 800dc34:	f10b 0b01 	add.w	fp, fp, #1
 800dc38:	dd06      	ble.n	800dc48 <__hexnan+0x100>
 800dc3a:	4544      	cmp	r4, r8
 800dc3c:	d9c1      	bls.n	800dbc2 <__hexnan+0x7a>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc44:	2501      	movs	r5, #1
 800dc46:	3c04      	subs	r4, #4
 800dc48:	6822      	ldr	r2, [r4, #0]
 800dc4a:	f000 000f 	and.w	r0, r0, #15
 800dc4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc52:	6020      	str	r0, [r4, #0]
 800dc54:	e7b5      	b.n	800dbc2 <__hexnan+0x7a>
 800dc56:	2508      	movs	r5, #8
 800dc58:	e7b3      	b.n	800dbc2 <__hexnan+0x7a>
 800dc5a:	9b01      	ldr	r3, [sp, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0dd      	beq.n	800dc1c <__hexnan+0xd4>
 800dc60:	f1c3 0320 	rsb	r3, r3, #32
 800dc64:	f04f 32ff 	mov.w	r2, #4294967295
 800dc68:	40da      	lsrs	r2, r3
 800dc6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc6e:	4013      	ands	r3, r2
 800dc70:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc74:	e7d2      	b.n	800dc1c <__hexnan+0xd4>
 800dc76:	3f04      	subs	r7, #4
 800dc78:	e7d0      	b.n	800dc1c <__hexnan+0xd4>
 800dc7a:	2004      	movs	r0, #4
 800dc7c:	e7d5      	b.n	800dc2a <__hexnan+0xe2>

0800dc7e <__ascii_mbtowc>:
 800dc7e:	b082      	sub	sp, #8
 800dc80:	b901      	cbnz	r1, 800dc84 <__ascii_mbtowc+0x6>
 800dc82:	a901      	add	r1, sp, #4
 800dc84:	b142      	cbz	r2, 800dc98 <__ascii_mbtowc+0x1a>
 800dc86:	b14b      	cbz	r3, 800dc9c <__ascii_mbtowc+0x1e>
 800dc88:	7813      	ldrb	r3, [r2, #0]
 800dc8a:	600b      	str	r3, [r1, #0]
 800dc8c:	7812      	ldrb	r2, [r2, #0]
 800dc8e:	1e10      	subs	r0, r2, #0
 800dc90:	bf18      	it	ne
 800dc92:	2001      	movne	r0, #1
 800dc94:	b002      	add	sp, #8
 800dc96:	4770      	bx	lr
 800dc98:	4610      	mov	r0, r2
 800dc9a:	e7fb      	b.n	800dc94 <__ascii_mbtowc+0x16>
 800dc9c:	f06f 0001 	mvn.w	r0, #1
 800dca0:	e7f8      	b.n	800dc94 <__ascii_mbtowc+0x16>

0800dca2 <_realloc_r>:
 800dca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca6:	4680      	mov	r8, r0
 800dca8:	4615      	mov	r5, r2
 800dcaa:	460c      	mov	r4, r1
 800dcac:	b921      	cbnz	r1, 800dcb8 <_realloc_r+0x16>
 800dcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	f7fd bcfa 	b.w	800b6ac <_malloc_r>
 800dcb8:	b92a      	cbnz	r2, 800dcc6 <_realloc_r+0x24>
 800dcba:	f7fd fc83 	bl	800b5c4 <_free_r>
 800dcbe:	2400      	movs	r4, #0
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc6:	f000 f840 	bl	800dd4a <_malloc_usable_size_r>
 800dcca:	4285      	cmp	r5, r0
 800dccc:	4606      	mov	r6, r0
 800dcce:	d802      	bhi.n	800dcd6 <_realloc_r+0x34>
 800dcd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dcd4:	d8f4      	bhi.n	800dcc0 <_realloc_r+0x1e>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4640      	mov	r0, r8
 800dcda:	f7fd fce7 	bl	800b6ac <_malloc_r>
 800dcde:	4607      	mov	r7, r0
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d0ec      	beq.n	800dcbe <_realloc_r+0x1c>
 800dce4:	42b5      	cmp	r5, r6
 800dce6:	462a      	mov	r2, r5
 800dce8:	4621      	mov	r1, r4
 800dcea:	bf28      	it	cs
 800dcec:	4632      	movcs	r2, r6
 800dcee:	f7fc fe74 	bl	800a9da <memcpy>
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	f7fd fc65 	bl	800b5c4 <_free_r>
 800dcfa:	463c      	mov	r4, r7
 800dcfc:	e7e0      	b.n	800dcc0 <_realloc_r+0x1e>

0800dcfe <__ascii_wctomb>:
 800dcfe:	4603      	mov	r3, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	b141      	cbz	r1, 800dd16 <__ascii_wctomb+0x18>
 800dd04:	2aff      	cmp	r2, #255	@ 0xff
 800dd06:	d904      	bls.n	800dd12 <__ascii_wctomb+0x14>
 800dd08:	228a      	movs	r2, #138	@ 0x8a
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd10:	4770      	bx	lr
 800dd12:	700a      	strb	r2, [r1, #0]
 800dd14:	2001      	movs	r0, #1
 800dd16:	4770      	bx	lr

0800dd18 <fiprintf>:
 800dd18:	b40e      	push	{r1, r2, r3}
 800dd1a:	b503      	push	{r0, r1, lr}
 800dd1c:	4601      	mov	r1, r0
 800dd1e:	ab03      	add	r3, sp, #12
 800dd20:	4805      	ldr	r0, [pc, #20]	@ (800dd38 <fiprintf+0x20>)
 800dd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f7ff f9af 	bl	800d08c <_vfiprintf_r>
 800dd2e:	b002      	add	sp, #8
 800dd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd34:	b003      	add	sp, #12
 800dd36:	4770      	bx	lr
 800dd38:	24000028 	.word	0x24000028

0800dd3c <abort>:
 800dd3c:	b508      	push	{r3, lr}
 800dd3e:	2006      	movs	r0, #6
 800dd40:	f000 f834 	bl	800ddac <raise>
 800dd44:	2001      	movs	r0, #1
 800dd46:	f7f4 f973 	bl	8002030 <_exit>

0800dd4a <_malloc_usable_size_r>:
 800dd4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd4e:	1f18      	subs	r0, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	bfbc      	itt	lt
 800dd54:	580b      	ldrlt	r3, [r1, r0]
 800dd56:	18c0      	addlt	r0, r0, r3
 800dd58:	4770      	bx	lr

0800dd5a <_raise_r>:
 800dd5a:	291f      	cmp	r1, #31
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4605      	mov	r5, r0
 800dd60:	460c      	mov	r4, r1
 800dd62:	d904      	bls.n	800dd6e <_raise_r+0x14>
 800dd64:	2316      	movs	r3, #22
 800dd66:	6003      	str	r3, [r0, #0]
 800dd68:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6c:	bd38      	pop	{r3, r4, r5, pc}
 800dd6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd70:	b112      	cbz	r2, 800dd78 <_raise_r+0x1e>
 800dd72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd76:	b94b      	cbnz	r3, 800dd8c <_raise_r+0x32>
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 f831 	bl	800dde0 <_getpid_r>
 800dd7e:	4622      	mov	r2, r4
 800dd80:	4601      	mov	r1, r0
 800dd82:	4628      	mov	r0, r5
 800dd84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd88:	f000 b818 	b.w	800ddbc <_kill_r>
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d00a      	beq.n	800dda6 <_raise_r+0x4c>
 800dd90:	1c59      	adds	r1, r3, #1
 800dd92:	d103      	bne.n	800dd9c <_raise_r+0x42>
 800dd94:	2316      	movs	r3, #22
 800dd96:	6003      	str	r3, [r0, #0]
 800dd98:	2001      	movs	r0, #1
 800dd9a:	e7e7      	b.n	800dd6c <_raise_r+0x12>
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dda2:	4620      	mov	r0, r4
 800dda4:	4798      	blx	r3
 800dda6:	2000      	movs	r0, #0
 800dda8:	e7e0      	b.n	800dd6c <_raise_r+0x12>
	...

0800ddac <raise>:
 800ddac:	4b02      	ldr	r3, [pc, #8]	@ (800ddb8 <raise+0xc>)
 800ddae:	4601      	mov	r1, r0
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f7ff bfd2 	b.w	800dd5a <_raise_r>
 800ddb6:	bf00      	nop
 800ddb8:	24000028 	.word	0x24000028

0800ddbc <_kill_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	@ (800dddc <_kill_r+0x20>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f7f4 f921 	bl	8002010 <_kill>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d102      	bne.n	800ddd8 <_kill_r+0x1c>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	b103      	cbz	r3, 800ddd8 <_kill_r+0x1c>
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	24000bac 	.word	0x24000bac

0800dde0 <_getpid_r>:
 800dde0:	f7f4 b90e 	b.w	8002000 <_getpid>

0800dde4 <sqrtf>:
 800dde4:	b508      	push	{r3, lr}
 800dde6:	ed2d 8b02 	vpush	{d8}
 800ddea:	eeb0 8a40 	vmov.f32	s16, s0
 800ddee:	f000 fa9b 	bl	800e328 <__ieee754_sqrtf>
 800ddf2:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfa:	d60c      	bvs.n	800de16 <sqrtf+0x32>
 800ddfc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800de1c <sqrtf+0x38>
 800de00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de08:	d505      	bpl.n	800de16 <sqrtf+0x32>
 800de0a:	f7fc fdb9 	bl	800a980 <__errno>
 800de0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de12:	2321      	movs	r3, #33	@ 0x21
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	ecbd 8b02 	vpop	{d8}
 800de1a:	bd08      	pop	{r3, pc}
 800de1c:	00000000 	.word	0x00000000

0800de20 <checkint>:
 800de20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de24:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800de28:	429a      	cmp	r2, r3
 800de2a:	b570      	push	{r4, r5, r6, lr}
 800de2c:	dd2a      	ble.n	800de84 <checkint+0x64>
 800de2e:	f240 4333 	movw	r3, #1075	@ 0x433
 800de32:	429a      	cmp	r2, r3
 800de34:	dc24      	bgt.n	800de80 <checkint+0x60>
 800de36:	1a9b      	subs	r3, r3, r2
 800de38:	f1a3 0620 	sub.w	r6, r3, #32
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	fa02 f403 	lsl.w	r4, r2, r3
 800de44:	fa02 f606 	lsl.w	r6, r2, r6
 800de48:	f1c3 0520 	rsb	r5, r3, #32
 800de4c:	fa22 f505 	lsr.w	r5, r2, r5
 800de50:	4334      	orrs	r4, r6
 800de52:	432c      	orrs	r4, r5
 800de54:	409a      	lsls	r2, r3
 800de56:	ea20 0202 	bic.w	r2, r0, r2
 800de5a:	ea21 0404 	bic.w	r4, r1, r4
 800de5e:	4322      	orrs	r2, r4
 800de60:	f1a3 0420 	sub.w	r4, r3, #32
 800de64:	f1c3 0220 	rsb	r2, r3, #32
 800de68:	d10c      	bne.n	800de84 <checkint+0x64>
 800de6a:	40d8      	lsrs	r0, r3
 800de6c:	fa01 f302 	lsl.w	r3, r1, r2
 800de70:	4318      	orrs	r0, r3
 800de72:	40e1      	lsrs	r1, r4
 800de74:	4308      	orrs	r0, r1
 800de76:	f000 0001 	and.w	r0, r0, #1
 800de7a:	f1d0 0002 	rsbs	r0, r0, #2
 800de7e:	bd70      	pop	{r4, r5, r6, pc}
 800de80:	2002      	movs	r0, #2
 800de82:	e7fc      	b.n	800de7e <checkint+0x5e>
 800de84:	2000      	movs	r0, #0
 800de86:	e7fa      	b.n	800de7e <checkint+0x5e>

0800de88 <pow>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	ee10 4a90 	vmov	r4, s1
 800de90:	ed2d 8b0a 	vpush	{d8-d12}
 800de94:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800de98:	ee11 aa90 	vmov	sl, s3
 800de9c:	f108 32ff 	add.w	r2, r8, #4294967295
 800dea0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800dea4:	429a      	cmp	r2, r3
 800dea6:	ee10 5a10 	vmov	r5, s0
 800deaa:	ee11 0a10 	vmov	r0, s2
 800deae:	b087      	sub	sp, #28
 800deb0:	46c4      	mov	ip, r8
 800deb2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800deb6:	d806      	bhi.n	800dec6 <pow+0x3e>
 800deb8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800debc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800dec0:	2b7f      	cmp	r3, #127	@ 0x7f
 800dec2:	f240 8157 	bls.w	800e174 <pow+0x2ec>
 800dec6:	1802      	adds	r2, r0, r0
 800dec8:	eb4a 010a 	adc.w	r1, sl, sl
 800decc:	f06f 0b01 	mvn.w	fp, #1
 800ded0:	1e57      	subs	r7, r2, #1
 800ded2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ded6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800deda:	45bb      	cmp	fp, r7
 800dedc:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dee0:	d242      	bcs.n	800df68 <pow+0xe0>
 800dee2:	ea52 0301 	orrs.w	r3, r2, r1
 800dee6:	f04f 0300 	mov.w	r3, #0
 800deea:	d10c      	bne.n	800df06 <pow+0x7e>
 800deec:	196d      	adds	r5, r5, r5
 800deee:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800def2:	4164      	adcs	r4, r4
 800def4:	42ab      	cmp	r3, r5
 800def6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800defa:	41a3      	sbcs	r3, r4
 800defc:	f0c0 808f 	bcc.w	800e01e <pow+0x196>
 800df00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800df04:	e02b      	b.n	800df5e <pow+0xd6>
 800df06:	4ed4      	ldr	r6, [pc, #848]	@ (800e258 <pow+0x3d0>)
 800df08:	42b4      	cmp	r4, r6
 800df0a:	bf08      	it	eq
 800df0c:	429d      	cmpeq	r5, r3
 800df0e:	d109      	bne.n	800df24 <pow+0x9c>
 800df10:	1800      	adds	r0, r0, r0
 800df12:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800df16:	eb4a 0a0a 	adc.w	sl, sl, sl
 800df1a:	4283      	cmp	r3, r0
 800df1c:	4bcf      	ldr	r3, [pc, #828]	@ (800e25c <pow+0x3d4>)
 800df1e:	eb73 030a 	sbcs.w	r3, r3, sl
 800df22:	e7eb      	b.n	800defc <pow+0x74>
 800df24:	196d      	adds	r5, r5, r5
 800df26:	48ce      	ldr	r0, [pc, #824]	@ (800e260 <pow+0x3d8>)
 800df28:	4164      	adcs	r4, r4
 800df2a:	42ab      	cmp	r3, r5
 800df2c:	eb70 0604 	sbcs.w	r6, r0, r4
 800df30:	d375      	bcc.n	800e01e <pow+0x196>
 800df32:	4281      	cmp	r1, r0
 800df34:	bf08      	it	eq
 800df36:	429a      	cmpeq	r2, r3
 800df38:	d171      	bne.n	800e01e <pow+0x196>
 800df3a:	4aca      	ldr	r2, [pc, #808]	@ (800e264 <pow+0x3dc>)
 800df3c:	4294      	cmp	r4, r2
 800df3e:	bf08      	it	eq
 800df40:	429d      	cmpeq	r5, r3
 800df42:	d0dd      	beq.n	800df00 <pow+0x78>
 800df44:	4294      	cmp	r4, r2
 800df46:	ea6f 0a0a 	mvn.w	sl, sl
 800df4a:	bf34      	ite	cc
 800df4c:	2400      	movcc	r4, #0
 800df4e:	2401      	movcs	r4, #1
 800df50:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800df54:	4554      	cmp	r4, sl
 800df56:	f040 81dc 	bne.w	800e312 <pow+0x48a>
 800df5a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800df5e:	b007      	add	sp, #28
 800df60:	ecbd 8b0a 	vpop	{d8-d12}
 800df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df68:	196f      	adds	r7, r5, r5
 800df6a:	eb44 0904 	adc.w	r9, r4, r4
 800df6e:	1e7a      	subs	r2, r7, #1
 800df70:	f169 0300 	sbc.w	r3, r9, #0
 800df74:	4593      	cmp	fp, r2
 800df76:	eb7e 0303 	sbcs.w	r3, lr, r3
 800df7a:	d225      	bcs.n	800dfc8 <pow+0x140>
 800df7c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800df80:	2c00      	cmp	r4, #0
 800df82:	da13      	bge.n	800dfac <pow+0x124>
 800df84:	4651      	mov	r1, sl
 800df86:	f7ff ff4b 	bl	800de20 <checkint>
 800df8a:	2801      	cmp	r0, #1
 800df8c:	d10e      	bne.n	800dfac <pow+0x124>
 800df8e:	eeb1 0b40 	vneg.f64	d0, d0
 800df92:	ea57 0909 	orrs.w	r9, r7, r9
 800df96:	d10b      	bne.n	800dfb0 <pow+0x128>
 800df98:	f1ba 0f00 	cmp.w	sl, #0
 800df9c:	dadf      	bge.n	800df5e <pow+0xd6>
 800df9e:	b007      	add	sp, #28
 800dfa0:	ecbd 8b0a 	vpop	{d8-d12}
 800dfa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa8:	f000 b9f2 	b.w	800e390 <__math_divzero>
 800dfac:	2000      	movs	r0, #0
 800dfae:	e7f0      	b.n	800df92 <pow+0x10a>
 800dfb0:	f1ba 0f00 	cmp.w	sl, #0
 800dfb4:	dad3      	bge.n	800df5e <pow+0xd6>
 800dfb6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dfba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dfbe:	ed8d 7b00 	vstr	d7, [sp]
 800dfc2:	ed9d 0b00 	vldr	d0, [sp]
 800dfc6:	e7ca      	b.n	800df5e <pow+0xd6>
 800dfc8:	2c00      	cmp	r4, #0
 800dfca:	da2b      	bge.n	800e024 <pow+0x19c>
 800dfcc:	4651      	mov	r1, sl
 800dfce:	f7ff ff27 	bl	800de20 <checkint>
 800dfd2:	b930      	cbnz	r0, 800dfe2 <pow+0x15a>
 800dfd4:	b007      	add	sp, #28
 800dfd6:	ecbd 8b0a 	vpop	{d8-d12}
 800dfda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfde:	f000 b9ef 	b.w	800e3c0 <__math_invalid>
 800dfe2:	1e41      	subs	r1, r0, #1
 800dfe4:	4248      	negs	r0, r1
 800dfe6:	4148      	adcs	r0, r1
 800dfe8:	0480      	lsls	r0, r0, #18
 800dfea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dfee:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800dff2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800dff6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800dffa:	2b7f      	cmp	r3, #127	@ 0x7f
 800dffc:	d92d      	bls.n	800e05a <pow+0x1d2>
 800dffe:	4b96      	ldr	r3, [pc, #600]	@ (800e258 <pow+0x3d0>)
 800e000:	2000      	movs	r0, #0
 800e002:	429c      	cmp	r4, r3
 800e004:	bf08      	it	eq
 800e006:	4285      	cmpeq	r5, r0
 800e008:	f43f af7a 	beq.w	800df00 <pow+0x78>
 800e00c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800e010:	428a      	cmp	r2, r1
 800e012:	d80c      	bhi.n	800e02e <pow+0x1a6>
 800e014:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e018:	42a8      	cmp	r0, r5
 800e01a:	41a3      	sbcs	r3, r4
 800e01c:	d204      	bcs.n	800e028 <pow+0x1a0>
 800e01e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e022:	e79c      	b.n	800df5e <pow+0xd6>
 800e024:	2000      	movs	r0, #0
 800e026:	e7e4      	b.n	800dff2 <pow+0x16a>
 800e028:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e02c:	e797      	b.n	800df5e <pow+0xd6>
 800e02e:	2d01      	cmp	r5, #1
 800e030:	eb74 0303 	sbcs.w	r3, r4, r3
 800e034:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e038:	bf34      	ite	cc
 800e03a:	2301      	movcc	r3, #1
 800e03c:	2300      	movcs	r3, #0
 800e03e:	4296      	cmp	r6, r2
 800e040:	bf8c      	ite	hi
 800e042:	2600      	movhi	r6, #0
 800e044:	2601      	movls	r6, #1
 800e046:	42b3      	cmp	r3, r6
 800e048:	f000 809c 	beq.w	800e184 <pow+0x2fc>
 800e04c:	b007      	add	sp, #28
 800e04e:	ecbd 8b0a 	vpop	{d8-d12}
 800e052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e056:	f000 b993 	b.w	800e380 <__math_oflow>
 800e05a:	f1bc 0f00 	cmp.w	ip, #0
 800e05e:	d10a      	bne.n	800e076 <pow+0x1ee>
 800e060:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800e248 <pow+0x3c0>
 800e064:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e068:	ec53 2b17 	vmov	r2, r3, d7
 800e06c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800e070:	4615      	mov	r5, r2
 800e072:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800e076:	4a7c      	ldr	r2, [pc, #496]	@ (800e268 <pow+0x3e0>)
 800e078:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e07c:	4422      	add	r2, r4
 800e07e:	1513      	asrs	r3, r2, #20
 800e080:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800e084:	ee03 3a10 	vmov	s6, r3
 800e088:	0d12      	lsrs	r2, r2, #20
 800e08a:	4b78      	ldr	r3, [pc, #480]	@ (800e26c <pow+0x3e4>)
 800e08c:	0512      	lsls	r2, r2, #20
 800e08e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800e092:	1aa7      	subs	r7, r4, r2
 800e094:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800e098:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800e09c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800e0a0:	1e2e      	subs	r6, r5, #0
 800e0a2:	ec47 6b14 	vmov	d4, r6, r7
 800e0a6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800e0aa:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e0ae:	ed93 5b00 	vldr	d5, [r3]
 800e0b2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e0b6:	eea3 2b05 	vfma.f64	d2, d3, d5
 800e0ba:	ed93 5b02 	vldr	d5, [r3, #8]
 800e0be:	ee36 4b02 	vadd.f64	d4, d6, d2
 800e0c2:	ee32 2b44 	vsub.f64	d2, d2, d4
 800e0c6:	eea3 7b05 	vfma.f64	d7, d3, d5
 800e0ca:	ed93 5b04 	vldr	d5, [r3, #16]
 800e0ce:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e0d2:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e0d6:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e0da:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e0de:	ee34 8b00 	vadd.f64	d8, d4, d0
 800e0e2:	eeb0 9b40 	vmov.f64	d9, d0
 800e0e6:	ee34 4b48 	vsub.f64	d4, d4, d8
 800e0ea:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800e0ee:	ee34 ab00 	vadd.f64	d10, d4, d0
 800e0f2:	ed93 5b06 	vldr	d5, [r3, #24]
 800e0f6:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e0fa:	ee37 7b09 	vadd.f64	d7, d7, d9
 800e0fe:	ed93 4b08 	vldr	d4, [r3, #32]
 800e102:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800e106:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800e10a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e10e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800e112:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800e116:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e11a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800e11e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e122:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e126:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e12a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800e12e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800e132:	ee21 6b04 	vmul.f64	d6, d1, d4
 800e136:	ee16 3a90 	vmov	r3, s13
 800e13a:	eeb0 5b46 	vmov.f64	d5, d6
 800e13e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e142:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800e146:	18b2      	adds	r2, r6, r2
 800e148:	2a3e      	cmp	r2, #62	@ 0x3e
 800e14a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800e14e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800e152:	ee38 8b07 	vadd.f64	d8, d8, d7
 800e156:	eea1 5b08 	vfma.f64	d5, d1, d8
 800e15a:	d91b      	bls.n	800e194 <pow+0x30c>
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	da0b      	bge.n	800e178 <pow+0x2f0>
 800e160:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e164:	ee36 0b00 	vadd.f64	d0, d6, d0
 800e168:	2800      	cmp	r0, #0
 800e16a:	f43f aef8 	beq.w	800df5e <pow+0xd6>
 800e16e:	eeb1 0b40 	vneg.f64	d0, d0
 800e172:	e6f4      	b.n	800df5e <pow+0xd6>
 800e174:	2000      	movs	r0, #0
 800e176:	e77e      	b.n	800e076 <pow+0x1ee>
 800e178:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800e17c:	d909      	bls.n	800e192 <pow+0x30a>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f6bf af64 	bge.w	800e04c <pow+0x1c4>
 800e184:	b007      	add	sp, #28
 800e186:	ecbd 8b0a 	vpop	{d8-d12}
 800e18a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18e:	f000 b8ef 	b.w	800e370 <__math_uflow>
 800e192:	2600      	movs	r6, #0
 800e194:	4936      	ldr	r1, [pc, #216]	@ (800e270 <pow+0x3e8>)
 800e196:	ed91 4b02 	vldr	d4, [r1, #8]
 800e19a:	ed91 3b00 	vldr	d3, [r1]
 800e19e:	eeb0 7b44 	vmov.f64	d7, d4
 800e1a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e1a6:	ee17 5a10 	vmov	r5, s14
 800e1aa:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e1ae:	ed91 4b04 	vldr	d4, [r1, #16]
 800e1b2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800e1b6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e1ba:	ed91 4b06 	vldr	d4, [r1, #24]
 800e1be:	18dc      	adds	r4, r3, r3
 800e1c0:	f104 030f 	add.w	r3, r4, #15
 800e1c4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e1c8:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e1cc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800e1d0:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e1d4:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e1d8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800e1dc:	ed91 4b08 	vldr	d4, [r1, #32]
 800e1e0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e1e4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e1e8:	eea5 4b03 	vfma.f64	d4, d5, d3
 800e1ec:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800e1f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e1f4:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e1f8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800e1fc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e200:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e204:	eea5 4b03 	vfma.f64	d4, d5, d3
 800e208:	1940      	adds	r0, r0, r5
 800e20a:	2700      	movs	r7, #0
 800e20c:	eb17 020c 	adds.w	r2, r7, ip
 800e210:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e214:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e218:	2e00      	cmp	r6, #0
 800e21a:	d175      	bne.n	800e308 <pow+0x480>
 800e21c:	42bd      	cmp	r5, r7
 800e21e:	db29      	blt.n	800e274 <pow+0x3ec>
 800e220:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800e224:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800e228:	4610      	mov	r0, r2
 800e22a:	ec41 0b10 	vmov	d0, r0, r1
 800e22e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e232:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e250 <pow+0x3c8>
 800e236:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e23a:	b007      	add	sp, #28
 800e23c:	ecbd 8b0a 	vpop	{d8-d12}
 800e240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e244:	f000 b8d4 	b.w	800e3f0 <__math_check_oflow>
 800e248:	00000000 	.word	0x00000000
 800e24c:	43300000 	.word	0x43300000
 800e250:	00000000 	.word	0x00000000
 800e254:	7f000000 	.word	0x7f000000
 800e258:	3ff00000 	.word	0x3ff00000
 800e25c:	fff00000 	.word	0xfff00000
 800e260:	ffe00000 	.word	0xffe00000
 800e264:	7fe00000 	.word	0x7fe00000
 800e268:	c0196aab 	.word	0xc0196aab
 800e26c:	0800ecd8 	.word	0x0800ecd8
 800e270:	0800fd20 	.word	0x0800fd20
 800e274:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e278:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800e27c:	4610      	mov	r0, r2
 800e27e:	ec41 0b15 	vmov	d5, r0, r1
 800e282:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800e286:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e28a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e28e:	eeb0 4bc7 	vabs.f64	d4, d7
 800e292:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800e296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800e318 <pow+0x490>
 800e29e:	d52a      	bpl.n	800e2f6 <pow+0x46e>
 800e2a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e2a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ac:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e2b0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800e2b4:	bf58      	it	pl
 800e2b6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800e2ba:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e2be:	ee34 6b43 	vsub.f64	d6, d4, d3
 800e2c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e2c6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800e2ca:	ee36 6b03 	vadd.f64	d6, d6, d3
 800e2ce:	ee36 7b44 	vsub.f64	d7, d6, d4
 800e2d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2da:	d104      	bne.n	800e2e6 <pow+0x45e>
 800e2dc:	4632      	mov	r2, r6
 800e2de:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e2e2:	ec43 2b17 	vmov	d7, r2, r3
 800e2e6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e2ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e2ee:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e2f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e2f6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e2fa:	b007      	add	sp, #28
 800e2fc:	ecbd 8b0a 	vpop	{d8-d12}
 800e300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	f000 b86b 	b.w	800e3de <__math_check_uflow>
 800e308:	ec43 2b10 	vmov	d0, r2, r3
 800e30c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e310:	e625      	b.n	800df5e <pow+0xd6>
 800e312:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800e320 <pow+0x498>
 800e316:	e622      	b.n	800df5e <pow+0xd6>
 800e318:	00000000 	.word	0x00000000
 800e31c:	00100000 	.word	0x00100000
	...

0800e328 <__ieee754_sqrtf>:
 800e328:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e32c:	4770      	bx	lr

0800e32e <with_errno>:
 800e32e:	b510      	push	{r4, lr}
 800e330:	ed2d 8b02 	vpush	{d8}
 800e334:	eeb0 8b40 	vmov.f64	d8, d0
 800e338:	4604      	mov	r4, r0
 800e33a:	f7fc fb21 	bl	800a980 <__errno>
 800e33e:	eeb0 0b48 	vmov.f64	d0, d8
 800e342:	ecbd 8b02 	vpop	{d8}
 800e346:	6004      	str	r4, [r0, #0]
 800e348:	bd10      	pop	{r4, pc}

0800e34a <xflow>:
 800e34a:	b082      	sub	sp, #8
 800e34c:	b158      	cbz	r0, 800e366 <xflow+0x1c>
 800e34e:	eeb1 7b40 	vneg.f64	d7, d0
 800e352:	ed8d 7b00 	vstr	d7, [sp]
 800e356:	ed9d 7b00 	vldr	d7, [sp]
 800e35a:	2022      	movs	r0, #34	@ 0x22
 800e35c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e360:	b002      	add	sp, #8
 800e362:	f7ff bfe4 	b.w	800e32e <with_errno>
 800e366:	eeb0 7b40 	vmov.f64	d7, d0
 800e36a:	e7f2      	b.n	800e352 <xflow+0x8>
 800e36c:	0000      	movs	r0, r0
	...

0800e370 <__math_uflow>:
 800e370:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e378 <__math_uflow+0x8>
 800e374:	f7ff bfe9 	b.w	800e34a <xflow>
 800e378:	00000000 	.word	0x00000000
 800e37c:	10000000 	.word	0x10000000

0800e380 <__math_oflow>:
 800e380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e388 <__math_oflow+0x8>
 800e384:	f7ff bfe1 	b.w	800e34a <xflow>
 800e388:	00000000 	.word	0x00000000
 800e38c:	70000000 	.word	0x70000000

0800e390 <__math_divzero>:
 800e390:	b082      	sub	sp, #8
 800e392:	2800      	cmp	r0, #0
 800e394:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e398:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e39c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e3a0:	ed8d 7b00 	vstr	d7, [sp]
 800e3a4:	ed9d 0b00 	vldr	d0, [sp]
 800e3a8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800e3b8 <__math_divzero+0x28>
 800e3ac:	2022      	movs	r0, #34	@ 0x22
 800e3ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e3b2:	b002      	add	sp, #8
 800e3b4:	f7ff bfbb 	b.w	800e32e <with_errno>
	...

0800e3c0 <__math_invalid>:
 800e3c0:	eeb0 7b40 	vmov.f64	d7, d0
 800e3c4:	eeb4 7b47 	vcmp.f64	d7, d7
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e3d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e3d4:	d602      	bvs.n	800e3dc <__math_invalid+0x1c>
 800e3d6:	2021      	movs	r0, #33	@ 0x21
 800e3d8:	f7ff bfa9 	b.w	800e32e <with_errno>
 800e3dc:	4770      	bx	lr

0800e3de <__math_check_uflow>:
 800e3de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e6:	d102      	bne.n	800e3ee <__math_check_uflow+0x10>
 800e3e8:	2022      	movs	r0, #34	@ 0x22
 800e3ea:	f7ff bfa0 	b.w	800e32e <with_errno>
 800e3ee:	4770      	bx	lr

0800e3f0 <__math_check_oflow>:
 800e3f0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800e410 <__math_check_oflow+0x20>
 800e3f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e3f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	dd02      	ble.n	800e408 <__math_check_oflow+0x18>
 800e402:	2022      	movs	r0, #34	@ 0x22
 800e404:	f7ff bf93 	b.w	800e32e <with_errno>
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	f3af 8000 	nop.w
 800e410:	ffffffff 	.word	0xffffffff
 800e414:	7fefffff 	.word	0x7fefffff

0800e418 <_init>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	bf00      	nop
 800e41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41e:	bc08      	pop	{r3}
 800e420:	469e      	mov	lr, r3
 800e422:	4770      	bx	lr

0800e424 <_fini>:
 800e424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e426:	bf00      	nop
 800e428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e42a:	bc08      	pop	{r3}
 800e42c:	469e      	mov	lr, r3
 800e42e:	4770      	bx	lr
