
ZAM_projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d048  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc8  0800d2e8  0800d2e8  0000e2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0b0  0800f0b0  00011298  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0b0  0800f0b0  000100b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0b8  0800f0b8  00011298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0b8  0800f0b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0bc  0800f0bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0800f0c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001d8  0800f298  000111d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000238  0800f2f8  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008bc  24000298  0800f358  00011298  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000b54  0800f358  00011b54  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00011298  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023a1b  00000000  00000000  000112c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043ff  00000000  00000000  00034ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a80  00000000  00000000  000390e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000149c  00000000  00000000  0003ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f3a8  00000000  00000000  0003bffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025804  00000000  00000000  0007b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001926d8  00000000  00000000  000a0ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00233280  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008734  00000000  00000000  002332c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0023b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000298 	.word	0x24000298
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d2d0 	.word	0x0800d2d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400029c 	.word	0x2400029c
 80002dc:	0800d2d0 	.word	0x0800d2d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <MX_ETH_Init+0x84>)
 8000b9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000bac:	22e1      	movs	r2, #225	@ 0xe1
 8000bae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000bc4:	4a15      	ldr	r2, [pc, #84]	@ (8000c1c <MX_ETH_Init+0x88>)
 8000bc6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000bd0:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <MX_ETH_Init+0x8c>)
 8000bd2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000bd6:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <MX_ETH_Init+0x90>)
 8000bd8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000bdc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000be0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000be2:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_ETH_Init+0x80>)
 8000be4:	f001 f8d2 	bl	8001d8c <HAL_ETH_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bee:	f000 fbdb 	bl	80013a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bf2:	2238      	movs	r2, #56	@ 0x38
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_ETH_Init+0x94>)
 8000bf8:	f008 fdf0 	bl	80097dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_ETH_Init+0x94>)
 8000bfe:	2221      	movs	r2, #33	@ 0x21
 8000c00:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_ETH_Init+0x94>)
 8000c04:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c08:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <MX_ETH_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240002ec 	.word	0x240002ec
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	2400039c 	.word	0x2400039c
 8000c20:	24000238 	.word	0x24000238
 8000c24:	240001d8 	.word	0x240001d8
 8000c28:	240002b4 	.word	0x240002b4

08000c2c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	@ 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a59      	ldr	r2, [pc, #356]	@ (8000db0 <HAL_ETH_MspInit+0x184>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	f040 80ab 	bne.w	8000da6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c50:	4b58      	ldr	r3, [pc, #352]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c56:	4a57      	ldr	r2, [pc, #348]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c60:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c6e:	4b51      	ldr	r3, [pc, #324]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c74:	4a4f      	ldr	r2, [pc, #316]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c8c:	4b49      	ldr	r3, [pc, #292]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c92:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c9c:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a40      	ldr	r2, [pc, #256]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a39      	ldr	r2, [pc, #228]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b36      	ldr	r3, [pc, #216]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	4a31      	ldr	r2, [pc, #196]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d04:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <HAL_ETH_MspInit+0x188>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d22:	2332      	movs	r3, #50	@ 0x32
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d32:	230b      	movs	r3, #11
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <HAL_ETH_MspInit+0x18c>)
 8000d3e:	f001 fc59 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d42:	2386      	movs	r3, #134	@ 0x86
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d52:	230b      	movs	r3, #11
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4817      	ldr	r0, [pc, #92]	@ (8000dbc <HAL_ETH_MspInit+0x190>)
 8000d5e:	f001 fc49 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <HAL_ETH_MspInit+0x194>)
 8000d80:	f001 fc38 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d84:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d96:	230b      	movs	r3, #11
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <HAL_ETH_MspInit+0x198>)
 8000da2:	f001 fc27 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	@ 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40028000 	.word	0x40028000
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	58020000 	.word	0x58020000
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021800 	.word	0x58021800

08000dc8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a09      	ldr	r2, [pc, #36]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_GPIO_Init+0xc8>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

}
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	58024400 	.word	0x58024400

08000e94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_I2C1_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <MX_I2C1_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ed0:	f001 fd6e 	bl	80029b0 <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f000 fa65 	bl	80013a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ee2:	f002 faf1 	bl	80034c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f000 fa5c 	bl	80013a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_I2C1_Init+0x74>)
 8000ef4:	f002 fb33 	bl	800355e <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 fa53 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	240003a4 	.word	0x240003a4
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	00909beb 	.word	0x00909beb

08000f14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ba      	sub	sp, #232	@ 0xe8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	22c0      	movs	r2, #192	@ 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 fc51 	bl	80097dc <memset>
  if(i2cHandle->Instance==I2C1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <HAL_I2C_MspInit+0xc8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d146      	bne.n	8000fd2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f44:	f04f 0208 	mov.w	r2, #8
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fccc 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f66:	f000 fa1f 	bl	80013a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f88:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <HAL_I2C_MspInit+0xd0>)
 8000fb0:	f001 fb20 	bl	80025f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fba:	4a09      	ldr	r2, [pc, #36]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_I2C_MspInit+0xcc>)
 8000fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	37e8      	adds	r7, #232	@ 0xe8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020400 	.word	0x58020400

08000fe8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d102      	bne.n	8000ffc <__io_putchar+0x14>
    __io_putchar('\r');
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff fff6 	bl	8000fe8 <__io_putchar>
  }
  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2201      	movs	r2, #1
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <__io_putchar+0x2c>)
 8001006:	f005 fdd5 	bl	8006bb4 <HAL_UART_Transmit>
  return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2400048c 	.word	0x2400048c

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800101e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001024:	bf00      	nop
 8001026:	4b96      	ldr	r3, [pc, #600]	@ (8001280 <main+0x268>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <main+0x24>
 8001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	637a      	str	r2, [r7, #52]	@ 0x34
 8001038:	2b00      	cmp	r3, #0
 800103a:	dcf4      	bgt.n	8001026 <main+0xe>
  if ( timeout < 0 )
 800103c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103e:	2b00      	cmp	r3, #0
 8001040:	da01      	bge.n	8001046 <main+0x2e>
  {
  Error_Handler();
 8001042:	f000 f9b1 	bl	80013a8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fcbb 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f931 	bl	80012b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800104e:	4b8c      	ldr	r3, [pc, #560]	@ (8001280 <main+0x268>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a8a      	ldr	r2, [pc, #552]	@ (8001280 <main+0x268>)
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <main+0x268>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800106c:	2000      	movs	r0, #0
 800106e:	f001 fc71 	bl	8002954 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f001 fc87 	bl	8002988 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800107a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001080:	bf00      	nop
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <main+0x268>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <main+0x80>
 800108e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	637a      	str	r2, [r7, #52]	@ 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	dcf4      	bgt.n	8001082 <main+0x6a>
if ( timeout < 0 )
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	2b00      	cmp	r3, #0
 800109c:	da01      	bge.n	80010a2 <main+0x8a>
{
Error_Handler();
 800109e:	f000 f983 	bl	80013a8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f7ff fe91 	bl	8000dc8 <MX_GPIO_Init>
  MX_ETH_Init();
 80010a6:	f7ff fd75 	bl	8000b94 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010aa:	f000 fafb 	bl	80016a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010ae:	f000 fbaf 	bl	8001810 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80010b2:	f7ff feef 	bl	8000e94 <MX_I2C1_Init>
  MX_TIM6_Init();
 80010b6:	f000 fa97 	bl	80015e8 <MX_TIM6_Init>
  /* USER CODE BEGIN WHILE */




  LPS22HH_Init();
 80010ba:	f007 fa45 	bl	8008548 <LPS22HH_Init>
  HAL_Delay(3000); // dla inicjalizacji, wazne jak korzystam z usredniania w ukladzie - by sam mogl przeliczy inicjalne probki
 80010be:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010c2:	f000 fd0f 	bl	8001ae4 <HAL_Delay>


  struct values_lps result_lps = lps_read_val();
 80010c6:	f007 f9d5 	bl	8008474 <lps_read_val>
 80010ca:	eeb0 7a40 	vmov.f32	s14, s0
 80010ce:	eef0 7a60 	vmov.f32	s15, s1
 80010d2:	ed87 7a08 	vstr	s14, [r7, #32]
 80010d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  p0 = result_lps.pressure;
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	4a69      	ldr	r2, [pc, #420]	@ (8001284 <main+0x26c>)
 80010de:	6013      	str	r3, [r2, #0]



  // wupełnienie tablicy filtra frdniej kraczacej poczatkowymi danymi
  for (int i = 0; i < FILTER_SIZE; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80010e4:	e009      	b.n	80010fa <main+0xe2>
      pressure_values[i] = p0; // Wypełnienie tablicy pierwszym pomiarem
 80010e6:	4b67      	ldr	r3, [pc, #412]	@ (8001284 <main+0x26c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4967      	ldr	r1, [pc, #412]	@ (8001288 <main+0x270>)
 80010ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < FILTER_SIZE; i++) {
 80010f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f6:	3301      	adds	r3, #1
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	ddf2      	ble.n	80010e6 <main+0xce>
  }
  filter_index = 0; // Reset indeksu
 8001100:	4b62      	ldr	r3, [pc, #392]	@ (800128c <main+0x274>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
  KalmanFilter kf;

  // Inicjalizacja filtru Kalmana
  //pierwsza stała w tym przypadku to przybliżenie niepewności dotyczącej modelu procesu, czyli tego, jak zmienia się stan między kolejnymi iteracjami.
  //druga stała w tym przypadku to szacowanie niepewności w odczytach czujnika (np. szumu w pomiarze ciśnienia atmosferycznego).
  kalman_init(&kf, p0, 1.0f, 1.0f);// Wariancja procesu i pomiaru (dopasuj do aplikacji)
 8001106:	4b5f      	ldr	r3, [pc, #380]	@ (8001284 <main+0x26c>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001114:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	4618      	mov	r0, r3
 800111e:	f007 fa7f 	bl	8008620 <kalman_init>

  while (1)
  {
	  struct values_lps result_lps = lps_read_val();
 8001122:	f007 f9a7 	bl	8008474 <lps_read_val>
 8001126:	eeb0 7a40 	vmov.f32	s14, s0
 800112a:	eef0 7a60 	vmov.f32	s15, s1
 800112e:	ed87 7a00 	vstr	s14, [r7]
 8001132:	edc7 7a01 	vstr	s15, [r7, #4]
	  t = result_lps.temp;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4a55      	ldr	r2, [pc, #340]	@ (8001290 <main+0x278>)
 800113a:	6013      	str	r3, [r2, #0]
	  p = result_lps.pressure;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a55      	ldr	r2, [pc, #340]	@ (8001294 <main+0x27c>)
 8001140:	6013      	str	r3, [r2, #0]
	  //h = -29.271769 * t * log(p / p0);
	  float filtered_pressure = apply_moving_average(pressure_values, &filter_index, FILTER_SIZE, p);
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <main+0x27c>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	220a      	movs	r2, #10
 800114e:	494f      	ldr	r1, [pc, #316]	@ (800128c <main+0x274>)
 8001150:	484d      	ldr	r0, [pc, #308]	@ (8001288 <main+0x270>)
 8001152:	f007 fa1f 	bl	8008594 <apply_moving_average>
 8001156:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

      // Filtracja za pomocą Kalman
      float filtered_pressure_Kalman = kalman_update(&kf, p);
 800115a:	4b4e      	ldr	r3, [pc, #312]	@ (8001294 <main+0x27c>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	eeb0 0a67 	vmov.f32	s0, s15
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fa7a 	bl	8008662 <kalman_update>
 800116e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

	  //ponoc dokładniejszy sposob bazujacy na innym wzorze - lepiej reaguje na zmiany, większe wahania
	  h = 44330.0 * (1.0 - pow(p / p0, 0.1903));
 8001172:	4b48      	ldr	r3, [pc, #288]	@ (8001294 <main+0x27c>)
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <main+0x26c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001186:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001270 <main+0x258>
 800118a:	eeb0 0b47 	vmov.f64	d0, d7
 800118e:	f00b fddb 	bl	800cd48 <pow>
 8001192:	eeb0 7b40 	vmov.f64	d7, d0
 8001196:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800119a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800119e:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8001278 <main+0x260>
 80011a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <main+0x280>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
	  h_over_filter = 44330.0 * (1.0 - pow(filtered_pressure / p0, 0.1903));
 80011b0:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <main+0x26c>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80011ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c2:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001270 <main+0x258>
 80011c6:	eeb0 0b47 	vmov.f64	d0, d7
 80011ca:	f00b fdbd 	bl	800cd48 <pow>
 80011ce:	eeb0 7b40 	vmov.f64	d7, d0
 80011d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80011d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011da:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8001278 <main+0x260>
 80011de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <main+0x284>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
	  h_over_Kalman = 44330.0 * (1.0 - pow(filtered_pressure_Kalman / p0, 0.1903));
 80011ec:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <main+0x26c>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80011f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fe:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001270 <main+0x258>
 8001202:	eeb0 0b47 	vmov.f64	d0, d7
 8001206:	f00b fd9f 	bl	800cd48 <pow>
 800120a:	eeb0 7b40 	vmov.f64	d7, d0
 800120e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001212:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001216:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8001278 <main+0x260>
 800121a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800121e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <main+0x288>)
 8001224:	edc3 7a00 	vstr	s15, [r3]
//	  printf("T = %.1f*C\n", result_lps.temp);
//	  printf("p = %.1f hPa\n", result_lps.pressure);
	  printf("h przed filtracją           = %.2f m\n", h);
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <main+0x280>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ec53 2b17 	vmov	r2, r3, d7
 8001236:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <main+0x28c>)
 8001238:	f008 f968 	bl	800950c <iprintf>
	  printf("h po filtracji (krocząca)   = %.2f m\n", h_over_filter);
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <main+0x284>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001246:	ec53 2b17 	vmov	r2, r3, d7
 800124a:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <main+0x290>)
 800124c:	f008 f95e 	bl	800950c <iprintf>
	  printf("h po filtracji (Kalman)     = %.2f m\n", h_over_Kalman);
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <main+0x288>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800125a:	ec53 2b17 	vmov	r2, r3, d7
 800125e:	4813      	ldr	r0, [pc, #76]	@ (80012ac <main+0x294>)
 8001260:	f008 f954 	bl	800950c <iprintf>
	  HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f000 fc3d 	bl	8001ae4 <HAL_Delay>
  {
 800126a:	bf00      	nop
 800126c:	e759      	b.n	8001122 <main+0x10a>
 800126e:	bf00      	nop
 8001270:	1a36e2eb 	.word	0x1a36e2eb
 8001274:	3fc85bc0 	.word	0x3fc85bc0
 8001278:	00000000 	.word	0x00000000
 800127c:	40e5a540 	.word	0x40e5a540
 8001280:	58024400 	.word	0x58024400
 8001284:	2400042c 	.word	0x2400042c
 8001288:	240003f8 	.word	0x240003f8
 800128c:	24000420 	.word	0x24000420
 8001290:	24000424 	.word	0x24000424
 8001294:	24000428 	.word	0x24000428
 8001298:	24000430 	.word	0x24000430
 800129c:	24000434 	.word	0x24000434
 80012a0:	24000438 	.word	0x24000438
 80012a4:	0800d2e8 	.word	0x0800d2e8
 80012a8:	0800d310 	.word	0x0800d310
 80012ac:	0800d338 	.word	0x0800d338

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	@ 0x70
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	224c      	movs	r2, #76	@ 0x4c
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 fa8c 	bl	80097dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2220      	movs	r2, #32
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 fa86 	bl	80097dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f002 fac1 	bl	8003858 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <SystemClock_Config+0xf0>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	4a30      	ldr	r2, [pc, #192]	@ (80013a0 <SystemClock_Config+0xf0>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <SystemClock_Config+0xf0>)
 80012e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <SystemClock_Config+0xf4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012f8:	4a2a      	ldr	r2, [pc, #168]	@ (80013a4 <SystemClock_Config+0xf4>)
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <SystemClock_Config+0xf4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800130c:	bf00      	nop
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <SystemClock_Config+0xf4>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800131a:	d1f8      	bne.n	800130e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001320:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	2302      	movs	r3, #2
 800132c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001332:	2314      	movs	r3, #20
 8001334:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800133a:	2303      	movs	r3, #3
 800133c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001342:	230c      	movs	r3, #12
 8001344:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001346:	2302      	movs	r3, #2
 8001348:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4618      	mov	r0, r3
 8001354:	f002 faea 	bl	800392c <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800135e:	f000 f823 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	233f      	movs	r3, #63	@ 0x3f
 8001364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2303      	movs	r3, #3
 8001368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2101      	movs	r1, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f002 ff2a 	bl	80041e0 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001392:	f000 f809 	bl	80013a8 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3770      	adds	r7, #112	@ 0x70
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	58000400 	.word	0x58000400
 80013a4:	58024800 	.word	0x58024800

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <Error_Handler+0x8>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_MspInit+0x30>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	58024400 	.word	0x58024400

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 fb31 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM6_DAC_IRQHandler+0x10>)
 800144e:	f005 f8d6 	bl	80065fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24000440 	.word	0x24000440

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f008 fa03 	bl	8009880 <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
  return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 800149e:	bf00      	nop
 80014a0:	e7fd      	b.n	800149e <_exit+0x12>

080014a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e00a      	b.n	80014ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b4:	f3af 8000 	nop.w
 80014b8:	4601      	mov	r1, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbf0      	blt.n	80014b4 <_read+0x12>
  }

  return len;
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e009      	b.n	8001502 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fd76 	bl	8000fe8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf1      	blt.n	80014ee <_write+0x12>
  }
  return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_close>:

int _close(int file)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153c:	605a      	str	r2, [r3, #4]
  return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_isatty>:

int _isatty(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f008 f968 	bl	8009880 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24080000 	.word	0x24080000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	2400043c 	.word	0x2400043c
 80015e4:	24000b58 	.word	0x24000b58

080015e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_TIM6_Init+0x64>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_TIM6_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_TIM6_Init+0x64>)
 8001600:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001604:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_TIM6_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_TIM6_Init+0x64>)
 800160e:	2263      	movs	r2, #99	@ 0x63
 8001610:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_TIM6_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_TIM6_Init+0x64>)
 800161a:	f004 ff99 	bl	8006550 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001624:	f7ff fec0 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_TIM6_Init+0x64>)
 8001636:	f005 f9c1 	bl	80069bc <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001640:	f7ff feb2 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	24000440 	.word	0x24000440
 8001650:	40001000 	.word	0x40001000

08001654 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0e      	ldr	r2, [pc, #56]	@ (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d116      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <HAL_TIM_Base_MspInit+0x4c>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2107      	movs	r1, #7
 8001688:	2036      	movs	r0, #54	@ 0x36
 800168a:	f000 fb4a 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800168e:	2036      	movs	r0, #54	@ 0x36
 8001690:	f000 fb61 	bl	8001d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40001000 	.word	0x40001000
 80016a0:	58024400 	.word	0x58024400

080016a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016aa:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <MX_USART3_UART_Init+0x94>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ae:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ec:	4811      	ldr	r0, [pc, #68]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 80016ee:	f005 fa11 	bl	8006b14 <HAL_UART_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016f8:	f7ff fe56 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 8001700:	f006 faa7 	bl	8007c52 <HAL_UARTEx_SetTxFifoThreshold>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800170a:	f7ff fe4d 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170e:	2100      	movs	r1, #0
 8001710:	4808      	ldr	r0, [pc, #32]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 8001712:	f006 fadc 	bl	8007cce <HAL_UARTEx_SetRxFifoThreshold>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800171c:	f7ff fe44 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_USART3_UART_Init+0x90>)
 8001722:	f006 fa5d 	bl	8007be0 <HAL_UARTEx_DisableFifoMode>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800172c:	f7ff fe3c 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2400048c 	.word	0x2400048c
 8001738:	40004800 	.word	0x40004800

0800173c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0ba      	sub	sp, #232	@ 0xe8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	22c0      	movs	r2, #192	@ 0xc0
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f008 f83d 	bl	80097dc <memset>
  if(uartHandle->Instance==USART3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a27      	ldr	r2, [pc, #156]	@ (8001804 <HAL_UART_MspInit+0xc8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d146      	bne.n	80017fa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800176c:	f04f 0202 	mov.w	r2, #2
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f8b8 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800178e:	f7ff fe0b 	bl	80013a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 800179a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800179e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 80017a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_UART_MspInit+0xcc>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e8:	2307      	movs	r3, #7
 80017ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <HAL_UART_MspInit+0xd0>)
 80017f6:	f000 fefd 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	37e8      	adds	r7, #232	@ 0xe8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40004800 	.word	0x40004800
 8001808:	58024400 	.word	0x58024400
 800180c:	58020c00 	.word	0x58020c00

08001810 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001818:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800181c:	2209      	movs	r2, #9
 800181e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001822:	2202      	movs	r2, #2
 8001824:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001828:	2200      	movs	r2, #0
 800182a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800182e:	2202      	movs	r2, #2
 8001830:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001834:	2200      	movs	r2, #0
 8001836:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800183a:	2200      	movs	r2, #0
 800183c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001840:	2200      	movs	r2, #0
 8001842:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001846:	2201      	movs	r2, #1
 8001848:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800184c:	2201      	movs	r2, #1
 800184e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001852:	2200      	movs	r2, #0
 8001854:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001858:	f001 fecd 	bl	80035f6 <HAL_PCD_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001862:	f7ff fda1 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000520 	.word	0x24000520
 8001870:	40080000 	.word	0x40080000

08001874 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ba      	sub	sp, #232	@ 0xe8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	22c0      	movs	r2, #192	@ 0xc0
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f007 ffa1 	bl	80097dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a30      	ldr	r2, [pc, #192]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d159      	bne.n	8001958 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 f81b 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80018c8:	f7ff fd6e 	bl	80013a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80018cc:	f002 f81e 	bl	800390c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d6:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e0:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018ee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80018f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001908:	230a      	movs	r3, #10
 800190a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <HAL_PCD_MspInit+0xf4>)
 8001916:	f000 fe6d 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800191a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800191e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001932:	4619      	mov	r1, r3
 8001934:	480c      	ldr	r0, [pc, #48]	@ (8001968 <HAL_PCD_MspInit+0xf4>)
 8001936:	f000 fe5d 	bl	80025f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 800193c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001940:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 8001942:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001946:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 800194c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001958:	bf00      	nop
 800195a:	37e8      	adds	r7, #232	@ 0xe8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40080000 	.word	0x40080000
 8001964:	58024400 	.word	0x58024400
 8001968:	58020000 	.word	0x58020000

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001970:	f7ff f87a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	@ (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	@ (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199a:	f007 ff77 	bl	800988c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7ff fb3b 	bl	8001018 <main>
  bx  lr
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019ac:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80019b0:	0800f0c0 	.word	0x0800f0c0
  ldr r2, =_sbss
 80019b4:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 80019b8:	24000b54 	.word	0x24000b54

080019bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC3_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
 80019c8:	f000 f9a0 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019cc:	f002 fdbe 	bl	800454c <HAL_RCC_GetSysClockFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_Init+0x68>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	4913      	ldr	r1, [pc, #76]	@ (8001a2c <HAL_Init+0x6c>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_Init+0x68>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_Init+0x6c>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_Init+0x70>)
 8001a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_Init+0x74>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f814 	bl	8001a38 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e002      	b.n	8001a20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fccb 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	0800d390 	.word	0x0800d390
 8001a30:	24000004 	.word	0x24000004
 8001a34:	24000000 	.word	0x24000000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_InitTick+0x60>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e021      	b.n	8001a90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_InitTick+0x64>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_InitTick+0x60>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f985 	bl	8001d72 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f94f 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	@ (8001aa0 <HAL_InitTick+0x68>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2400000c 	.word	0x2400000c
 8001a9c:	24000000 	.word	0x24000000
 8001aa0:	24000008 	.word	0x24000008

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c
 8001ac8:	24000a04 	.word	0x24000a04

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	24000a04 	.word	0x24000a04

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2400000c 	.word	0x2400000c

08001b2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <HAL_GetREVID+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0c1b      	lsrs	r3, r3, #16
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	5c001000 	.word	0x5c001000

08001b44 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001b54:	4904      	ldr	r1, [pc, #16]	@ (8001b68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	58000400 	.word	0x58000400

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	05fa0000 	.word	0x05fa0000

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d30:	f7ff ff40 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	6978      	ldr	r0, [r7, #20]
 8001d3c:	f7ff ff90 	bl	8001c60 <NVIC_EncodePriority>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff5f 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff33 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffa4 	bl	8001cc8 <SysTick_Config>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0e3      	b.n	8001f66 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2223      	movs	r2, #35	@ 0x23
 8001dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe ff3b 	bl	8000c2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f70 <HAL_ETH_Init+0x1e4>)
 8001db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dbc:	4a6c      	ldr	r2, [pc, #432]	@ (8001f70 <HAL_ETH_Init+0x1e4>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f70 <HAL_ETH_Init+0x1e4>)
 8001dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7a1b      	ldrb	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff feb1 	bl	8001b44 <HAL_SYSCFG_ETHInterfaceSelect>
 8001de2:	e003      	b.n	8001dec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001de4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001de8:	f7ff feac 	bl	8001b44 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001dec:	4b61      	ldr	r3, [pc, #388]	@ (8001f74 <HAL_ETH_Init+0x1e8>)
 8001dee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fe60 	bl	8001acc <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e0e:	e011      	b.n	8001e34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e10:	f7ff fe5c 	bl	8001acc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e1e:	d909      	bls.n	8001e34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	22e0      	movs	r2, #224	@ 0xe0
 8001e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e098      	b.n	8001f66 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e4      	bne.n	8001e10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f89e 	bl	8001f88 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e4c:	f002 fcf8 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a49      	ldr	r2, [pc, #292]	@ (8001f78 <HAL_ETH_Init+0x1ec>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9a      	lsrs	r2, r3, #18
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa81 	bl	800236c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001e76:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e86:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	22e0      	movs	r2, #224	@ 0xe0
 8001ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e05d      	b.n	8001f66 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_ETH_Init+0x1f0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6952      	ldr	r2, [r2, #20]
 8001ebe:	0051      	lsls	r1, r2, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fae9 	bl	80024a6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb2f 	bl	8002538 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	3305      	adds	r3, #5
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	061a      	lsls	r2, r3, #24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	3302      	adds	r3, #2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f26:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f28:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_ETH_Init+0x1f4>)
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_ETH_Init+0x1f8>)
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2210      	movs	r2, #16
 8001f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400
 8001f74:	58000400 	.word	0x58000400
 8001f78:	431bde83 	.word	0x431bde83
 8001f7c:	ffff8001 	.word	0xffff8001
 8001f80:	0c020060 	.word	0x0c020060
 8001f84:	0c20c000 	.word	0x0c20c000

08001f88 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fa2:	f002 fc4d 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8001fa6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d804      	bhi.n	8001fba <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e022      	b.n	8002000 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d204      	bcs.n	8001fcc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e019      	b.n	8002000 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4a13      	ldr	r2, [pc, #76]	@ (800201c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d915      	bls.n	8002000 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d804      	bhi.n	8001fe6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e00c      	b.n	8002000 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d804      	bhi.n	8001ff8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e003      	b.n	8002000 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	02160ebf 	.word	0x02160ebf
 8002018:	03938700 	.word	0x03938700
 800201c:	05f5e0ff 	.word	0x05f5e0ff
 8002020:	08f0d17f 	.word	0x08f0d17f
 8002024:	0ee6b27f 	.word	0x0ee6b27f

08002028 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800203a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	7b1b      	ldrb	r3, [r3, #12]
 8002048:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800204a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	7b5b      	ldrb	r3, [r3, #13]
 8002050:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002052:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	7b9b      	ldrb	r3, [r3, #14]
 8002058:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800205a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	7bdb      	ldrb	r3, [r3, #15]
 8002060:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002062:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	7c12      	ldrb	r2, [r2, #16]
 8002068:	2a00      	cmp	r2, #0
 800206a:	d102      	bne.n	8002072 <ETH_SetMACConfig+0x4a>
 800206c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002070:	e000      	b.n	8002074 <ETH_SetMACConfig+0x4c>
 8002072:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002074:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	7c52      	ldrb	r2, [r2, #17]
 800207a:	2a00      	cmp	r2, #0
 800207c:	d102      	bne.n	8002084 <ETH_SetMACConfig+0x5c>
 800207e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002082:	e000      	b.n	8002086 <ETH_SetMACConfig+0x5e>
 8002084:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002086:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	7c9b      	ldrb	r3, [r3, #18]
 800208c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800208e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002094:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800209a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	7f1b      	ldrb	r3, [r3, #28]
 80020a0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80020a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	7f5b      	ldrb	r3, [r3, #29]
 80020a8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80020aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	7f92      	ldrb	r2, [r2, #30]
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d102      	bne.n	80020ba <ETH_SetMACConfig+0x92>
 80020b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b8:	e000      	b.n	80020bc <ETH_SetMACConfig+0x94>
 80020ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80020bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7fdb      	ldrb	r3, [r3, #31]
 80020c2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80020c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	d102      	bne.n	80020d6 <ETH_SetMACConfig+0xae>
 80020d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020d4:	e000      	b.n	80020d8 <ETH_SetMACConfig+0xb0>
 80020d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80020d8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80020de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020e6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80020e8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b56      	ldr	r3, [pc, #344]	@ (8002254 <ETH_SetMACConfig+0x22c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	430b      	orrs	r3, r1
 8002104:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002112:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002114:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800211c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800211e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002126:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002128:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002130:	2a00      	cmp	r2, #0
 8002132:	d102      	bne.n	800213a <ETH_SetMACConfig+0x112>
 8002134:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002138:	e000      	b.n	800213c <ETH_SetMACConfig+0x114>
 800213a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800213c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4b42      	ldr	r3, [pc, #264]	@ (8002258 <ETH_SetMACConfig+0x230>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	430b      	orrs	r3, r1
 8002158:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002160:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <ETH_SetMACConfig+0x234>)
 8002172:	4013      	ands	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	430b      	orrs	r3, r1
 800217c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002184:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800218a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002192:	2a00      	cmp	r2, #0
 8002194:	d101      	bne.n	800219a <ETH_SetMACConfig+0x172>
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	e000      	b.n	800219c <ETH_SetMACConfig+0x174>
 800219a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800219c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021ae:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80021cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	f023 0103 	bic.w	r1, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80021f2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800220e:	2a00      	cmp	r2, #0
 8002210:	d101      	bne.n	8002216 <ETH_SetMACConfig+0x1ee>
 8002212:	2240      	movs	r2, #64	@ 0x40
 8002214:	e000      	b.n	8002218 <ETH_SetMACConfig+0x1f0>
 8002216:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002218:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002220:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800222a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002238:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	430a      	orrs	r2, r1
 8002244:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	00048083 	.word	0x00048083
 8002258:	c0f88000 	.word	0xc0f88000
 800225c:	fffffef0 	.word	0xfffffef0

08002260 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <ETH_SetDMAConfig+0xf8>)
 8002276:	4013      	ands	r3, r2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	6811      	ldr	r1, [r2, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002286:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	791b      	ldrb	r3, [r3, #4]
 800228c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002292:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	7b1b      	ldrb	r3, [r3, #12]
 8002298:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <ETH_SetDMAConfig+0xfc>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	68f9      	ldr	r1, [r7, #12]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022b8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	7b5b      	ldrb	r3, [r3, #13]
 80022be:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <ETH_SetDMAConfig+0x100>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	430b      	orrs	r3, r1
 80022e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7d1b      	ldrb	r3, [r3, #20]
 80022f0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80022f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7f5b      	ldrb	r3, [r3, #29]
 80022f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002306:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <ETH_SetDMAConfig+0x104>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	430b      	orrs	r3, r1
 8002316:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800231a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7f1b      	ldrb	r3, [r3, #28]
 8002322:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002334:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <ETH_SetDMAConfig+0x108>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	68f9      	ldr	r1, [r7, #12]
 8002342:	430b      	orrs	r3, r1
 8002344:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002348:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	ffff87fd 	.word	0xffff87fd
 800235c:	ffff2ffe 	.word	0xffff2ffe
 8002360:	fffec000 	.word	0xfffec000
 8002364:	ffc0efef 	.word	0xffc0efef
 8002368:	7fc0ffff 	.word	0x7fc0ffff

0800236c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0a4      	sub	sp, #144	@ 0x90
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800237a:	2300      	movs	r3, #0
 800237c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002396:	2301      	movs	r3, #1
 8002398:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ac:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80023c4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80023c8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80023e6:	2300      	movs	r3, #0
 80023e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80023ee:	2300      	movs	r3, #0
 80023f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002404:	2320      	movs	r3, #32
 8002406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800240a:	2301      	movs	r3, #1
 800240c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002416:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800241c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002420:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002446:	2300      	movs	r3, #0
 8002448:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fde6 	bl	8002028 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800245c:	2301      	movs	r3, #1
 800245e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002460:	2301      	movs	r3, #1
 8002462:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002476:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800247a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002480:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002484:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800248c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fee1 	bl	8002260 <ETH_SetDMAConfig>
}
 800249e:	bf00      	nop
 80024a0:	3790      	adds	r7, #144	@ 0x90
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e01d      	b.n	80024f0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	3206      	adds	r2, #6
 80024e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d9de      	bls.n	80024b4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002504:	461a      	mov	r2, r3
 8002506:	2303      	movs	r3, #3
 8002508:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002518:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002528:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e023      	b.n	800258e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	3212      	adds	r2, #18
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d9d8      	bls.n	8002546 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ba:	461a      	mov	r2, r3
 80025bc:	2303      	movs	r3, #3
 80025be:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ce:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002602:	4b89      	ldr	r3, [pc, #548]	@ (8002828 <HAL_GPIO_Init+0x234>)
 8002604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002606:	e194      	b.n	8002932 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8186 	beq.w	800292c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d005      	beq.n	8002638 <HAL_GPIO_Init+0x44>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d130      	bne.n	800269a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266e:	2201      	movs	r2, #1
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 0201 	and.w	r2, r3, #1
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d017      	beq.n	80026d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d123      	bne.n	800272a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	69b9      	ldr	r1, [r7, #24]
 8002726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0203 	and.w	r2, r3, #3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80e0 	beq.w	800292c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276c:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_GPIO_Init+0x238>)
 800276e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002772:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_GPIO_Init+0x238>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_GPIO_Init+0x238>)
 800277e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <HAL_GPIO_Init+0x23c>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a20      	ldr	r2, [pc, #128]	@ (8002834 <HAL_GPIO_Init+0x240>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d052      	beq.n	800285c <HAL_GPIO_Init+0x268>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <HAL_GPIO_Init+0x244>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_GPIO_Init+0x22e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1e      	ldr	r2, [pc, #120]	@ (800283c <HAL_GPIO_Init+0x248>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x22a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_GPIO_Init+0x24c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x226>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_GPIO_Init+0x250>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x222>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_GPIO_Init+0x254>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x21e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <HAL_GPIO_Init+0x258>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x21a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <HAL_GPIO_Init+0x25c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_GPIO_Init+0x260>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x212>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <HAL_GPIO_Init+0x264>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x20e>
 80027fe:	2309      	movs	r3, #9
 8002800:	e02d      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002802:	230a      	movs	r3, #10
 8002804:	e02b      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002806:	2308      	movs	r3, #8
 8002808:	e029      	b.n	800285e <HAL_GPIO_Init+0x26a>
 800280a:	2307      	movs	r3, #7
 800280c:	e027      	b.n	800285e <HAL_GPIO_Init+0x26a>
 800280e:	2306      	movs	r3, #6
 8002810:	e025      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002812:	2305      	movs	r3, #5
 8002814:	e023      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002816:	2304      	movs	r3, #4
 8002818:	e021      	b.n	800285e <HAL_GPIO_Init+0x26a>
 800281a:	2303      	movs	r3, #3
 800281c:	e01f      	b.n	800285e <HAL_GPIO_Init+0x26a>
 800281e:	2302      	movs	r3, #2
 8002820:	e01d      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002822:	2301      	movs	r3, #1
 8002824:	e01b      	b.n	800285e <HAL_GPIO_Init+0x26a>
 8002826:	bf00      	nop
 8002828:	58000080 	.word	0x58000080
 800282c:	58024400 	.word	0x58024400
 8002830:	58000400 	.word	0x58000400
 8002834:	58020000 	.word	0x58020000
 8002838:	58020400 	.word	0x58020400
 800283c:	58020800 	.word	0x58020800
 8002840:	58020c00 	.word	0x58020c00
 8002844:	58021000 	.word	0x58021000
 8002848:	58021400 	.word	0x58021400
 800284c:	58021800 	.word	0x58021800
 8002850:	58021c00 	.word	0x58021c00
 8002854:	58022000 	.word	0x58022000
 8002858:	58022400 	.word	0x58022400
 800285c:	2300      	movs	r3, #0
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286e:	4938      	ldr	r1, [pc, #224]	@ (8002950 <HAL_GPIO_Init+0x35c>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f ae63 	bne.w	8002608 <HAL_GPIO_Init+0x14>
  }
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3724      	adds	r7, #36	@ 0x24
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	58000400 	.word	0x58000400

08002954 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800295c:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <HAL_HSEM_FastTake+0x2c>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3320      	adds	r3, #32
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_HSEM_FastTake+0x30>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	58026400 	.word	0x58026400
 8002984:	80000300 	.word	0x80000300

08002988 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002992:	4906      	ldr	r1, [pc, #24]	@ (80029ac <HAL_HSEM_Release+0x24>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	58026400 	.word	0x58026400

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e08b      	b.n	8002ada <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fa9c 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e006      	b.n	8002a38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d108      	bne.n	8002a52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	e007      	b.n	8002a62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_I2C_Init+0x134>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	02008000 	.word	0x02008000

08002ae8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 80f9 	bne.w	8002d02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x34>
 8002b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0ed      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Mem_Write+0x4e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0e6      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b3e:	f7fe ffc5 	bl	8001acc <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2319      	movs	r3, #25
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fac3 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0d1      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2221      	movs	r2, #33	@ 0x21
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b88:	88f8      	ldrh	r0, [r7, #6]
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	4603      	mov	r3, r0
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f9d3 	bl	8002f44 <I2C_RequestMemoryWrite>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0a9      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2bff      	cmp	r3, #255	@ 0xff
 8002bb8:	d90e      	bls.n	8002bd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22ff      	movs	r2, #255	@ 0xff
 8002bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fc47 	bl	8003464 <I2C_TransferConfig>
 8002bd6:	e00f      	b.n	8002bf8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fc36 	bl	8003464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fac6 	bl	800318e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e07b      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d034      	beq.n	8002cb0 <HAL_I2C_Mem_Write+0x1c8>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d130      	bne.n	8002cb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	@ 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fa3f 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e04d      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d90e      	bls.n	8002c90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	22ff      	movs	r2, #255	@ 0xff
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fbeb 	bl	8003464 <I2C_TransferConfig>
 8002c8e:	e00f      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fbda 	bl	8003464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d19e      	bne.n	8002bf8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 faac 	bl	800321c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e01a      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_I2C_Mem_Write+0x224>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	fe00e800 	.word	0xfe00e800

08002d10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	4608      	mov	r0, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	817b      	strh	r3, [r7, #10]
 8002d22:	460b      	mov	r3, r1
 8002d24:	813b      	strh	r3, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	f040 80fd 	bne.w	8002f32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x34>
 8002d3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0f1      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Mem_Read+0x4e>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0ea      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d66:	f7fe feb1 	bl	8001acc <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f9af 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d5      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2222      	movs	r2, #34	@ 0x22
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2240      	movs	r2, #64	@ 0x40
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db0:	88f8      	ldrh	r0, [r7, #6]
 8002db2:	893a      	ldrh	r2, [r7, #8]
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f913 	bl	8002fec <I2C_RequestMemoryRead>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0ad      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2bff      	cmp	r3, #255	@ 0xff
 8002de0:	d90e      	bls.n	8002e00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22ff      	movs	r2, #255	@ 0xff
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	4b52      	ldr	r3, [pc, #328]	@ (8002f3c <HAL_I2C_Mem_Read+0x22c>)
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fb33 	bl	8003464 <I2C_TransferConfig>
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_I2C_Mem_Read+0x22c>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fb22 	bl	8003464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	2200      	movs	r2, #0
 8002e28:	2104      	movs	r1, #4
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f956 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07c      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d034      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x1d0>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d130      	bne.n	8002ee0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f927 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04d      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ea0:	d90e      	bls.n	8002ec0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22ff      	movs	r2, #255	@ 0xff
 8002ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fad3 	bl	8003464 <I2C_TransferConfig>
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	8979      	ldrh	r1, [r7, #10]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fac2 	bl	8003464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d19a      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f994 	bl	800321c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01a      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_I2C_Mem_Read+0x230>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	80002400 	.word	0x80002400
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <I2C_RequestMemoryWrite+0xa4>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fa79 	bl	8003464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f909 	bl	800318e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02c      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f96:	e015      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8ef 	bl	800318e <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e012      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f884 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80002000 	.word	0x80002000

08002fec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <I2C_RequestMemoryRead+0xa4>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa26 	bl	8003464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f8b6 	bl	800318e <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e02c      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003032:	893b      	ldrh	r3, [r7, #8]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28
 800303c:	e015      	b.n	800306a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f89c 	bl	800318e <I2C_WaitOnTXISFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e012      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2200      	movs	r2, #0
 8003072:	2140      	movs	r1, #64	@ 0x40
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f831 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002000 	.word	0x80002000

08003094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d103      	bne.n	80030b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d007      	beq.n	80030d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	619a      	str	r2, [r3, #24]
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ec:	e03b      	b.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8d6 	bl	80032a4 <I2C_IsErrorOccurred>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d02d      	beq.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe fcdf 	bl	8001acc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x44>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d122      	bne.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	d113      	bne.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d0b4      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800319a:	e033      	b.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f87f 	bl	80032a4 <I2C_IsErrorOccurred>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e031      	b.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d025      	beq.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fc88 	bl	8001acc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11a      	bne.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d013      	beq.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d1c4      	bne.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003228:	e02f      	b.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f838 	bl	80032a4 <I2C_IsErrorOccurred>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e02d      	b.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe fc45 	bl	8001acc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11a      	bne.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b20      	cmp	r3, #32
 8003260:	d013      	beq.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e007      	b.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d1c8      	bne.n	800322a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	@ 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d068      	beq.n	80033a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2210      	movs	r2, #16
 80032d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d8:	e049      	b.n	800336e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d045      	beq.n	800336e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe fbf3 	bl	8001acc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_IsErrorOccurred+0x54>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d13a      	bne.n	800336e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800330a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331a:	d121      	bne.n	8003360 <I2C_IsErrorOccurred+0xbc>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003322:	d01d      	beq.n	8003360 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b20      	cmp	r3, #32
 8003328:	d01a      	beq.n	8003360 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003338:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800333a:	f7fe fbc7 	bl	8001acc <HAL_GetTick>
 800333e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003340:	e00e      	b.n	8003360 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003342:	f7fe fbc3 	bl	8001acc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b19      	cmp	r3, #25
 800334e:	d907      	bls.n	8003360 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800335e:	e006      	b.n	800336e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d1e9      	bne.n	8003342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d003      	beq.n	8003384 <I2C_IsErrorOccurred+0xe0>
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0aa      	beq.n	80032da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2220      	movs	r2, #32
 8003392:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01c      	beq.n	8003452 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fe3b 	bl	8003094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <I2C_IsErrorOccurred+0x1bc>)
 800342a:	400b      	ands	r3, r1
 800342c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003456:	4618      	mov	r0, r3
 8003458:	3728      	adds	r7, #40	@ 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	fe00e800 	.word	0xfe00e800

08003464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	4613      	mov	r3, r2
 8003474:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800347c:	7a7b      	ldrb	r3, [r7, #9]
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003484:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	4313      	orrs	r3, r2
 800348e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003492:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	0d5b      	lsrs	r3, r3, #21
 800349e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <I2C_TransferConfig+0x60>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	43db      	mvns	r3, r3
 80034a8:	ea02 0103 	and.w	r1, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	03ff63ff 	.word	0x03ff63ff

080034c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d138      	bne.n	8003550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e032      	b.n	8003552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	@ 0x24
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800351a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	d139      	bne.n	80035e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800357e:	2302      	movs	r3, #2
 8003580:	e033      	b.n	80035ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2224      	movs	r2, #36	@ 0x24
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0fe      	b.n	8003806 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fe f929 	bl	8001874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2203      	movs	r2, #3
 8003626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fc4c 	bl	8007ecc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7c1a      	ldrb	r2, [r3, #16]
 800363c:	f88d 2000 	strb.w	r2, [sp]
 8003640:	3304      	adds	r3, #4
 8003642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003644:	f004 fbd0 	bl	8007de8 <USB_CoreInit>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0d5      	b.n	8003806 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f004 fc44 	bl	8007eee <USB_SetCurrentMode>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0c6      	b.n	8003806 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e04a      	b.n	8003714 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3315      	adds	r3, #21
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3314      	adds	r3, #20
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	b298      	uxth	r0, r3
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	332e      	adds	r3, #46	@ 0x2e
 80036ba:	4602      	mov	r2, r0
 80036bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3318      	adds	r3, #24
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	331c      	adds	r3, #28
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3320      	adds	r3, #32
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3324      	adds	r3, #36	@ 0x24
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	3301      	adds	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	791b      	ldrb	r3, [r3, #4]
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3af      	bcc.n	800367e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e044      	b.n	80037ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	3301      	adds	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	791b      	ldrb	r3, [r3, #4]
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d3b5      	bcc.n	8003724 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7c1a      	ldrb	r2, [r3, #16]
 80037c0:	f88d 2000 	strb.w	r2, [sp]
 80037c4:	3304      	adds	r3, #4
 80037c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c8:	f004 fbde 	bl	8007f88 <USB_DevInit>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e013      	b.n	8003806 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7b1b      	ldrb	r3, [r3, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f80b 	bl	8003810 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fd99 	bl	8008336 <USB_DevDisconnect>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800383e:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_PCDEx_ActivateLPM+0x44>)
 8003840:	4313      	orrs	r3, r2
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	10000003 	.word	0x10000003

08003858 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003860:	4b29      	ldr	r3, [pc, #164]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	2b06      	cmp	r3, #6
 800386a:	d00a      	beq.n	8003882 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800386c:	4b26      	ldr	r3, [pc, #152]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e040      	b.n	8003900 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e03e      	b.n	8003900 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003882:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800388a:	491f      	ldr	r1, [pc, #124]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003892:	f7fe f91b 	bl	8001acc <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003898:	e009      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800389a:	f7fe f917 	bl	8001acc <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038a8:	d901      	bls.n	80038ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e028      	b.n	8003900 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038ae:	4b16      	ldr	r3, [pc, #88]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ba:	d1ee      	bne.n	800389a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b1e      	cmp	r3, #30
 80038c0:	d008      	beq.n	80038d4 <HAL_PWREx_ConfigSupply+0x7c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80038c6:	d005      	beq.n	80038d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b1d      	cmp	r3, #29
 80038cc:	d002      	beq.n	80038d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80038d2:	d114      	bne.n	80038fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80038d4:	f7fe f8fa 	bl	8001acc <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80038da:	e009      	b.n	80038f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038dc:	f7fe f8f6 	bl	8001acc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ea:	d901      	bls.n	80038f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e007      	b.n	8003900 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_PWREx_ConfigSupply+0xb0>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d1ee      	bne.n	80038dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	58024800 	.word	0x58024800

0800390c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	58024800 	.word	0x58024800

0800392c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f000 bc48 	b.w	80041d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8088 	beq.w	8003a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b99      	ldr	r3, [pc, #612]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003958:	4b96      	ldr	r3, [pc, #600]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	2b10      	cmp	r3, #16
 8003962:	d007      	beq.n	8003974 <HAL_RCC_OscConfig+0x48>
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	2b18      	cmp	r3, #24
 8003968:	d111      	bne.n	800398e <HAL_RCC_OscConfig+0x62>
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d06d      	beq.n	8003a5c <HAL_RCC_OscConfig+0x130>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d169      	bne.n	8003a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f000 bc21 	b.w	80041d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x7a>
 8003998:	4b86      	ldr	r3, [pc, #536]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a85      	ldr	r2, [pc, #532]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e02e      	b.n	8003a04 <HAL_RCC_OscConfig+0xd8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x9c>
 80039ae:	4b81      	ldr	r3, [pc, #516]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a80      	ldr	r2, [pc, #512]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7d      	ldr	r2, [pc, #500]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xd8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0xc0>
 80039d2:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a77      	ldr	r2, [pc, #476]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b75      	ldr	r3, [pc, #468]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a74      	ldr	r2, [pc, #464]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xd8>
 80039ec:	4b71      	ldr	r3, [pc, #452]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a70      	ldr	r2, [pc, #448]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b6e      	ldr	r3, [pc, #440]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a6d      	ldr	r2, [pc, #436]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe f85e 	bl	8001acc <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe f85a 	bl	8001acc <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e3d4      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a26:	4b63      	ldr	r3, [pc, #396]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe8>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f84a 	bl	8001acc <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe f846 	bl	8001acc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	@ 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e3c0      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4e:	4b59      	ldr	r3, [pc, #356]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x110>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80ca 	beq.w	8003c00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6c:	4b51      	ldr	r3, [pc, #324]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a76:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_RCC_OscConfig+0x166>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b18      	cmp	r3, #24
 8003a86:	d156      	bne.n	8003b36 <HAL_RCC_OscConfig+0x20a>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d151      	bne.n	8003b36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a92:	4b48      	ldr	r3, [pc, #288]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_RCC_OscConfig+0x17e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e392      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aaa:	4b42      	ldr	r3, [pc, #264]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0219 	bic.w	r2, r3, #25
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	493f      	ldr	r1, [pc, #252]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f806 	bl	8001acc <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fe f802 	bl	8001acc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e37c      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad6:	4b37      	ldr	r3, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	f7fe f823 	bl	8001b2c <HAL_GetREVID>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d817      	bhi.n	8003b20 <HAL_RCC_OscConfig+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d108      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1de>
 8003af8:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b00:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	e07a      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	031b      	lsls	r3, r3, #12
 8003b18:	4926      	ldr	r1, [pc, #152]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1e:	e06f      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	4921      	ldr	r1, [pc, #132]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	e064      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d047      	beq.n	8003bce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0219 	bic.w	r2, r3, #25
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	491a      	ldr	r1, [pc, #104]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd ffbc 	bl	8001acc <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fd ffb8 	bl	8001acc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e332      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6a:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	f7fd ffd9 	bl	8001b2c <HAL_GetREVID>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d819      	bhi.n	8003bb8 <HAL_RCC_OscConfig+0x28c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d108      	bne.n	8003b9e <HAL_RCC_OscConfig+0x272>
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b9a:	6053      	str	r3, [r2, #4]
 8003b9c:	e030      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	031b      	lsls	r3, r3, #12
 8003bac:	4901      	ldr	r1, [pc, #4]	@ (8003bb4 <HAL_RCC_OscConfig+0x288>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
 8003bb2:	e025      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
 8003bb4:	58024400 	.word	0x58024400
 8003bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	4997      	ldr	r1, [pc, #604]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e018      	b.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bce:	4b95      	ldr	r3, [pc, #596]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a94      	ldr	r2, [pc, #592]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fd ff77 	bl	8001acc <HAL_GetTick>
 8003bde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fd ff73 	bl	8001acc <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e2ed      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a9 	beq.w	8003d60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0e:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c18:	4b82      	ldr	r3, [pc, #520]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d007      	beq.n	8003c34 <HAL_RCC_OscConfig+0x308>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b18      	cmp	r3, #24
 8003c28:	d13a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x374>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d135      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c34:	4b7b      	ldr	r3, [pc, #492]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_OscConfig+0x320>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b80      	cmp	r3, #128	@ 0x80
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e2c1      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c4c:	f7fd ff6e 	bl	8001b2c <HAL_GetREVID>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d817      	bhi.n	8003c8a <HAL_RCC_OscConfig+0x35e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d108      	bne.n	8003c74 <HAL_RCC_OscConfig+0x348>
 8003c62:	4b70      	ldr	r3, [pc, #448]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c72:	e075      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	069b      	lsls	r3, r3, #26
 8003c82:	4968      	ldr	r1, [pc, #416]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c88:	e06a      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8a:	4b66      	ldr	r3, [pc, #408]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	4962      	ldr	r1, [pc, #392]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c9e:	e05f      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d042      	beq.n	8003d2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5d      	ldr	r2, [pc, #372]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd ff0a 	bl	8001acc <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cbc:	f7fd ff06 	bl	8001acc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e280      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cce:	4b55      	ldr	r3, [pc, #340]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cda:	f7fd ff27 	bl	8001b2c <HAL_GetREVID>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d817      	bhi.n	8003d18 <HAL_RCC_OscConfig+0x3ec>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d108      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3d6>
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003cfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cfe:	6053      	str	r3, [r2, #4]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
 8003d02:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	069b      	lsls	r3, r3, #26
 8003d10:	4944      	ldr	r1, [pc, #272]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
 8003d16:	e023      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
 8003d18:	4b42      	ldr	r3, [pc, #264]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	493f      	ldr	r1, [pc, #252]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60cb      	str	r3, [r1, #12]
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fec7 	bl	8001acc <HAL_GetTick>
 8003d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d42:	f7fd fec3 	bl	8001acc <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e23d      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d54:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d036      	beq.n	8003dda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d74:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d78:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fea4 	bl	8001acc <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd fea0 	bl	8001acc <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e21a      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x45c>
 8003da6:	e018      	b.n	8003dda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fe8a 	bl	8001acc <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fd fe86 	bl	8001acc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e200      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d039      	beq.n	8003e5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003df8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fe67 	bl	8001acc <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e02:	f7fd fe63 	bl	8001acc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1dd      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x4d6>
 8003e20:	e01b      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e28:	4b9b      	ldr	r3, [pc, #620]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a9a      	ldr	r2, [pc, #616]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e34:	f7fd fe4a 	bl	8001acc <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e3c:	f7fd fe46 	bl	8001acc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1c0      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e4e:	4b92      	ldr	r3, [pc, #584]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8081 	beq.w	8003f6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e68:	4b8c      	ldr	r3, [pc, #560]	@ (800409c <HAL_RCC_OscConfig+0x770>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a8b      	ldr	r2, [pc, #556]	@ (800409c <HAL_RCC_OscConfig+0x770>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e74:	f7fd fe2a 	bl	8001acc <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fe26 	bl	8001acc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1a0      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8e:	4b83      	ldr	r3, [pc, #524]	@ (800409c <HAL_RCC_OscConfig+0x770>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d106      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x584>
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eae:	e02d      	b.n	8003f0c <HAL_RCC_OscConfig+0x5e0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x5a6>
 8003eb8:	4b77      	ldr	r3, [pc, #476]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	4a76      	ldr	r2, [pc, #472]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec4:	4b74      	ldr	r3, [pc, #464]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	4a73      	ldr	r2, [pc, #460]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCC_OscConfig+0x5e0>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c8>
 8003eda:	4b6f      	ldr	r3, [pc, #444]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	4a6b      	ldr	r2, [pc, #428]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0x5e0>
 8003ef4:	4b68      	ldr	r3, [pc, #416]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a67      	ldr	r2, [pc, #412]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f00:	4b65      	ldr	r3, [pc, #404]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	4a64      	ldr	r2, [pc, #400]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	f023 0304 	bic.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fdda 	bl	8001acc <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fdd6 	bl	8001acc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e14e      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f32:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ee      	beq.n	8003f1c <HAL_RCC_OscConfig+0x5f0>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fd fdc4 	bl	8001acc <HAL_GetTick>
 8003f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fd fdc0 	bl	8001acc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e138      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ee      	bne.n	8003f48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 812d 	beq.w	80041ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f74:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f7c:	2b18      	cmp	r3, #24
 8003f7e:	f000 80bd 	beq.w	80040fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	f040 809e 	bne.w	80040c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b42      	ldr	r3, [pc, #264]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fd98 	bl	8001acc <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fd94 	bl	8001acc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e10e      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb2:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fbe:	4b36      	ldr	r3, [pc, #216]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc2:	4b37      	ldr	r3, [pc, #220]	@ (80040a0 <HAL_RCC_OscConfig+0x774>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	4931      	ldr	r1, [pc, #196]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	3b01      	subs	r3, #1
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004008:	4923      	ldr	r1, [pc, #140]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800400e:	4b22      	ldr	r3, [pc, #136]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	4a21      	ldr	r2, [pc, #132]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800401a:	4b1f      	ldr	r3, [pc, #124]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800401c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x778>)
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004026:	00d2      	lsls	r2, r2, #3
 8004028:	491b      	ldr	r1, [pc, #108]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800402e:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	f023 020c 	bic.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	4917      	ldr	r1, [pc, #92]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004040:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f023 0202 	bic.w	r2, r3, #2
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	4912      	ldr	r1, [pc, #72]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004052:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800406a:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004076:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a07      	ldr	r2, [pc, #28]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004082:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_RCC_OscConfig+0x76c>)
 8004088:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd fd1d 	bl	8001acc <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004094:	e011      	b.n	80040ba <HAL_RCC_OscConfig+0x78e>
 8004096:	bf00      	nop
 8004098:	58024400 	.word	0x58024400
 800409c:	58024800 	.word	0x58024800
 80040a0:	fffffc0c 	.word	0xfffffc0c
 80040a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fd fd10 	bl	8001acc <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e08a      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x77c>
 80040c6:	e082      	b.n	80041ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b43      	ldr	r3, [pc, #268]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a42      	ldr	r2, [pc, #264]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fcfa 	bl	8001acc <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd fcf6 	bl	8001acc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e070      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ee:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x7b0>
 80040fa:	e068      	b.n	80041ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040fc:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004102:	4b35      	ldr	r3, [pc, #212]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	2b01      	cmp	r3, #1
 800410e:	d031      	beq.n	8004174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0203 	and.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d12a      	bne.n	8004174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d122      	bne.n	8004174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d11a      	bne.n	8004174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	0a5b      	lsrs	r3, r3, #9
 8004142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d111      	bne.n	8004174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e02b      	b.n	80041d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004178:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004182:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d01f      	beq.n	80041ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800419a:	f7fd fc97 	bl	8001acc <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041a0:	bf00      	nop
 80041a2:	f7fd fc93 	bl	8001acc <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d0f9      	beq.n	80041a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80041b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b2:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <HAL_RCC_OscConfig+0x8b0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041ba:	00d2      	lsls	r2, r2, #3
 80041bc:	4906      	ldr	r1, [pc, #24]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80041c2:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_RCC_OscConfig+0x8ac>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3730      	adds	r7, #48	@ 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	58024400 	.word	0x58024400
 80041dc:	ffff0007 	.word	0xffff0007

080041e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e19c      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d910      	bls.n	8004224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b87      	ldr	r3, [pc, #540]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 020f 	bic.w	r2, r3, #15
 800420a:	4985      	ldr	r1, [pc, #532]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b83      	ldr	r3, [pc, #524]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e184      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	4b7b      	ldr	r3, [pc, #492]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800423c:	429a      	cmp	r2, r3
 800423e:	d908      	bls.n	8004252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004240:	4b78      	ldr	r3, [pc, #480]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4975      	ldr	r1, [pc, #468]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 800424e:	4313      	orrs	r3, r2
 8004250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d010      	beq.n	8004280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	4b70      	ldr	r3, [pc, #448]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800426a:	429a      	cmp	r2, r3
 800426c:	d908      	bls.n	8004280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800426e:	4b6d      	ldr	r3, [pc, #436]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	496a      	ldr	r1, [pc, #424]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004298:	429a      	cmp	r2, r3
 800429a:	d908      	bls.n	80042ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800429c:	4b61      	ldr	r3, [pc, #388]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	495e      	ldr	r1, [pc, #376]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d908      	bls.n	80042dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042ca:	4b56      	ldr	r3, [pc, #344]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4953      	ldr	r1, [pc, #332]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d908      	bls.n	800430a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f023 020f 	bic.w	r2, r3, #15
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4947      	ldr	r1, [pc, #284]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004306:	4313      	orrs	r3, r2
 8004308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d055      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004316:	4b43      	ldr	r3, [pc, #268]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4940      	ldr	r1, [pc, #256]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d107      	bne.n	8004340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004330:	4b3c      	ldr	r3, [pc, #240]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d121      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0f6      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d107      	bne.n	8004358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004348:	4b36      	ldr	r3, [pc, #216]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d115      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0ea      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004360:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0de      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004370:	4b2c      	ldr	r3, [pc, #176]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0d6      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004380:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f023 0207 	bic.w	r2, r3, #7
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4925      	ldr	r1, [pc, #148]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 800438e:	4313      	orrs	r3, r2
 8004390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fd fb9b 	bl	8001acc <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439a:	f7fd fb97 	bl	8001acc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0be      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	429a      	cmp	r2, r3
 80043c0:	d1eb      	bne.n	800439a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	429a      	cmp	r2, r3
 80043dc:	d208      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	490e      	ldr	r1, [pc, #56]	@ (8004424 <HAL_RCC_ClockConfig+0x244>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d214      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 020f 	bic.w	r2, r3, #15
 8004406:	4906      	ldr	r1, [pc, #24]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b04      	ldr	r3, [pc, #16]	@ (8004420 <HAL_RCC_ClockConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e086      	b.n	800452e <HAL_RCC_ClockConfig+0x34e>
 8004420:	52002000 	.word	0x52002000
 8004424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004440:	429a      	cmp	r2, r3
 8004442:	d208      	bcs.n	8004456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004444:	4b3c      	ldr	r3, [pc, #240]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4939      	ldr	r1, [pc, #228]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004452:	4313      	orrs	r3, r2
 8004454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	4b34      	ldr	r3, [pc, #208]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800446e:	429a      	cmp	r2, r3
 8004470:	d208      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004472:	4b31      	ldr	r3, [pc, #196]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	492e      	ldr	r1, [pc, #184]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800449c:	429a      	cmp	r2, r3
 800449e:	d208      	bcs.n	80044b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044a0:	4b25      	ldr	r3, [pc, #148]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	4922      	ldr	r1, [pc, #136]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d208      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4917      	ldr	r1, [pc, #92]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044e0:	f000 f834 	bl	800454c <HAL_RCC_GetSysClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	4912      	ldr	r1, [pc, #72]	@ (800453c <HAL_RCC_ClockConfig+0x35c>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004538 <HAL_RCC_ClockConfig+0x358>)
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	4a0d      	ldr	r2, [pc, #52]	@ (800453c <HAL_RCC_ClockConfig+0x35c>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <HAL_RCC_ClockConfig+0x360>)
 8004516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004518:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <HAL_RCC_ClockConfig+0x364>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <HAL_RCC_ClockConfig+0x368>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fa88 	bl	8001a38 <HAL_InitTick>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	0800d390 	.word	0x0800d390
 8004540:	24000004 	.word	0x24000004
 8004544:	24000000 	.word	0x24000000
 8004548:	24000008 	.word	0x24000008

0800454c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004552:	4bb3      	ldr	r3, [pc, #716]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455a:	2b18      	cmp	r3, #24
 800455c:	f200 8155 	bhi.w	800480a <HAL_RCC_GetSysClockFreq+0x2be>
 8004560:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	080045cd 	.word	0x080045cd
 800456c:	0800480b 	.word	0x0800480b
 8004570:	0800480b 	.word	0x0800480b
 8004574:	0800480b 	.word	0x0800480b
 8004578:	0800480b 	.word	0x0800480b
 800457c:	0800480b 	.word	0x0800480b
 8004580:	0800480b 	.word	0x0800480b
 8004584:	0800480b 	.word	0x0800480b
 8004588:	080045f3 	.word	0x080045f3
 800458c:	0800480b 	.word	0x0800480b
 8004590:	0800480b 	.word	0x0800480b
 8004594:	0800480b 	.word	0x0800480b
 8004598:	0800480b 	.word	0x0800480b
 800459c:	0800480b 	.word	0x0800480b
 80045a0:	0800480b 	.word	0x0800480b
 80045a4:	0800480b 	.word	0x0800480b
 80045a8:	080045f9 	.word	0x080045f9
 80045ac:	0800480b 	.word	0x0800480b
 80045b0:	0800480b 	.word	0x0800480b
 80045b4:	0800480b 	.word	0x0800480b
 80045b8:	0800480b 	.word	0x0800480b
 80045bc:	0800480b 	.word	0x0800480b
 80045c0:	0800480b 	.word	0x0800480b
 80045c4:	0800480b 	.word	0x0800480b
 80045c8:	080045ff 	.word	0x080045ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045cc:	4b94      	ldr	r3, [pc, #592]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045d8:	4b91      	ldr	r3, [pc, #580]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a90      	ldr	r2, [pc, #576]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80045ea:	e111      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ee:	61bb      	str	r3, [r7, #24]
      break;
 80045f0:	e10e      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80045f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045f4:	61bb      	str	r3, [r7, #24]
      break;
 80045f6:	e10b      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045f8:	4b8c      	ldr	r3, [pc, #560]	@ (800482c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045fa:	61bb      	str	r3, [r7, #24]
      break;
 80045fc:	e108      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045fe:	4b88      	ldr	r3, [pc, #544]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004608:	4b85      	ldr	r3, [pc, #532]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004614:	4b82      	ldr	r3, [pc, #520]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800461e:	4b80      	ldr	r3, [pc, #512]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004622:	08db      	lsrs	r3, r3, #3
 8004624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80e1 	beq.w	8004804 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b02      	cmp	r3, #2
 8004646:	f000 8083 	beq.w	8004750 <HAL_RCC_GetSysClockFreq+0x204>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b02      	cmp	r3, #2
 800464e:	f200 80a1 	bhi.w	8004794 <HAL_RCC_GetSysClockFreq+0x248>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x114>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d056      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x1c0>
 800465e:	e099      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004660:	4b6f      	ldr	r3, [pc, #444]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d02d      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800466c:	4b6c      	ldr	r3, [pc, #432]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	4a6b      	ldr	r2, [pc, #428]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b62      	ldr	r3, [pc, #392]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80046c6:	e087      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004834 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b51      	ldr	r3, [pc, #324]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800470a:	e065      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b40      	ldr	r3, [pc, #256]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004732:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800474e:	e043      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800483c <HAL_RCC_GetSysClockFreq+0x2f0>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a02 	vldr	s12, [r7, #8]
 8004776:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004792:	e021      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004838 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	0a5b      	lsrs	r3, r3, #9
 80047de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e2:	3301      	adds	r3, #1
 80047e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fc:	ee17 3a90 	vmov	r3, s15
 8004800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004802:	e005      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
      break;
 8004808:	e002      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800480a:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800480c:	61bb      	str	r3, [r7, #24]
      break;
 800480e:	bf00      	nop
  }

  return sysclockfreq;
 8004810:	69bb      	ldr	r3, [r7, #24]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3724      	adds	r7, #36	@ 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	58024400 	.word	0x58024400
 8004824:	03d09000 	.word	0x03d09000
 8004828:	003d0900 	.word	0x003d0900
 800482c:	007a1200 	.word	0x007a1200
 8004830:	46000000 	.word	0x46000000
 8004834:	4c742400 	.word	0x4c742400
 8004838:	4a742400 	.word	0x4a742400
 800483c:	4af42400 	.word	0x4af42400

08004840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004846:	f7ff fe81 	bl	800454c <HAL_RCC_GetSysClockFreq>
 800484a:	4602      	mov	r2, r0
 800484c:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x50>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	490f      	ldr	r1, [pc, #60]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x54>)
 8004858:	5ccb      	ldrb	r3, [r1, r3]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x50>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x54>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a07      	ldr	r2, [pc, #28]	@ (8004898 <HAL_RCC_GetHCLKFreq+0x58>)
 800487c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800487e:	4a07      	ldr	r2, [pc, #28]	@ (800489c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004884:	4b04      	ldr	r3, [pc, #16]	@ (8004898 <HAL_RCC_GetHCLKFreq+0x58>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	58024400 	.word	0x58024400
 8004894:	0800d390 	.word	0x0800d390
 8004898:	24000004 	.word	0x24000004
 800489c:	24000000 	.word	0x24000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80048a4:	f7ff ffcc 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4904      	ldr	r1, [pc, #16]	@ (80048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	58024400 	.word	0x58024400
 80048c8:	0800d390 	.word	0x0800d390

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048d0:	f7ff ffb6 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4904      	ldr	r1, [pc, #16]	@ (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	58024400 	.word	0x58024400
 80048f4:	0800d390 	.word	0x0800d390

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fc:	b0ca      	sub	sp, #296	@ 0x128
 80048fe:	af00      	add	r7, sp, #0
 8004900:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800490a:	2300      	movs	r3, #0
 800490c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800491c:	2500      	movs	r5, #0
 800491e:	ea54 0305 	orrs.w	r3, r4, r5
 8004922:	d049      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800492a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800492e:	d02f      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004930:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004934:	d828      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800493a:	d01a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800493c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004940:	d822      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494a:	d007      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800494c:	e01c      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494e:	4bb8      	ldr	r3, [pc, #736]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	4ab7      	ldr	r2, [pc, #732]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800495a:	e01a      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	3308      	adds	r3, #8
 8004962:	2102      	movs	r1, #2
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fc8f 	bl	8006288 <RCCEx_PLL2_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004970:	e00f      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	2102      	movs	r1, #2
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fd36 	bl	80063ec <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800499a:	4ba5      	ldr	r3, [pc, #660]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800499c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a8:	4aa1      	ldr	r2, [pc, #644]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049c4:	f04f 0900 	mov.w	r9, #0
 80049c8:	ea58 0309 	orrs.w	r3, r8, r9
 80049cc:	d047      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d82a      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049d8:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049f5 	.word	0x080049f5
 80049e4:	08004a03 	.word	0x08004a03
 80049e8:	08004a19 	.word	0x08004a19
 80049ec:	08004a37 	.word	0x08004a37
 80049f0:	08004a37 	.word	0x08004a37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	4a8d      	ldr	r2, [pc, #564]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a00:	e01a      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	3308      	adds	r3, #8
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 fc3c 	bl	8006288 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a16:	e00f      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	3328      	adds	r3, #40	@ 0x28
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fce3 	bl	80063ec <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a2c:	e004      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a40:	4b7b      	ldr	r3, [pc, #492]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	f023 0107 	bic.w	r1, r3, #7
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	4a78      	ldr	r2, [pc, #480]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a6a:	f04f 0b00 	mov.w	fp, #0
 8004a6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a72:	d04c      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d030      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a84:	d829      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a88:	d02d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a8c:	d825      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d018      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a92:	2b80      	cmp	r3, #128	@ 0x80
 8004a94:	d821      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a9a:	2b40      	cmp	r3, #64	@ 0x40
 8004a9c:	d007      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a9e:	e01c      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa0:	4b63      	ldr	r3, [pc, #396]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	4a62      	ldr	r2, [pc, #392]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fbe6 	bl	8006288 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ac2:	e011      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	3328      	adds	r3, #40	@ 0x28
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fc8d 	bl	80063ec <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004af0:	4b4f      	ldr	r3, [pc, #316]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afe:	4a4c      	ldr	r2, [pc, #304]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d053      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b3a:	d035      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004b3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b40:	d82e      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b46:	d031      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004b48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b4c:	d828      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b52:	d01a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b58:	d822      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b62:	d007      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b66:	4b32      	ldr	r3, [pc, #200]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a31      	ldr	r2, [pc, #196]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b72:	e01c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	3308      	adds	r3, #8
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fb83 	bl	8006288 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b88:	e011      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	3328      	adds	r3, #40	@ 0x28
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 fc2a 	bl	80063ec <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b9e:	e006      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ba6:	e002      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004bec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d056      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c02:	d038      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c08:	d831      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c0e:	d034      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c14:	d82b      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c1a:	d01d      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c20:	d825      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c2c:	e01f      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c34:	4ba2      	ldr	r3, [pc, #648]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	4aa1      	ldr	r2, [pc, #644]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c40:	e01c      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	3308      	adds	r3, #8
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fb1c 	bl	8006288 <RCCEx_PLL2_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c56:	e011      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5c:	3328      	adds	r3, #40	@ 0x28
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fbc3 	bl	80063ec <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c84:	4b8e      	ldr	r3, [pc, #568]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c94:	4a8a      	ldr	r2, [pc, #552]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9a:	e003      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d03a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cca:	2b30      	cmp	r3, #48	@ 0x30
 8004ccc:	d01f      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004cce:	2b30      	cmp	r3, #48	@ 0x30
 8004cd0:	d819      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d815      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d019      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d111      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce2:	4b77      	ldr	r3, [pc, #476]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	4a76      	ldr	r2, [pc, #472]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004cee:	e011      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fac5 	bl	8006288 <RCCEx_PLL2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d0c:	e002      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d1c:	4b68      	ldr	r3, [pc, #416]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2a:	4a65      	ldr	r2, [pc, #404]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d051      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d64:	d035      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004d66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d6a:	d82e      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d70:	d031      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d76:	d828      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d7c:	d01a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d822      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8c:	d007      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d8e:	e01c      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d90:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	3308      	adds	r3, #8
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fa6e 	bl	8006288 <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004db2:	e011      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	3328      	adds	r3, #40	@ 0x28
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fb15 	bl	80063ec <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e006      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004de0:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dee:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d056      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e28:	d033      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e2e:	d82c      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e34:	d02f      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e3a:	d826      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e40:	d02b      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004e42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e46:	d820      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4c:	d012      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e52:	d81a      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d022      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5c:	d115      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	3308      	adds	r3, #8
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f001 fa0e 	bl	8006288 <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e72:	e015      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e78:	3328      	adds	r3, #40	@ 0x28
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 fab5 	bl	80063ec <RCCEx_PLL3_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e92:	bf00      	nop
 8004e94:	e004      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb6:	4a02      	ldr	r2, [pc, #8]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ebc:	e006      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d055      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ef8:	d033      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004efe:	d82c      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d02f      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0a:	d826      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f10:	d02b      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f16:	d820      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f1c:	d012      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f22:	d81a      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f2c:	d115      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	3308      	adds	r3, #8
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f9a6 	bl	8006288 <RCCEx_PLL2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f42:	e015      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fa4d 	bl	80063ec <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f58:	e00a      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f62:	bf00      	nop
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f66:	bf00      	nop
 8004f68:	e002      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f6a:	bf00      	nop
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f78:	4ba3      	ldr	r3, [pc, #652]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f88:	4a9f      	ldr	r2, [pc, #636]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8e:	e003      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d037      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fc8:	d816      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d018      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fd2:	d111      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004fe0:	e00f      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f94c 	bl	8006288 <RCCEx_PLL2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800500a:	4b7f      	ldr	r3, [pc, #508]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005018:	4a7b      	ldr	r2, [pc, #492]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800501a:	430b      	orrs	r3, r1
 800501c:	6513      	str	r3, [r2, #80]	@ 0x50
 800501e:	e003      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005038:	2300      	movs	r3, #0
 800503a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800503e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	d039      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	2b03      	cmp	r3, #3
 8005050:	d81c      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005052:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005095 	.word	0x08005095
 800505c:	08005069 	.word	0x08005069
 8005060:	08005077 	.word	0x08005077
 8005064:	08005095 	.word	0x08005095
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005068:	4b67      	ldr	r3, [pc, #412]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	4a66      	ldr	r2, [pc, #408]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005074:	e00f      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	3308      	adds	r3, #8
 800507c:	2102      	movs	r1, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f001 f902 	bl	8006288 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800508a:	e004      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005092:	e000      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800509e:	4b5a      	ldr	r3, [pc, #360]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	f023 0103 	bic.w	r1, r3, #3
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ac:	4a56      	ldr	r2, [pc, #344]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ae:	430b      	orrs	r3, r1
 80050b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050b2:	e003      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	f000 809f 	beq.w	800521c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050de:	4b4b      	ldr	r3, [pc, #300]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a4a      	ldr	r2, [pc, #296]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ea:	f7fc fcef 	bl	8001acc <HAL_GetTick>
 80050ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050f2:	e00b      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fcea 	bl	8001acc <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	@ 0x64
 8005102:	d903      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800510a:	e005      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510c:	4b3f      	ldr	r3, [pc, #252]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ed      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511c:	2b00      	cmp	r3, #0
 800511e:	d179      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005120:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005122:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800512c:	4053      	eors	r3, r2
 800512e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d015      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005136:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800513e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005146:	4a30      	ldr	r2, [pc, #192]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800514e:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	4a2d      	ldr	r2, [pc, #180]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005158:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800515a:	4a2b      	ldr	r2, [pc, #172]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800516a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516e:	d118      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fc fcac 	bl	8001acc <HAL_GetTick>
 8005174:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005178:	e00d      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fc fca7 	bl	8001acc <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005184:	1ad2      	subs	r2, r2, r3
 8005186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800518a:	429a      	cmp	r2, r3
 800518c:	d903      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005194:	e005      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005196:	4b1c      	ldr	r3, [pc, #112]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0eb      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d129      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ba:	d10e      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80051bc:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051cc:	091a      	lsrs	r2, r3, #4
 80051ce:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6113      	str	r3, [r2, #16]
 80051d8:	e005      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051e4:	6113      	str	r3, [r2, #16]
 80051e6:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f6:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fc:	e00e      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005208:	58024400 	.word	0x58024400
 800520c:	58024800 	.word	0x58024800
 8005210:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f002 0301 	and.w	r3, r2, #1
 8005228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005232:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	f000 8089 	beq.w	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005244:	2b28      	cmp	r3, #40	@ 0x28
 8005246:	d86b      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005248:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005329 	.word	0x08005329
 8005254:	08005321 	.word	0x08005321
 8005258:	08005321 	.word	0x08005321
 800525c:	08005321 	.word	0x08005321
 8005260:	08005321 	.word	0x08005321
 8005264:	08005321 	.word	0x08005321
 8005268:	08005321 	.word	0x08005321
 800526c:	08005321 	.word	0x08005321
 8005270:	080052f5 	.word	0x080052f5
 8005274:	08005321 	.word	0x08005321
 8005278:	08005321 	.word	0x08005321
 800527c:	08005321 	.word	0x08005321
 8005280:	08005321 	.word	0x08005321
 8005284:	08005321 	.word	0x08005321
 8005288:	08005321 	.word	0x08005321
 800528c:	08005321 	.word	0x08005321
 8005290:	0800530b 	.word	0x0800530b
 8005294:	08005321 	.word	0x08005321
 8005298:	08005321 	.word	0x08005321
 800529c:	08005321 	.word	0x08005321
 80052a0:	08005321 	.word	0x08005321
 80052a4:	08005321 	.word	0x08005321
 80052a8:	08005321 	.word	0x08005321
 80052ac:	08005321 	.word	0x08005321
 80052b0:	08005329 	.word	0x08005329
 80052b4:	08005321 	.word	0x08005321
 80052b8:	08005321 	.word	0x08005321
 80052bc:	08005321 	.word	0x08005321
 80052c0:	08005321 	.word	0x08005321
 80052c4:	08005321 	.word	0x08005321
 80052c8:	08005321 	.word	0x08005321
 80052cc:	08005321 	.word	0x08005321
 80052d0:	08005329 	.word	0x08005329
 80052d4:	08005321 	.word	0x08005321
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005321 	.word	0x08005321
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005321 	.word	0x08005321
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005329 	.word	0x08005329
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f8:	3308      	adds	r3, #8
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 ffc3 	bl	8006288 <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005308:	e00f      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530e:	3328      	adds	r3, #40	@ 0x28
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f001 f86a 	bl	80063ec <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005332:	4bbf      	ldr	r3, [pc, #764]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005340:	4abb      	ldr	r2, [pc, #748]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005342:	430b      	orrs	r3, r1
 8005344:	6553      	str	r3, [r2, #84]	@ 0x54
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f002 0302 	and.w	r3, r2, #2
 800535c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d041      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005376:	2b05      	cmp	r3, #5
 8005378:	d824      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800537a:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	080053cd 	.word	0x080053cd
 8005384:	08005399 	.word	0x08005399
 8005388:	080053af 	.word	0x080053af
 800538c:	080053cd 	.word	0x080053cd
 8005390:	080053cd 	.word	0x080053cd
 8005394:	080053cd 	.word	0x080053cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539c:	3308      	adds	r3, #8
 800539e:	2101      	movs	r1, #1
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 ff71 	bl	8006288 <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053ac:	e00f      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b2:	3328      	adds	r3, #40	@ 0x28
 80053b4:	2101      	movs	r1, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f818 	bl	80063ec <RCCEx_PLL3_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80053d6:	4b96      	ldr	r3, [pc, #600]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f023 0107 	bic.w	r1, r3, #7
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053e4:	4a92      	ldr	r2, [pc, #584]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80053ea:	e003      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	f002 0304 	and.w	r3, r2, #4
 8005400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005404:	2300      	movs	r3, #0
 8005406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800540a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800540e:	460b      	mov	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	d044      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541c:	2b05      	cmp	r3, #5
 800541e:	d825      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005420:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	08005475 	.word	0x08005475
 800542c:	08005441 	.word	0x08005441
 8005430:	08005457 	.word	0x08005457
 8005434:	08005475 	.word	0x08005475
 8005438:	08005475 	.word	0x08005475
 800543c:	08005475 	.word	0x08005475
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	3308      	adds	r3, #8
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f000 ff1d 	bl	8006288 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005454:	e00f      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f000 ffc4 	bl	80063ec <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800547e:	4b6c      	ldr	r3, [pc, #432]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f023 0107 	bic.w	r1, r3, #7
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548e:	4a68      	ldr	r2, [pc, #416]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	@ 0x58
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f002 0320 	and.w	r3, r2, #32
 80054aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d055      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ca:	d033      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80054cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054d0:	d82c      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d02f      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054dc:	d826      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054e2:	d02b      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80054e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054e8:	d820      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ee:	d012      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f4:	d81a      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d022      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80054fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fe:	d115      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	3308      	adds	r3, #8
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f000 febd 	bl	8006288 <RCCEx_PLL2_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005514:	e015      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	3328      	adds	r3, #40	@ 0x28
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 ff64 	bl	80063ec <RCCEx_PLL3_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800552a:	e00a      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005532:	e006      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005534:	bf00      	nop
 8005536:	e004      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800554a:	4b39      	ldr	r3, [pc, #228]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555a:	4a35      	ldr	r2, [pc, #212]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005584:	460b      	mov	r3, r1
 8005586:	4313      	orrs	r3, r2
 8005588:	d058      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005592:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005596:	d033      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005598:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800559c:	d82c      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	d02f      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a8:	d826      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055ae:	d02b      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80055b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b4:	d820      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ba:	d012      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c0:	d81a      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d022      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ca:	d115      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d0:	3308      	adds	r3, #8
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fe57 	bl	8006288 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80055e0:	e015      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	3328      	adds	r3, #40	@ 0x28
 80055e8:	2102      	movs	r1, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fefe 	bl	80063ec <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80055f6:	e00a      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055fe:	e006      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005600:	bf00      	nop
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005604:	bf00      	nop
 8005606:	e002      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005616:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005626:	4a02      	ldr	r2, [pc, #8]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6593      	str	r3, [r2, #88]	@ 0x58
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800564c:	2300      	movs	r3, #0
 800564e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005652:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d055      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005664:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005668:	d033      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800566a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800566e:	d82c      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005674:	d02f      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567a:	d826      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800567c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005680:	d02b      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005682:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005686:	d820      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800568c:	d012      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800568e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005692:	d81a      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d022      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569c:	d115      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	3308      	adds	r3, #8
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fdee 	bl	8006288 <RCCEx_PLL2_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056b2:	e015      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b8:	3328      	adds	r3, #40	@ 0x28
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fe95 	bl	80063ec <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056c8:	e00a      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056d2:	bf00      	nop
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056f8:	4a9d      	ldr	r2, [pc, #628]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 0308 	and.w	r3, r2, #8
 8005714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800571e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d01e      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005734:	d10c      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	3328      	adds	r3, #40	@ 0x28
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fe54 	bl	80063ec <RCCEx_PLL3_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005750:	4b87      	ldr	r3, [pc, #540]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005754:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005760:	4a83      	ldr	r2, [pc, #524]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005762:	430b      	orrs	r3, r1
 8005764:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f002 0310 	and.w	r3, r2, #16
 8005772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800577c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d01e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	d10c      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	3328      	adds	r3, #40	@ 0x28
 800579a:	2102      	movs	r1, #2
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fe25 	bl	80063ec <RCCEx_PLL3_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ae:	4b70      	ldr	r3, [pc, #448]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057be:	4a6c      	ldr	r2, [pc, #432]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80057d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057de:	460b      	mov	r3, r1
 80057e0:	4313      	orrs	r3, r2
 80057e2:	d03e      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f0:	d022      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f6:	d81b      	bhi.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005800:	d00b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3308      	adds	r3, #8
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fd3b 	bl	8006288 <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005818:	e00f      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	3328      	adds	r3, #40	@ 0x28
 8005820:	2102      	movs	r1, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fde2 	bl	80063ec <RCCEx_PLL3_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800582e:	e004      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005842:	4b4b      	ldr	r3, [pc, #300]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005852:	4a47      	ldr	r2, [pc, #284]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005854:	430b      	orrs	r3, r1
 8005856:	6593      	str	r3, [r2, #88]	@ 0x58
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800586e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005870:	2300      	movs	r3, #0
 8005872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005874:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800588a:	d01f      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800588c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005890:	d818      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800589c:	d007      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4b33      	ldr	r3, [pc, #204]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	3328      	adds	r3, #40	@ 0x28
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd98 	bl	80063ec <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ca:	e000      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80058cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058d6:	4b26      	ldr	r3, [pc, #152]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	4a22      	ldr	r2, [pc, #136]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005902:	673b      	str	r3, [r7, #112]	@ 0x70
 8005904:	2300      	movs	r3, #0
 8005906:	677b      	str	r3, [r7, #116]	@ 0x74
 8005908:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d034      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005920:	d007      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005922:	e011      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	4a11      	ldr	r2, [pc, #68]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005930:	e00e      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	3308      	adds	r3, #8
 8005938:	2102      	movs	r1, #2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fca4 	bl	8006288 <RCCEx_PLL2_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800594e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800595a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005966:	4a02      	ldr	r2, [pc, #8]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005968:	430b      	orrs	r3, r1
 800596a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800598a:	2300      	movs	r3, #0
 800598c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800598e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d00c      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	3328      	adds	r3, #40	@ 0x28
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fd23 	bl	80063ec <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80059be:	663b      	str	r3, [r7, #96]	@ 0x60
 80059c0:	2300      	movs	r3, #0
 80059c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80059c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059c8:	460b      	mov	r3, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	d038      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059da:	d018      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80059dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059e0:	d811      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80059e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e6:	d014      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80059e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ec:	d80b      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d011      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	d106      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f8:	4bc3      	ldr	r3, [pc, #780]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	4ac2      	ldr	r2, [pc, #776]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a04:	e008      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a0c:	e004      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a20:	4bb9      	ldr	r3, [pc, #740]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a30:	4ab5      	ldr	r2, [pc, #724]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a36:	e003      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a4e:	2300      	movs	r3, #0
 8005a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a5c:	4baa      	ldr	r3, [pc, #680]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a7e:	2300      	movs	r3, #0
 8005a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005abe:	4b92      	ldr	r3, [pc, #584]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005acc:	4a8e      	ldr	r2, [pc, #568]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aee:	4b86      	ldr	r3, [pc, #536]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	4a85      	ldr	r2, [pc, #532]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005af8:	6113      	str	r3, [r2, #16]
 8005afa:	4b83      	ldr	r3, [pc, #524]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005afc:	6919      	ldr	r1, [r3, #16]
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b06:	4a80      	ldr	r2, [pc, #512]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d009      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b28:	4b77      	ldr	r3, [pc, #476]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	4a74      	ldr	r2, [pc, #464]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b58:	4b6b      	ldr	r3, [pc, #428]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b68:	4a67      	ldr	r2, [pc, #412]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	2100      	movs	r1, #0
 8005b78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d011      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fb78 	bl	8006288 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6239      	str	r1, [r7, #32]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	d011      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb58 	bl	8006288 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	61b9      	str	r1, [r7, #24]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c04:	460b      	mov	r3, r1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	d011      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	3308      	adds	r3, #8
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fb38 	bl	8006288 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	2100      	movs	r1, #0
 8005c38:	6139      	str	r1, [r7, #16]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d011      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	3328      	adds	r3, #40	@ 0x28
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fbca 	bl	80063ec <RCCEx_PLL3_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	2100      	movs	r1, #0
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c84:	460b      	mov	r3, r1
 8005c86:	4313      	orrs	r3, r2
 8005c88:	d011      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	3328      	adds	r3, #40	@ 0x28
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fbaa 	bl	80063ec <RCCEx_PLL3_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	d011      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	3328      	adds	r3, #40	@ 0x28
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb8a 	bl	80063ec <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005cee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d02:	46bd      	mov	sp, r7
 8005d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d08:	58024400 	.word	0x58024400

08005d0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d10:	f7fe fd96 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4904      	ldr	r1, [pc, #16]	@ (8005d34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	58024400 	.word	0x58024400
 8005d34:	0800d390 	.word	0x0800d390

08005d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	@ 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d40:	4ba1      	ldr	r3, [pc, #644]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	0b1b      	lsrs	r3, r3, #12
 8005d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d56:	4b9c      	ldr	r3, [pc, #624]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d62:	4b99      	ldr	r3, [pc, #612]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8111 	beq.w	8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	f000 8083 	beq.w	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	f200 80a1 	bhi.w	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d056      	beq.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005da2:	e099      	b.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da4:	4b88      	ldr	r3, [pc, #544]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02d      	beq.n	8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db0:	4b85      	ldr	r3, [pc, #532]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	08db      	lsrs	r3, r3, #3
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	4a84      	ldr	r2, [pc, #528]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e0a:	e087      	b.n	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4e:	e065      	b.n	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b59      	ldr	r3, [pc, #356]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e92:	e043      	b.n	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea6:	4b48      	ldr	r3, [pc, #288]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed6:	e021      	b.n	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b37      	ldr	r3, [pc, #220]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	0a5b      	lsrs	r3, r3, #9
 8005f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f42:	ee17 2a90 	vmov	r2, s15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f70:	ee17 2a90 	vmov	r2, s15
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f78:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9e:	ee17 2a90 	vmov	r2, s15
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fa6:	e008      	b.n	8005fba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
}
 8005fba:	bf00      	nop
 8005fbc:	3724      	adds	r7, #36	@ 0x24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	58024400 	.word	0x58024400
 8005fcc:	03d09000 	.word	0x03d09000
 8005fd0:	46000000 	.word	0x46000000
 8005fd4:	4c742400 	.word	0x4c742400
 8005fd8:	4a742400 	.word	0x4a742400
 8005fdc:	4af42400 	.word	0x4af42400

08005fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff6:	0d1b      	lsrs	r3, r3, #20
 8005ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ffc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800600a:	4b99      	ldr	r3, [pc, #612]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8111 	beq.w	8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f000 8083 	beq.w	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b02      	cmp	r3, #2
 800603a:	f200 80a1 	bhi.w	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d056      	beq.n	80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800604a:	e099      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800604c:	4b88      	ldr	r3, [pc, #544]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d02d      	beq.n	80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006058:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	08db      	lsrs	r3, r3, #3
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	4a84      	ldr	r2, [pc, #528]	@ (8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006082:	4b7b      	ldr	r3, [pc, #492]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006092:	ed97 6a03 	vldr	s12, [r7, #12]
 8006096:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060b2:	e087      	b.n	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800627c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f6:	e065      	b.n	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b59      	ldr	r3, [pc, #356]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800613a:	e043      	b.n	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800614a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614e:	4b48      	ldr	r3, [pc, #288]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006162:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617e:	e021      	b.n	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800618e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006192:	4b37      	ldr	r3, [pc, #220]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	0a5b      	lsrs	r3, r3, #9
 80061ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061de:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ea:	ee17 2a90 	vmov	r2, s15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006218:	ee17 2a90 	vmov	r2, s15
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006220:	4b13      	ldr	r3, [pc, #76]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800623a:	edd7 6a07 	vldr	s13, [r7, #28]
 800623e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006246:	ee17 2a90 	vmov	r2, s15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800624e:	e008      	b.n	8006262 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	609a      	str	r2, [r3, #8]
}
 8006262:	bf00      	nop
 8006264:	3724      	adds	r7, #36	@ 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
 8006274:	03d09000 	.word	0x03d09000
 8006278:	46000000 	.word	0x46000000
 800627c:	4c742400 	.word	0x4c742400
 8006280:	4a742400 	.word	0x4a742400
 8006284:	4af42400 	.word	0x4af42400

08006288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006296:	4b53      	ldr	r3, [pc, #332]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d101      	bne.n	80062a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e099      	b.n	80063da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062a6:	4b4f      	ldr	r3, [pc, #316]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a4e      	ldr	r2, [pc, #312]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b2:	f7fb fc0b 	bl	8001acc <HAL_GetTick>
 80062b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062b8:	e008      	b.n	80062cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062ba:	f7fb fc07 	bl	8001acc <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e086      	b.n	80063da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062cc:	4b45      	ldr	r3, [pc, #276]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f0      	bne.n	80062ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062d8:	4b42      	ldr	r3, [pc, #264]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	493f      	ldr	r1, [pc, #252]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	025b      	lsls	r3, r3, #9
 80062fe:	b29b      	uxth	r3, r3
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	3b01      	subs	r3, #1
 8006308:	041b      	lsls	r3, r3, #16
 800630a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	3b01      	subs	r3, #1
 8006316:	061b      	lsls	r3, r3, #24
 8006318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800631c:	4931      	ldr	r1, [pc, #196]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800631e:	4313      	orrs	r3, r2
 8006320:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006322:	4b30      	ldr	r3, [pc, #192]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	492d      	ldr	r1, [pc, #180]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006334:	4b2b      	ldr	r3, [pc, #172]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	f023 0220 	bic.w	r2, r3, #32
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	4928      	ldr	r1, [pc, #160]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006342:	4313      	orrs	r3, r2
 8006344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006346:	4b27      	ldr	r3, [pc, #156]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	4a26      	ldr	r2, [pc, #152]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006352:	4b24      	ldr	r3, [pc, #144]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006356:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <RCCEx_PLL2_Config+0x160>)
 8006358:	4013      	ands	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	69d2      	ldr	r2, [r2, #28]
 800635e:	00d2      	lsls	r2, r2, #3
 8006360:	4920      	ldr	r1, [pc, #128]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006366:	4b1f      	ldr	r3, [pc, #124]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636a:	4a1e      	ldr	r2, [pc, #120]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800636c:	f043 0310 	orr.w	r3, r3, #16
 8006370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006378:	4b1a      	ldr	r3, [pc, #104]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	4a19      	ldr	r2, [pc, #100]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800637e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006384:	e00f      	b.n	80063a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d106      	bne.n	800639a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800638c:	4b15      	ldr	r3, [pc, #84]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800638e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006390:	4a14      	ldr	r2, [pc, #80]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 8006392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006398:	e005      	b.n	80063a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80063a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063a6:	4b0f      	ldr	r3, [pc, #60]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a0e      	ldr	r2, [pc, #56]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fb fb8b 	bl	8001acc <HAL_GetTick>
 80063b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063b8:	e008      	b.n	80063cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063ba:	f7fb fb87 	bl	8001acc <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e006      	b.n	80063da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063cc:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
 80063e8:	ffff0007 	.word	0xffff0007

080063ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063fa:	4b53      	ldr	r3, [pc, #332]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b03      	cmp	r3, #3
 8006404:	d101      	bne.n	800640a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e099      	b.n	800653e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800640a:	4b4f      	ldr	r3, [pc, #316]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4e      	ldr	r2, [pc, #312]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006416:	f7fb fb59 	bl	8001acc <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800641c:	e008      	b.n	8006430 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800641e:	f7fb fb55 	bl	8001acc <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e086      	b.n	800653e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006430:	4b45      	ldr	r3, [pc, #276]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f0      	bne.n	800641e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800643c:	4b42      	ldr	r3, [pc, #264]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	051b      	lsls	r3, r3, #20
 800644a:	493f      	ldr	r1, [pc, #252]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 800644c:	4313      	orrs	r3, r2
 800644e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	3b01      	subs	r3, #1
 8006456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	025b      	lsls	r3, r3, #9
 8006462:	b29b      	uxth	r3, r3
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	3b01      	subs	r3, #1
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	3b01      	subs	r3, #1
 800647a:	061b      	lsls	r3, r3, #24
 800647c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006480:	4931      	ldr	r1, [pc, #196]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006482:	4313      	orrs	r3, r2
 8006484:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006486:	4b30      	ldr	r3, [pc, #192]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	492d      	ldr	r1, [pc, #180]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006494:	4313      	orrs	r3, r2
 8006496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006498:	4b2b      	ldr	r3, [pc, #172]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	4928      	ldr	r1, [pc, #160]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064aa:	4b27      	ldr	r3, [pc, #156]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a26      	ldr	r2, [pc, #152]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064b6:	4b24      	ldr	r3, [pc, #144]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ba:	4b24      	ldr	r3, [pc, #144]	@ (800654c <RCCEx_PLL3_Config+0x160>)
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	69d2      	ldr	r2, [r2, #28]
 80064c2:	00d2      	lsls	r2, r2, #3
 80064c4:	4920      	ldr	r1, [pc, #128]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064e8:	e00f      	b.n	800650a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d106      	bne.n	80064fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064f0:	4b15      	ldr	r3, [pc, #84]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 80064f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064fc:	e005      	b.n	800650a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064fe:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	4a11      	ldr	r2, [pc, #68]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a0e      	ldr	r2, [pc, #56]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fb fad9 	bl	8001acc <HAL_GetTick>
 800651a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800651c:	e008      	b.n	8006530 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800651e:	f7fb fad5 	bl	8001acc <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e006      	b.n	800653e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <RCCEx_PLL3_Config+0x15c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	58024400 	.word	0x58024400
 800654c:	ffff0007 	.word	0xffff0007

08006550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e049      	b.n	80065f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb f86c 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 f96e 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0202 	mvn.w	r2, #2
 8006632:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8f3 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 800664e:	e005      	b.n	800665c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8e5 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8f6 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0204 	mvn.w	r2, #4
 800667e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8cd 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 800669a:	e005      	b.n	80066a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8bf 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8d0 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01b      	beq.n	80066fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0208 	mvn.w	r2, #8
 80066ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8a7 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 80066e6:	e005      	b.n	80066f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f899 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8aa 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0210 	mvn.w	r2, #16
 8006716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2208      	movs	r2, #8
 800671c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f881 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 8006732:	e005      	b.n	8006740 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f873 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f884 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f06f 0201 	mvn.w	r2, #1
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f851 	bl	800680c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9aa 	bl	8006aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9a2 	bl	8006b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f83e 	bl	800685c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0220 	mvn.w	r2, #32
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f96a 	bl	8006ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a46      	ldr	r2, [pc, #280]	@ (800699c <TIM_Base_SetConfig+0x12c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a43      	ldr	r2, [pc, #268]	@ (80069a0 <TIM_Base_SetConfig+0x130>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a42      	ldr	r2, [pc, #264]	@ (80069a4 <TIM_Base_SetConfig+0x134>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a41      	ldr	r2, [pc, #260]	@ (80069a8 <TIM_Base_SetConfig+0x138>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a40      	ldr	r2, [pc, #256]	@ (80069ac <TIM_Base_SetConfig+0x13c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d108      	bne.n	80068c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a35      	ldr	r2, [pc, #212]	@ (800699c <TIM_Base_SetConfig+0x12c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01f      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d0:	d01b      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a32      	ldr	r2, [pc, #200]	@ (80069a0 <TIM_Base_SetConfig+0x130>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d017      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a31      	ldr	r2, [pc, #196]	@ (80069a4 <TIM_Base_SetConfig+0x134>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a30      	ldr	r2, [pc, #192]	@ (80069a8 <TIM_Base_SetConfig+0x138>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	@ (80069ac <TIM_Base_SetConfig+0x13c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2e      	ldr	r2, [pc, #184]	@ (80069b0 <TIM_Base_SetConfig+0x140>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2d      	ldr	r2, [pc, #180]	@ (80069b4 <TIM_Base_SetConfig+0x144>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_Base_SetConfig+0x9a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2c      	ldr	r2, [pc, #176]	@ (80069b8 <TIM_Base_SetConfig+0x148>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a16      	ldr	r2, [pc, #88]	@ (800699c <TIM_Base_SetConfig+0x12c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00f      	beq.n	8006968 <TIM_Base_SetConfig+0xf8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a18      	ldr	r2, [pc, #96]	@ (80069ac <TIM_Base_SetConfig+0x13c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00b      	beq.n	8006968 <TIM_Base_SetConfig+0xf8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a17      	ldr	r2, [pc, #92]	@ (80069b0 <TIM_Base_SetConfig+0x140>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <TIM_Base_SetConfig+0xf8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a16      	ldr	r2, [pc, #88]	@ (80069b4 <TIM_Base_SetConfig+0x144>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_Base_SetConfig+0xf8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a15      	ldr	r2, [pc, #84]	@ (80069b8 <TIM_Base_SetConfig+0x148>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d103      	bne.n	8006970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	611a      	str	r2, [r3, #16]
  }
}
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e06d      	b.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a30      	ldr	r2, [pc, #192]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d108      	bne.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a20      	ldr	r2, [pc, #128]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d022      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d01d      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d018      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1a      	ldr	r2, [pc, #104]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a16      	ldr	r2, [pc, #88]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d10c      	bne.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40001800 	.word	0x40001800
 8006ad4:	40014000 	.word	0x40014000

08006ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e042      	b.n	8006bac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fa fdff 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2224      	movs	r2, #36	@ 0x24
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fe1e 	bl	80077a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8b3 	bl	8006cd0 <UART_SetConfig>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e01b      	b.n	8006bac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fe9d 	bl	80078e4 <UART_CheckIdleState>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	@ 0x28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d17b      	bne.n	8006cc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_UART_Transmit+0x26>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e074      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2221      	movs	r2, #33	@ 0x21
 8006bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bee:	f7fa ff6d 	bl	8001acc <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0c:	d108      	bne.n	8006c20 <HAL_UART_Transmit+0x6c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e003      	b.n	8006c28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c28:	e030      	b.n	8006c8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2200      	movs	r2, #0
 8006c32:	2180      	movs	r1, #128	@ 0x80
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 feff 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e03d      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	3302      	adds	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e007      	b.n	8006c7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1c8      	bne.n	8006c2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2140      	movs	r1, #64	@ 0x40
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fec8 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b092      	sub	sp, #72	@ 0x48
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4bbe      	ldr	r3, [pc, #760]	@ (8006ff8 <UART_SetConfig+0x328>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4ab3      	ldr	r2, [pc, #716]	@ (8006ffc <UART_SetConfig+0x32c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	4baf      	ldr	r3, [pc, #700]	@ (8007000 <UART_SetConfig+0x330>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	f023 010f 	bic.w	r1, r3, #15
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4aa6      	ldr	r2, [pc, #664]	@ (8007004 <UART_SetConfig+0x334>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d177      	bne.n	8006e60 <UART_SetConfig+0x190>
 8006d70:	4ba5      	ldr	r3, [pc, #660]	@ (8007008 <UART_SetConfig+0x338>)
 8006d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d78:	2b28      	cmp	r3, #40	@ 0x28
 8006d7a:	d86d      	bhi.n	8006e58 <UART_SetConfig+0x188>
 8006d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <UART_SetConfig+0xb4>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e59 	.word	0x08006e59
 8006d8c:	08006e59 	.word	0x08006e59
 8006d90:	08006e59 	.word	0x08006e59
 8006d94:	08006e59 	.word	0x08006e59
 8006d98:	08006e59 	.word	0x08006e59
 8006d9c:	08006e59 	.word	0x08006e59
 8006da0:	08006e59 	.word	0x08006e59
 8006da4:	08006e31 	.word	0x08006e31
 8006da8:	08006e59 	.word	0x08006e59
 8006dac:	08006e59 	.word	0x08006e59
 8006db0:	08006e59 	.word	0x08006e59
 8006db4:	08006e59 	.word	0x08006e59
 8006db8:	08006e59 	.word	0x08006e59
 8006dbc:	08006e59 	.word	0x08006e59
 8006dc0:	08006e59 	.word	0x08006e59
 8006dc4:	08006e39 	.word	0x08006e39
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e59 	.word	0x08006e59
 8006dd0:	08006e59 	.word	0x08006e59
 8006dd4:	08006e59 	.word	0x08006e59
 8006dd8:	08006e59 	.word	0x08006e59
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e59 	.word	0x08006e59
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	08006e59 	.word	0x08006e59
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e59 	.word	0x08006e59
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2e:	e222      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e36:	e21e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	e21a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e46:	e216      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4e:	e212      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e50:	2340      	movs	r3, #64	@ 0x40
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e56:	e20e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5e:	e20a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a69      	ldr	r2, [pc, #420]	@ (800700c <UART_SetConfig+0x33c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d130      	bne.n	8006ecc <UART_SetConfig+0x1fc>
 8006e6a:	4b67      	ldr	r3, [pc, #412]	@ (8007008 <UART_SetConfig+0x338>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d826      	bhi.n	8006ec4 <UART_SetConfig+0x1f4>
 8006e76:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0x1ac>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08006e9d 	.word	0x08006e9d
 8006e84:	08006ea5 	.word	0x08006ea5
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9a:	e1ec      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e1e8      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e1e4      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e1e0      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e1dc      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ebc:	2340      	movs	r3, #64	@ 0x40
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e1d8      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e1d4      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8007010 <UART_SetConfig+0x340>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d130      	bne.n	8006f38 <UART_SetConfig+0x268>
 8006ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8007008 <UART_SetConfig+0x338>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d826      	bhi.n	8006f30 <UART_SetConfig+0x260>
 8006ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <UART_SetConfig+0x218>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e1b6      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e1b2      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e1ae      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e1aa      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f20:	2320      	movs	r3, #32
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e1a6      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f28:	2340      	movs	r3, #64	@ 0x40
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e1a2      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e19e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a35      	ldr	r2, [pc, #212]	@ (8007014 <UART_SetConfig+0x344>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d130      	bne.n	8006fa4 <UART_SetConfig+0x2d4>
 8006f42:	4b31      	ldr	r3, [pc, #196]	@ (8007008 <UART_SetConfig+0x338>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d826      	bhi.n	8006f9c <UART_SetConfig+0x2cc>
 8006f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <UART_SetConfig+0x284>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f75 	.word	0x08006f75
 8006f5c:	08006f7d 	.word	0x08006f7d
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e180      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e17c      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e178      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e174      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e170      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f94:	2340      	movs	r3, #64	@ 0x40
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e16c      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006f9c:	2380      	movs	r3, #128	@ 0x80
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e168      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <UART_SetConfig+0x348>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d142      	bne.n	8007034 <UART_SetConfig+0x364>
 8006fae:	4b16      	ldr	r3, [pc, #88]	@ (8007008 <UART_SetConfig+0x338>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	d838      	bhi.n	800702c <UART_SetConfig+0x35c>
 8006fba:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc0 <UART_SetConfig+0x2f0>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006fd9 	.word	0x08006fd9
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006fe9 	.word	0x08006fe9
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	08007025 	.word	0x08007025
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e14a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e146      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006fe8:	2308      	movs	r3, #8
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e142      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ff0:	2310      	movs	r3, #16
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e13e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8006ff8:	cfff69f3 	.word	0xcfff69f3
 8006ffc:	58000c00 	.word	0x58000c00
 8007000:	11fff4ff 	.word	0x11fff4ff
 8007004:	40011000 	.word	0x40011000
 8007008:	58024400 	.word	0x58024400
 800700c:	40004400 	.word	0x40004400
 8007010:	40004800 	.word	0x40004800
 8007014:	40004c00 	.word	0x40004c00
 8007018:	40005000 	.word	0x40005000
 800701c:	2320      	movs	r3, #32
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e128      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007024:	2340      	movs	r3, #64	@ 0x40
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e124      	b.n	8007276 <UART_SetConfig+0x5a6>
 800702c:	2380      	movs	r3, #128	@ 0x80
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e120      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4acb      	ldr	r2, [pc, #812]	@ (8007368 <UART_SetConfig+0x698>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d176      	bne.n	800712c <UART_SetConfig+0x45c>
 800703e:	4bcb      	ldr	r3, [pc, #812]	@ (800736c <UART_SetConfig+0x69c>)
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007046:	2b28      	cmp	r3, #40	@ 0x28
 8007048:	d86c      	bhi.n	8007124 <UART_SetConfig+0x454>
 800704a:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <UART_SetConfig+0x380>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	080070f5 	.word	0x080070f5
 8007054:	08007125 	.word	0x08007125
 8007058:	08007125 	.word	0x08007125
 800705c:	08007125 	.word	0x08007125
 8007060:	08007125 	.word	0x08007125
 8007064:	08007125 	.word	0x08007125
 8007068:	08007125 	.word	0x08007125
 800706c:	08007125 	.word	0x08007125
 8007070:	080070fd 	.word	0x080070fd
 8007074:	08007125 	.word	0x08007125
 8007078:	08007125 	.word	0x08007125
 800707c:	08007125 	.word	0x08007125
 8007080:	08007125 	.word	0x08007125
 8007084:	08007125 	.word	0x08007125
 8007088:	08007125 	.word	0x08007125
 800708c:	08007125 	.word	0x08007125
 8007090:	08007105 	.word	0x08007105
 8007094:	08007125 	.word	0x08007125
 8007098:	08007125 	.word	0x08007125
 800709c:	08007125 	.word	0x08007125
 80070a0:	08007125 	.word	0x08007125
 80070a4:	08007125 	.word	0x08007125
 80070a8:	08007125 	.word	0x08007125
 80070ac:	08007125 	.word	0x08007125
 80070b0:	0800710d 	.word	0x0800710d
 80070b4:	08007125 	.word	0x08007125
 80070b8:	08007125 	.word	0x08007125
 80070bc:	08007125 	.word	0x08007125
 80070c0:	08007125 	.word	0x08007125
 80070c4:	08007125 	.word	0x08007125
 80070c8:	08007125 	.word	0x08007125
 80070cc:	08007125 	.word	0x08007125
 80070d0:	08007115 	.word	0x08007115
 80070d4:	08007125 	.word	0x08007125
 80070d8:	08007125 	.word	0x08007125
 80070dc:	08007125 	.word	0x08007125
 80070e0:	08007125 	.word	0x08007125
 80070e4:	08007125 	.word	0x08007125
 80070e8:	08007125 	.word	0x08007125
 80070ec:	08007125 	.word	0x08007125
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fa:	e0bc      	b.n	8007276 <UART_SetConfig+0x5a6>
 80070fc:	2304      	movs	r3, #4
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e0b8      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007104:	2308      	movs	r3, #8
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e0b4      	b.n	8007276 <UART_SetConfig+0x5a6>
 800710c:	2310      	movs	r3, #16
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e0b0      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007114:	2320      	movs	r3, #32
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e0ac      	b.n	8007276 <UART_SetConfig+0x5a6>
 800711c:	2340      	movs	r3, #64	@ 0x40
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e0a8      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007124:	2380      	movs	r3, #128	@ 0x80
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e0a4      	b.n	8007276 <UART_SetConfig+0x5a6>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a8f      	ldr	r2, [pc, #572]	@ (8007370 <UART_SetConfig+0x6a0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d130      	bne.n	8007198 <UART_SetConfig+0x4c8>
 8007136:	4b8d      	ldr	r3, [pc, #564]	@ (800736c <UART_SetConfig+0x69c>)
 8007138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	2b05      	cmp	r3, #5
 8007140:	d826      	bhi.n	8007190 <UART_SetConfig+0x4c0>
 8007142:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0x478>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	08007161 	.word	0x08007161
 800714c:	08007169 	.word	0x08007169
 8007150:	08007171 	.word	0x08007171
 8007154:	08007179 	.word	0x08007179
 8007158:	08007181 	.word	0x08007181
 800715c:	08007189 	.word	0x08007189
 8007160:	2300      	movs	r3, #0
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007166:	e086      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716e:	e082      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e07e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e07a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007180:	2320      	movs	r3, #32
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e076      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007188:	2340      	movs	r3, #64	@ 0x40
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e072      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007190:	2380      	movs	r3, #128	@ 0x80
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e06e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a75      	ldr	r2, [pc, #468]	@ (8007374 <UART_SetConfig+0x6a4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d130      	bne.n	8007204 <UART_SetConfig+0x534>
 80071a2:	4b72      	ldr	r3, [pc, #456]	@ (800736c <UART_SetConfig+0x69c>)
 80071a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d826      	bhi.n	80071fc <UART_SetConfig+0x52c>
 80071ae:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <UART_SetConfig+0x4e4>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d2:	e050      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e04c      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e048      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e044      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071ec:	2320      	movs	r3, #32
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e040      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071f4:	2340      	movs	r3, #64	@ 0x40
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e03c      	b.n	8007276 <UART_SetConfig+0x5a6>
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e038      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a5b      	ldr	r2, [pc, #364]	@ (8007378 <UART_SetConfig+0x6a8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d130      	bne.n	8007270 <UART_SetConfig+0x5a0>
 800720e:	4b57      	ldr	r3, [pc, #348]	@ (800736c <UART_SetConfig+0x69c>)
 8007210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b05      	cmp	r3, #5
 8007218:	d826      	bhi.n	8007268 <UART_SetConfig+0x598>
 800721a:	a201      	add	r2, pc, #4	@ (adr r2, 8007220 <UART_SetConfig+0x550>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007239 	.word	0x08007239
 8007224:	08007241 	.word	0x08007241
 8007228:	08007249 	.word	0x08007249
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	2302      	movs	r3, #2
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e01a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007240:	2304      	movs	r3, #4
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e016      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007248:	2308      	movs	r3, #8
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e012      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007250:	2310      	movs	r3, #16
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e00e      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007258:	2320      	movs	r3, #32
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e00a      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007260:	2340      	movs	r3, #64	@ 0x40
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e006      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007268:	2380      	movs	r3, #128	@ 0x80
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e002      	b.n	8007276 <UART_SetConfig+0x5a6>
 8007270:	2380      	movs	r3, #128	@ 0x80
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3f      	ldr	r2, [pc, #252]	@ (8007378 <UART_SetConfig+0x6a8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	f040 80f8 	bne.w	8007472 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007282:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007286:	2b20      	cmp	r3, #32
 8007288:	dc46      	bgt.n	8007318 <UART_SetConfig+0x648>
 800728a:	2b02      	cmp	r3, #2
 800728c:	f2c0 8082 	blt.w	8007394 <UART_SetConfig+0x6c4>
 8007290:	3b02      	subs	r3, #2
 8007292:	2b1e      	cmp	r3, #30
 8007294:	d87e      	bhi.n	8007394 <UART_SetConfig+0x6c4>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x5cc>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	0800731f 	.word	0x0800731f
 80072a0:	08007395 	.word	0x08007395
 80072a4:	08007327 	.word	0x08007327
 80072a8:	08007395 	.word	0x08007395
 80072ac:	08007395 	.word	0x08007395
 80072b0:	08007395 	.word	0x08007395
 80072b4:	08007337 	.word	0x08007337
 80072b8:	08007395 	.word	0x08007395
 80072bc:	08007395 	.word	0x08007395
 80072c0:	08007395 	.word	0x08007395
 80072c4:	08007395 	.word	0x08007395
 80072c8:	08007395 	.word	0x08007395
 80072cc:	08007395 	.word	0x08007395
 80072d0:	08007395 	.word	0x08007395
 80072d4:	08007347 	.word	0x08007347
 80072d8:	08007395 	.word	0x08007395
 80072dc:	08007395 	.word	0x08007395
 80072e0:	08007395 	.word	0x08007395
 80072e4:	08007395 	.word	0x08007395
 80072e8:	08007395 	.word	0x08007395
 80072ec:	08007395 	.word	0x08007395
 80072f0:	08007395 	.word	0x08007395
 80072f4:	08007395 	.word	0x08007395
 80072f8:	08007395 	.word	0x08007395
 80072fc:	08007395 	.word	0x08007395
 8007300:	08007395 	.word	0x08007395
 8007304:	08007395 	.word	0x08007395
 8007308:	08007395 	.word	0x08007395
 800730c:	08007395 	.word	0x08007395
 8007310:	08007395 	.word	0x08007395
 8007314:	08007387 	.word	0x08007387
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d037      	beq.n	800738c <UART_SetConfig+0x6bc>
 800731c:	e03a      	b.n	8007394 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800731e:	f7fe fcf5 	bl	8005d0c <HAL_RCCEx_GetD3PCLK1Freq>
 8007322:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007324:	e03c      	b.n	80073a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fd04 	bl	8005d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007334:	e034      	b.n	80073a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007336:	f107 0318 	add.w	r3, r7, #24
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fe50 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007344:	e02c      	b.n	80073a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <UART_SetConfig+0x69c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007352:	4b06      	ldr	r3, [pc, #24]	@ (800736c <UART_SetConfig+0x69c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	4a07      	ldr	r2, [pc, #28]	@ (800737c <UART_SetConfig+0x6ac>)
 800735e:	fa22 f303 	lsr.w	r3, r2, r3
 8007362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007364:	e01c      	b.n	80073a0 <UART_SetConfig+0x6d0>
 8007366:	bf00      	nop
 8007368:	40011400 	.word	0x40011400
 800736c:	58024400 	.word	0x58024400
 8007370:	40007800 	.word	0x40007800
 8007374:	40007c00 	.word	0x40007c00
 8007378:	58000c00 	.word	0x58000c00
 800737c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007380:	4b9d      	ldr	r3, [pc, #628]	@ (80075f8 <UART_SetConfig+0x928>)
 8007382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007384:	e00c      	b.n	80073a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007386:	4b9d      	ldr	r3, [pc, #628]	@ (80075fc <UART_SetConfig+0x92c>)
 8007388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800738a:	e009      	b.n	80073a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007392:	e005      	b.n	80073a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800739e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 81de 	beq.w	8007764 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	4a94      	ldr	r2, [pc, #592]	@ (8007600 <UART_SetConfig+0x930>)
 80073ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	4413      	add	r3, r2
 80073c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d305      	bcc.n	80073d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d903      	bls.n	80073e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073de:	e1c1      	b.n	8007764 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e2:	2200      	movs	r2, #0
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	60fa      	str	r2, [r7, #12]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	4a84      	ldr	r2, [pc, #528]	@ (8007600 <UART_SetConfig+0x930>)
 80073ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2200      	movs	r2, #0
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007402:	f7f9 f981 	bl	8000708 <__aeabi_uldivmod>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4610      	mov	r0, r2
 800740c:	4619      	mov	r1, r3
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	020b      	lsls	r3, r1, #8
 8007418:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800741c:	0202      	lsls	r2, r0, #8
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	6849      	ldr	r1, [r1, #4]
 8007422:	0849      	lsrs	r1, r1, #1
 8007424:	2000      	movs	r0, #0
 8007426:	460c      	mov	r4, r1
 8007428:	4605      	mov	r5, r0
 800742a:	eb12 0804 	adds.w	r8, r2, r4
 800742e:	eb43 0905 	adc.w	r9, r3, r5
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	469a      	mov	sl, r3
 800743a:	4693      	mov	fp, r2
 800743c:	4652      	mov	r2, sl
 800743e:	465b      	mov	r3, fp
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	f7f9 f960 	bl	8000708 <__aeabi_uldivmod>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4613      	mov	r3, r2
 800744e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007456:	d308      	bcc.n	800746a <UART_SetConfig+0x79a>
 8007458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745e:	d204      	bcs.n	800746a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	e17c      	b.n	8007764 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007470:	e178      	b.n	8007764 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800747a:	f040 80c5 	bne.w	8007608 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800747e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007482:	2b20      	cmp	r3, #32
 8007484:	dc48      	bgt.n	8007518 <UART_SetConfig+0x848>
 8007486:	2b00      	cmp	r3, #0
 8007488:	db7b      	blt.n	8007582 <UART_SetConfig+0x8b2>
 800748a:	2b20      	cmp	r3, #32
 800748c:	d879      	bhi.n	8007582 <UART_SetConfig+0x8b2>
 800748e:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <UART_SetConfig+0x7c4>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	0800751f 	.word	0x0800751f
 8007498:	08007527 	.word	0x08007527
 800749c:	08007583 	.word	0x08007583
 80074a0:	08007583 	.word	0x08007583
 80074a4:	0800752f 	.word	0x0800752f
 80074a8:	08007583 	.word	0x08007583
 80074ac:	08007583 	.word	0x08007583
 80074b0:	08007583 	.word	0x08007583
 80074b4:	0800753f 	.word	0x0800753f
 80074b8:	08007583 	.word	0x08007583
 80074bc:	08007583 	.word	0x08007583
 80074c0:	08007583 	.word	0x08007583
 80074c4:	08007583 	.word	0x08007583
 80074c8:	08007583 	.word	0x08007583
 80074cc:	08007583 	.word	0x08007583
 80074d0:	08007583 	.word	0x08007583
 80074d4:	0800754f 	.word	0x0800754f
 80074d8:	08007583 	.word	0x08007583
 80074dc:	08007583 	.word	0x08007583
 80074e0:	08007583 	.word	0x08007583
 80074e4:	08007583 	.word	0x08007583
 80074e8:	08007583 	.word	0x08007583
 80074ec:	08007583 	.word	0x08007583
 80074f0:	08007583 	.word	0x08007583
 80074f4:	08007583 	.word	0x08007583
 80074f8:	08007583 	.word	0x08007583
 80074fc:	08007583 	.word	0x08007583
 8007500:	08007583 	.word	0x08007583
 8007504:	08007583 	.word	0x08007583
 8007508:	08007583 	.word	0x08007583
 800750c:	08007583 	.word	0x08007583
 8007510:	08007583 	.word	0x08007583
 8007514:	08007575 	.word	0x08007575
 8007518:	2b40      	cmp	r3, #64	@ 0x40
 800751a:	d02e      	beq.n	800757a <UART_SetConfig+0x8aa>
 800751c:	e031      	b.n	8007582 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800751e:	f7fd f9bf 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8007522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007524:	e033      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007526:	f7fd f9d1 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 800752a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800752c:	e02f      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fc00 	bl	8005d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753c:	e027      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753e:	f107 0318 	add.w	r3, r7, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fd4c 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754c:	e01f      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800754e:	4b2d      	ldr	r3, [pc, #180]	@ (8007604 <UART_SetConfig+0x934>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800755a:	4b2a      	ldr	r3, [pc, #168]	@ (8007604 <UART_SetConfig+0x934>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	08db      	lsrs	r3, r3, #3
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	4a24      	ldr	r2, [pc, #144]	@ (80075f8 <UART_SetConfig+0x928>)
 8007566:	fa22 f303 	lsr.w	r3, r2, r3
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800756c:	e00f      	b.n	800758e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800756e:	4b22      	ldr	r3, [pc, #136]	@ (80075f8 <UART_SetConfig+0x928>)
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007572:	e00c      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007574:	4b21      	ldr	r3, [pc, #132]	@ (80075fc <UART_SetConfig+0x92c>)
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007578:	e009      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	e005      	b.n	800758e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800758c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800758e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80e7 	beq.w	8007764 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	4a19      	ldr	r2, [pc, #100]	@ (8007600 <UART_SetConfig+0x930>)
 800759c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a0:	461a      	mov	r2, r3
 80075a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075a8:	005a      	lsls	r2, r3, #1
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	441a      	add	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	d916      	bls.n	80075f0 <UART_SetConfig+0x920>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075c8:	d212      	bcs.n	80075f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f023 030f 	bic.w	r3, r3, #15
 80075d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d6:	085b      	lsrs	r3, r3, #1
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	b29a      	uxth	r2, r3
 80075e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80075e2:	4313      	orrs	r3, r2
 80075e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	e0b9      	b.n	8007764 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80075f6:	e0b5      	b.n	8007764 <UART_SetConfig+0xa94>
 80075f8:	03d09000 	.word	0x03d09000
 80075fc:	003d0900 	.word	0x003d0900
 8007600:	0800d3a0 	.word	0x0800d3a0
 8007604:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007608:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800760c:	2b20      	cmp	r3, #32
 800760e:	dc49      	bgt.n	80076a4 <UART_SetConfig+0x9d4>
 8007610:	2b00      	cmp	r3, #0
 8007612:	db7c      	blt.n	800770e <UART_SetConfig+0xa3e>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d87a      	bhi.n	800770e <UART_SetConfig+0xa3e>
 8007618:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <UART_SetConfig+0x950>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	080076ab 	.word	0x080076ab
 8007624:	080076b3 	.word	0x080076b3
 8007628:	0800770f 	.word	0x0800770f
 800762c:	0800770f 	.word	0x0800770f
 8007630:	080076bb 	.word	0x080076bb
 8007634:	0800770f 	.word	0x0800770f
 8007638:	0800770f 	.word	0x0800770f
 800763c:	0800770f 	.word	0x0800770f
 8007640:	080076cb 	.word	0x080076cb
 8007644:	0800770f 	.word	0x0800770f
 8007648:	0800770f 	.word	0x0800770f
 800764c:	0800770f 	.word	0x0800770f
 8007650:	0800770f 	.word	0x0800770f
 8007654:	0800770f 	.word	0x0800770f
 8007658:	0800770f 	.word	0x0800770f
 800765c:	0800770f 	.word	0x0800770f
 8007660:	080076db 	.word	0x080076db
 8007664:	0800770f 	.word	0x0800770f
 8007668:	0800770f 	.word	0x0800770f
 800766c:	0800770f 	.word	0x0800770f
 8007670:	0800770f 	.word	0x0800770f
 8007674:	0800770f 	.word	0x0800770f
 8007678:	0800770f 	.word	0x0800770f
 800767c:	0800770f 	.word	0x0800770f
 8007680:	0800770f 	.word	0x0800770f
 8007684:	0800770f 	.word	0x0800770f
 8007688:	0800770f 	.word	0x0800770f
 800768c:	0800770f 	.word	0x0800770f
 8007690:	0800770f 	.word	0x0800770f
 8007694:	0800770f 	.word	0x0800770f
 8007698:	0800770f 	.word	0x0800770f
 800769c:	0800770f 	.word	0x0800770f
 80076a0:	08007701 	.word	0x08007701
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	d02e      	beq.n	8007706 <UART_SetConfig+0xa36>
 80076a8:	e031      	b.n	800770e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076aa:	f7fd f8f9 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80076ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076b0:	e033      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076b2:	f7fd f90b 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 80076b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076b8:	e02f      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fb3a 	bl	8005d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c8:	e027      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fc86 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e01f      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076da:	4b2d      	ldr	r3, [pc, #180]	@ (8007790 <UART_SetConfig+0xac0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007790 <UART_SetConfig+0xac0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	4a28      	ldr	r2, [pc, #160]	@ (8007794 <UART_SetConfig+0xac4>)
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076f8:	e00f      	b.n	800771a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80076fa:	4b26      	ldr	r3, [pc, #152]	@ (8007794 <UART_SetConfig+0xac4>)
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fe:	e00c      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007700:	4b25      	ldr	r3, [pc, #148]	@ (8007798 <UART_SetConfig+0xac8>)
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007704:	e009      	b.n	800771a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770c:	e005      	b.n	800771a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007718:	bf00      	nop
    }

    if (pclk != 0U)
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d021      	beq.n	8007764 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	4a1d      	ldr	r2, [pc, #116]	@ (800779c <UART_SetConfig+0xacc>)
 8007726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800772a:	461a      	mov	r2, r3
 800772c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	441a      	add	r2, r3
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007742:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	2b0f      	cmp	r3, #15
 8007748:	d909      	bls.n	800775e <UART_SetConfig+0xa8e>
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007750:	d205      	bcs.n	800775e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	b29a      	uxth	r2, r3
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	e002      	b.n	8007764 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2201      	movs	r2, #1
 8007768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2201      	movs	r2, #1
 8007770:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2200      	movs	r2, #0
 8007778:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2200      	movs	r2, #0
 800777e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007780:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007784:	4618      	mov	r0, r3
 8007786:	3748      	adds	r7, #72	@ 0x48
 8007788:	46bd      	mov	sp, r7
 800778a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800778e:	bf00      	nop
 8007790:	58024400 	.word	0x58024400
 8007794:	03d09000 	.word	0x03d09000
 8007798:	003d0900 	.word	0x003d0900
 800779c:	0800d3a0 	.word	0x0800d3a0

080077a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01a      	beq.n	80078b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800789e:	d10a      	bne.n	80078b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	605a      	str	r2, [r3, #4]
  }
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b098      	sub	sp, #96	@ 0x60
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078f4:	f7fa f8ea 	bl	8001acc <HAL_GetTick>
 80078f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b08      	cmp	r3, #8
 8007906:	d12f      	bne.n	8007968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007910:	2200      	movs	r2, #0
 8007912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f88e 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d022      	beq.n	8007968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007936:	653b      	str	r3, [r7, #80]	@ 0x50
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007940:	647b      	str	r3, [r7, #68]	@ 0x44
 8007942:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800794e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e063      	b.n	8007a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b04      	cmp	r3, #4
 8007974:	d149      	bne.n	8007a0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800797e:	2200      	movs	r2, #0
 8007980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f857 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d03c      	beq.n	8007a0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	623b      	str	r3, [r7, #32]
   return(result);
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079e2:	61fa      	str	r2, [r7, #28]
 80079e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	617b      	str	r3, [r7, #20]
   return(result);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e5      	bne.n	80079c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e012      	b.n	8007a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3758      	adds	r7, #88	@ 0x58
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a48:	e04f      	b.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d04b      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a52:	f7fa f83b 	bl	8001acc <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e04e      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d037      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b80      	cmp	r3, #128	@ 0x80
 8007a7e:	d034      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d031      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d110      	bne.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f839 	bl	8007b14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e029      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ac4:	d111      	bne.n	8007aea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f81f 	bl	8007b14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e00f      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4013      	ands	r3, r2
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d0a0      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b095      	sub	sp, #84	@ 0x54
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e6      	bne.n	8007b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	4b1e      	ldr	r3, [pc, #120]	@ (8007bdc <UART_EndRxTransfer+0xc8>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d118      	bne.n	8007bbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f023 0310 	bic.w	r3, r3, #16
 8007b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba8:	61bb      	str	r3, [r7, #24]
 8007baa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6979      	ldr	r1, [r7, #20]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bd0:	bf00      	nop
 8007bd2:	3754      	adds	r7, #84	@ 0x54
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	effffffe 	.word	0xeffffffe

08007be0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e027      	b.n	8007c46 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2224      	movs	r2, #36	@ 0x24
 8007c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e02d      	b.n	8007cc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2224      	movs	r2, #36	@ 0x24
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f850 	bl	8007d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e02d      	b.n	8007d42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2224      	movs	r2, #36	@ 0x24
 8007cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f812 	bl	8007d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d108      	bne.n	8007d6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d6c:	e031      	b.n	8007dd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d6e:	2310      	movs	r3, #16
 8007d70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d72:	2310      	movs	r3, #16
 8007d74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	0e5b      	lsrs	r3, r3, #25
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0f5b      	lsrs	r3, r3, #29
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	7b3a      	ldrb	r2, [r7, #12]
 8007d9a:	4911      	ldr	r1, [pc, #68]	@ (8007de0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d9c:	5c8a      	ldrb	r2, [r1, r2]
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007da2:	7b3a      	ldrb	r2, [r7, #12]
 8007da4:	490f      	ldr	r1, [pc, #60]	@ (8007de4 <UARTEx_SetNbDataToProcess+0x98>)
 8007da6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	7b7a      	ldrb	r2, [r7, #13]
 8007db8:	4909      	ldr	r1, [pc, #36]	@ (8007de0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dba:	5c8a      	ldrb	r2, [r1, r2]
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dc0:	7b7a      	ldrb	r2, [r7, #13]
 8007dc2:	4908      	ldr	r1, [pc, #32]	@ (8007de4 <UARTEx_SetNbDataToProcess+0x98>)
 8007dc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	0800d3b8 	.word	0x0800d3b8
 8007de4:	0800d3c0 	.word	0x0800d3c0

08007de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de8:	b084      	sub	sp, #16
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	f107 001c 	add.w	r0, r7, #28
 8007df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d121      	bne.n	8007e46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec4 <USB_CoreInit+0xdc>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 faaa 	bl	8008394 <USB_CoreReset>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
 8007e44:	e01b      	b.n	8007e7e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa9e 	bl	8008394 <USB_CoreReset>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e70:	e005      	b.n	8007e7e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e7e:	7fbb      	ldrb	r3, [r7, #30]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d116      	bne.n	8007eb2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <USB_CoreInit+0xe0>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f043 0206 	orr.w	r2, r3, #6
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ebe:	b004      	add	sp, #16
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	ffbdffbf 	.word	0xffbdffbf
 8007ec8:	03ee0000 	.word	0x03ee0000

08007ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f023 0201 	bic.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d115      	bne.n	8007f3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f1c:	200a      	movs	r0, #10
 8007f1e:	f7f9 fde1 	bl	8001ae4 <HAL_Delay>
      ms += 10U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	330a      	adds	r3, #10
 8007f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa25 	bl	8008378 <USB_GetMode>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d01e      	beq.n	8007f72 <USB_SetCurrentMode+0x84>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f38:	d9f0      	bls.n	8007f1c <USB_SetCurrentMode+0x2e>
 8007f3a:	e01a      	b.n	8007f72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d115      	bne.n	8007f6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f4e:	200a      	movs	r0, #10
 8007f50:	f7f9 fdc8 	bl	8001ae4 <HAL_Delay>
      ms += 10U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	330a      	adds	r3, #10
 8007f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa0c 	bl	8008378 <USB_GetMode>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <USB_SetCurrentMode+0x84>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f6a:	d9f0      	bls.n	8007f4e <USB_SetCurrentMode+0x60>
 8007f6c:	e001      	b.n	8007f72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e005      	b.n	8007f7e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f76:	d101      	bne.n	8007f7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f88:	b084      	sub	sp, #16
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b086      	sub	sp, #24
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	e009      	b.n	8007fbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	3340      	adds	r3, #64	@ 0x40
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b0e      	cmp	r3, #14
 8007fc0:	d9f2      	bls.n	8007fa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d11c      	bne.n	8008004 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e005      	b.n	8008010 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008008:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008016:	461a      	mov	r2, r3
 8008018:	2300      	movs	r3, #0
 800801a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800801c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008020:	2b01      	cmp	r3, #1
 8008022:	d10d      	bne.n	8008040 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f968 	bl	8008304 <USB_SetDevSpeed>
 8008034:	e008      	b.n	8008048 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008036:	2101      	movs	r1, #1
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f963 	bl	8008304 <USB_SetDevSpeed>
 800803e:	e003      	b.n	8008048 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008040:	2103      	movs	r1, #3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f95e 	bl	8008304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008048:	2110      	movs	r1, #16
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f8fa 	bl	8008244 <USB_FlushTxFifo>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f924 	bl	80082a8 <USB_FlushRxFifo>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008070:	461a      	mov	r2, r3
 8008072:	2300      	movs	r3, #0
 8008074:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008088:	461a      	mov	r2, r3
 800808a:	2300      	movs	r3, #0
 800808c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	e043      	b.n	800811c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080aa:	d118      	bne.n	80080de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080be:	461a      	mov	r2, r3
 80080c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	e013      	b.n	80080f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d4:	461a      	mov	r2, r3
 80080d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	e008      	b.n	80080f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ea:	461a      	mov	r2, r3
 80080ec:	2300      	movs	r3, #0
 80080ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	461a      	mov	r2, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810e:	461a      	mov	r2, r3
 8008110:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3301      	adds	r3, #1
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008120:	461a      	mov	r2, r3
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4293      	cmp	r3, r2
 8008126:	d3b5      	bcc.n	8008094 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008128:	2300      	movs	r3, #0
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	e043      	b.n	80081b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008144:	d118      	bne.n	8008178 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e013      	b.n	800818a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	461a      	mov	r2, r3
 8008170:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e008      	b.n	800818a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008184:	461a      	mov	r2, r3
 8008186:	2300      	movs	r3, #0
 8008188:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008196:	461a      	mov	r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	461a      	mov	r2, r3
 80081aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3301      	adds	r3, #1
 80081b4:	613b      	str	r3, [r7, #16]
 80081b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081ba:	461a      	mov	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4293      	cmp	r3, r2
 80081c0:	d3b5      	bcc.n	800812e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80081e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f043 0210 	orr.w	r2, r3, #16
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	4b0f      	ldr	r3, [pc, #60]	@ (800823c <USB_DevInit+0x2b4>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008204:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f043 0208 	orr.w	r2, r3, #8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008218:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800821c:	2b01      	cmp	r3, #1
 800821e:	d105      	bne.n	800822c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <USB_DevInit+0x2b8>)
 8008226:	4313      	orrs	r3, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008238:	b004      	add	sp, #16
 800823a:	4770      	bx	lr
 800823c:	803c3800 	.word	0x803c3800
 8008240:	40000004 	.word	0x40000004

08008244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800825e:	d901      	bls.n	8008264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e01b      	b.n	800829c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	daf2      	bge.n	8008252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	019b      	lsls	r3, r3, #6
 8008274:	f043 0220 	orr.w	r2, r3, #32
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008288:	d901      	bls.n	800828e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e006      	b.n	800829c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b20      	cmp	r3, #32
 8008298:	d0f0      	beq.n	800827c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3301      	adds	r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082c0:	d901      	bls.n	80082c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e018      	b.n	80082f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	daf2      	bge.n	80082b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2210      	movs	r2, #16
 80082d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e4:	d901      	bls.n	80082ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e006      	b.n	80082f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d0f0      	beq.n	80082d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008324:	4313      	orrs	r3, r2
 8008326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008350:	f023 0303 	bic.w	r3, r3, #3
 8008354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008364:	f043 0302 	orr.w	r3, r3, #2
 8008368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f003 0301 	and.w	r3, r3, #1
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3301      	adds	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083ac:	d901      	bls.n	80083b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e01b      	b.n	80083ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	daf2      	bge.n	80083a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f043 0201 	orr.w	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083d6:	d901      	bls.n	80083dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e006      	b.n	80083ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d0f0      	beq.n	80083ca <USB_CoreReset+0x36>

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <lps_read_reg>:
#include "lps22hh.h"

// Definicje zmiennych globalnych

uint8_t lps_read_reg(uint8_t reg)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	b29a      	uxth	r2, r3
 800840a:	f04f 33ff 	mov.w	r3, #4294967295
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	2301      	movs	r3, #1
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	f107 030e 	add.w	r3, r7, #14
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	2301      	movs	r3, #1
 800841c:	21ba      	movs	r1, #186	@ 0xba
 800841e:	4805      	ldr	r0, [pc, #20]	@ (8008434 <lps_read_reg+0x3c>)
 8008420:	f7fa fc76 	bl	8002d10 <HAL_I2C_Mem_Read>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
	return value;
 8008428:	7bbb      	ldrb	r3, [r7, #14]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	240003a4 	.word	0x240003a4

08008438 <lps_write_reg>:

void lps_write_reg(uint8_t reg, uint8_t value)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af04      	add	r7, sp, #16
 800843e:	4603      	mov	r3, r0
 8008440:	460a      	mov	r2, r1
 8008442:	71fb      	strb	r3, [r7, #7]
 8008444:	4613      	mov	r3, r2
 8008446:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	b29a      	uxth	r2, r3
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	2301      	movs	r3, #1
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	1dbb      	adds	r3, r7, #6
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	2301      	movs	r3, #1
 800845c:	21ba      	movs	r1, #186	@ 0xba
 800845e:	4804      	ldr	r0, [pc, #16]	@ (8008470 <lps_write_reg+0x38>)
 8008460:	f7fa fb42 	bl	8002ae8 <HAL_I2C_Mem_Write>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	240003a4 	.word	0x240003a4

08008474 <lps_read_val>:
struct values_lps lps_read_val(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08c      	sub	sp, #48	@ 0x30
 8008478:	af04      	add	r7, sp, #16
	struct values_lps result_lps;

	int16_t temp = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	81fb      	strh	r3, [r7, #14]
	int32_t pressure = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]

    result_lps.temp = 0.0;
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	613b      	str	r3, [r7, #16]
    result_lps.pressure = 0.0;
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800848e:	2364      	movs	r3, #100	@ 0x64
 8008490:	9302      	str	r3, [sp, #8]
 8008492:	2302      	movs	r3, #2
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	f107 030e 	add.w	r3, r7, #14
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2301      	movs	r3, #1
 800849e:	22ab      	movs	r2, #171	@ 0xab
 80084a0:	21ba      	movs	r1, #186	@ 0xba
 80084a2:	4825      	ldr	r0, [pc, #148]	@ (8008538 <lps_read_val+0xc4>)
 80084a4:	f7fa fc34 	bl	8002d10 <HAL_I2C_Mem_Read>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <lps_read_val+0x3e>
        Error_Handler();
 80084ae:	f7f8 ff7b 	bl	80013a8 <Error_Handler>
    if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80084b2:	2364      	movs	r3, #100	@ 0x64
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	2303      	movs	r3, #3
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2301      	movs	r3, #1
 80084c2:	22a8      	movs	r2, #168	@ 0xa8
 80084c4:	21ba      	movs	r1, #186	@ 0xba
 80084c6:	481c      	ldr	r0, [pc, #112]	@ (8008538 <lps_read_val+0xc4>)
 80084c8:	f7fa fc22 	bl	8002d10 <HAL_I2C_Mem_Read>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <lps_read_val+0x62>
         Error_Handler();
 80084d2:	f7f8 ff69 	bl	80013a8 <Error_Handler>

    result_lps.temp =  (float)(42.5f + temp / 480.0f);
 80084d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084e2:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800853c <lps_read_val+0xc8>
 80084e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084ea:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008540 <lps_read_val+0xcc>
 80084ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084f2:	edc7 7a04 	vstr	s15, [r7, #16]
    result_lps.pressure =  (float)(pressure / 4096.0f);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008500:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8008544 <lps_read_val+0xd0>
 8008504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008508:	edc7 7a05 	vstr	s15, [r7, #20]


    return result_lps;
 800850c:	f107 0318 	add.w	r3, r7, #24
 8008510:	f107 0210 	add.w	r2, r7, #16
 8008514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008518:	e883 0003 	stmia.w	r3, {r0, r1}
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	ee07 2a10 	vmov	s14, r2
 8008524:	ee07 3a90 	vmov	s15, r3
}
 8008528:	eeb0 0a47 	vmov.f32	s0, s14
 800852c:	eef0 0a67 	vmov.f32	s1, s15
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	240003a4 	.word	0x240003a4
 800853c:	43f00000 	.word	0x43f00000
 8008540:	422a0000 	.word	0x422a0000
 8008544:	45800000 	.word	0x45800000

08008548 <LPS22HH_Init>:

void LPS22HH_Init(void) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
	  printf("Searching...\r\n");
 800854e:	480e      	ldr	r0, [pc, #56]	@ (8008588 <LPS22HH_Init+0x40>)
 8008550:	f001 f844 	bl	80095dc <puts>
	   uint8_t who_am_i = lps_read_reg(LPS25HB_WHO_AM_I);
 8008554:	200f      	movs	r0, #15
 8008556:	f7ff ff4f 	bl	80083f8 <lps_read_reg>
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
	   if (who_am_i == LPS_PART_ID) {
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2bbd      	cmp	r3, #189	@ 0xbd
 8008562:	d107      	bne.n	8008574 <LPS22HH_Init+0x2c>
	    printf("Found: LPS\r\n");
 8008564:	4809      	ldr	r0, [pc, #36]	@ (800858c <LPS22HH_Init+0x44>)
 8008566:	f001 f839 	bl	80095dc <puts>

	    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 800856a:	21c0      	movs	r1, #192	@ 0xc0
 800856c:	2020      	movs	r0, #32
 800856e:	f7ff ff63 	bl	8008438 <lps_write_reg>
			//lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);

	   } else {
	    printf("Error: (0x%02X)\r\n", who_am_i);
	   }
}
 8008572:	e004      	b.n	800857e <LPS22HH_Init+0x36>
	    printf("Error: (0x%02X)\r\n", who_am_i);
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	4619      	mov	r1, r3
 8008578:	4805      	ldr	r0, [pc, #20]	@ (8008590 <LPS22HH_Init+0x48>)
 800857a:	f000 ffc7 	bl	800950c <iprintf>
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	0800d360 	.word	0x0800d360
 800858c:	0800d370 	.word	0x0800d370
 8008590:	0800d37c 	.word	0x0800d37c

08008594 <apply_moving_average>:
 * @param index Wskaźnik na aktualny indeks w tablicy.
 * @param size Rozmiar tablicy (FILTER_SIZE).
 * @param new_value Nowa wartość ciśnienia do dodania.
 * @return Średnia ruchoma z wartości w tablicy.
 */
float apply_moving_average(float *values, int *index, int size, float new_value) {
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	ed87 0a00 	vstr	s0, [r7]
    values[*index] = new_value;          // Dodanie nowej wartości do tablicy
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	601a      	str	r2, [r3, #0]
    *index = (*index + 1) % size;        // Przesunięcie indeksu z zawijaniem
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	fb01 f202 	mul.w	r2, r1, r2
 80085c4:	1a9a      	subs	r2, r3, r2
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	601a      	str	r2, [r3, #0]

    float sum = 0.0f;
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {     // Obliczenie sumy elementów w tablicy
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	e00e      	b.n	80085f4 <apply_moving_average+0x60>
        sum += values[i];
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80085e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ea:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < size; i++) {     // Obliczenie sumy elementów w tablicy
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	3301      	adds	r3, #1
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	dbec      	blt.n	80085d6 <apply_moving_average+0x42>
    }
    return sum / size;                   // Zwrot średniej
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008606:	ed97 7a05 	vldr	s14, [r7, #20]
 800860a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800860e:	eef0 7a66 	vmov.f32	s15, s13
}
 8008612:	eeb0 0a67 	vmov.f32	s0, s15
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <kalman_init>:

void kalman_init(KalmanFilter *kf, float initial_value, float process_variance, float measurement_variance) {
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	ed87 0a02 	vstr	s0, [r7, #8]
 800862c:	edc7 0a01 	vstr	s1, [r7, #4]
 8008630:	ed87 1a00 	vstr	s2, [r7]
    kf->x = initial_value;   // Ustaw początkowy stan
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;            // Niepewność początkowa
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008640:	605a      	str	r2, [r3, #4]
    kf->Q = process_variance; // Wariancja procesu
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	609a      	str	r2, [r3, #8]
    kf->R = measurement_variance; // Wariancja szumu pomiaru
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	60da      	str	r2, [r3, #12]
    kf->K = 0.0f;            // Wzmocnienie Kalmana początkowe
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	611a      	str	r2, [r3, #16]
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <kalman_update>:



float kalman_update(KalmanFilter *kf, float measurement) {
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	ed87 0a00 	vstr	s0, [r7]
    // Predykcja
    kf->P += kf->Q;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	ed93 7a01 	vldr	s14, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	edd3 7a02 	vldr	s15, [r3, #8]
 800867a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	edc3 7a01 	vstr	s15, [r3, #4]

    // Obliczanie wzmocnienia Kalmana
    kf->K = kf->P / (kf->P + kf->R);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	edd3 6a01 	vldr	s13, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	edd3 7a03 	vldr	s15, [r3, #12]
 8008696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800869a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	edc3 7a04 	vstr	s15, [r3, #16]

    // Aktualizacja stanu
    kf->x += kf->K * (measurement - kf->x);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	ed93 7a00 	vldr	s14, [r3]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	edd3 6a04 	vldr	s13, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	edd3 7a00 	vldr	s15, [r3]
 80086b6:	ed97 6a00 	vldr	s12, [r7]
 80086ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80086be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	edc3 7a00 	vstr	s15, [r3]

    // Aktualizacja niepewności
    kf->P *= (1.0f - kf->K);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80086d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	edc3 7a01 	vstr	s15, [r3, #4]

    return kf->x;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	ee07 3a90 	vmov	s15, r3
}
 80086f2:	eeb0 0a67 	vmov.f32	s0, s15
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <__cvt>:
 8008700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008702:	ed2d 8b02 	vpush	{d8}
 8008706:	eeb0 8b40 	vmov.f64	d8, d0
 800870a:	b085      	sub	sp, #20
 800870c:	4617      	mov	r7, r2
 800870e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008710:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008712:	ee18 2a90 	vmov	r2, s17
 8008716:	f025 0520 	bic.w	r5, r5, #32
 800871a:	2a00      	cmp	r2, #0
 800871c:	bfb6      	itet	lt
 800871e:	222d      	movlt	r2, #45	@ 0x2d
 8008720:	2200      	movge	r2, #0
 8008722:	eeb1 8b40 	vneglt.f64	d8, d0
 8008726:	2d46      	cmp	r5, #70	@ 0x46
 8008728:	460c      	mov	r4, r1
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	d004      	beq.n	8008738 <__cvt+0x38>
 800872e:	2d45      	cmp	r5, #69	@ 0x45
 8008730:	d100      	bne.n	8008734 <__cvt+0x34>
 8008732:	3401      	adds	r4, #1
 8008734:	2102      	movs	r1, #2
 8008736:	e000      	b.n	800873a <__cvt+0x3a>
 8008738:	2103      	movs	r1, #3
 800873a:	ab03      	add	r3, sp, #12
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	ab02      	add	r3, sp, #8
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4622      	mov	r2, r4
 8008744:	4633      	mov	r3, r6
 8008746:	eeb0 0b48 	vmov.f64	d0, d8
 800874a:	f001 f955 	bl	80099f8 <_dtoa_r>
 800874e:	2d47      	cmp	r5, #71	@ 0x47
 8008750:	d114      	bne.n	800877c <__cvt+0x7c>
 8008752:	07fb      	lsls	r3, r7, #31
 8008754:	d50a      	bpl.n	800876c <__cvt+0x6c>
 8008756:	1902      	adds	r2, r0, r4
 8008758:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008760:	bf08      	it	eq
 8008762:	9203      	streq	r2, [sp, #12]
 8008764:	2130      	movs	r1, #48	@ 0x30
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	4293      	cmp	r3, r2
 800876a:	d319      	bcc.n	80087a0 <__cvt+0xa0>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008770:	1a1b      	subs	r3, r3, r0
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	b005      	add	sp, #20
 8008776:	ecbd 8b02 	vpop	{d8}
 800877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877c:	2d46      	cmp	r5, #70	@ 0x46
 800877e:	eb00 0204 	add.w	r2, r0, r4
 8008782:	d1e9      	bne.n	8008758 <__cvt+0x58>
 8008784:	7803      	ldrb	r3, [r0, #0]
 8008786:	2b30      	cmp	r3, #48	@ 0x30
 8008788:	d107      	bne.n	800879a <__cvt+0x9a>
 800878a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008792:	bf1c      	itt	ne
 8008794:	f1c4 0401 	rsbne	r4, r4, #1
 8008798:	6034      	strne	r4, [r6, #0]
 800879a:	6833      	ldr	r3, [r6, #0]
 800879c:	441a      	add	r2, r3
 800879e:	e7db      	b.n	8008758 <__cvt+0x58>
 80087a0:	1c5c      	adds	r4, r3, #1
 80087a2:	9403      	str	r4, [sp, #12]
 80087a4:	7019      	strb	r1, [r3, #0]
 80087a6:	e7de      	b.n	8008766 <__cvt+0x66>

080087a8 <__exponent>:
 80087a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087aa:	2900      	cmp	r1, #0
 80087ac:	bfba      	itte	lt
 80087ae:	4249      	neglt	r1, r1
 80087b0:	232d      	movlt	r3, #45	@ 0x2d
 80087b2:	232b      	movge	r3, #43	@ 0x2b
 80087b4:	2909      	cmp	r1, #9
 80087b6:	7002      	strb	r2, [r0, #0]
 80087b8:	7043      	strb	r3, [r0, #1]
 80087ba:	dd29      	ble.n	8008810 <__exponent+0x68>
 80087bc:	f10d 0307 	add.w	r3, sp, #7
 80087c0:	461d      	mov	r5, r3
 80087c2:	270a      	movs	r7, #10
 80087c4:	461a      	mov	r2, r3
 80087c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80087ca:	fb07 1416 	mls	r4, r7, r6, r1
 80087ce:	3430      	adds	r4, #48	@ 0x30
 80087d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087d4:	460c      	mov	r4, r1
 80087d6:	2c63      	cmp	r4, #99	@ 0x63
 80087d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80087dc:	4631      	mov	r1, r6
 80087de:	dcf1      	bgt.n	80087c4 <__exponent+0x1c>
 80087e0:	3130      	adds	r1, #48	@ 0x30
 80087e2:	1e94      	subs	r4, r2, #2
 80087e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087e8:	1c41      	adds	r1, r0, #1
 80087ea:	4623      	mov	r3, r4
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	d30a      	bcc.n	8008806 <__exponent+0x5e>
 80087f0:	f10d 0309 	add.w	r3, sp, #9
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	42ac      	cmp	r4, r5
 80087f8:	bf88      	it	hi
 80087fa:	2300      	movhi	r3, #0
 80087fc:	3302      	adds	r3, #2
 80087fe:	4403      	add	r3, r0
 8008800:	1a18      	subs	r0, r3, r0
 8008802:	b003      	add	sp, #12
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	f813 6b01 	ldrb.w	r6, [r3], #1
 800880a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800880e:	e7ed      	b.n	80087ec <__exponent+0x44>
 8008810:	2330      	movs	r3, #48	@ 0x30
 8008812:	3130      	adds	r1, #48	@ 0x30
 8008814:	7083      	strb	r3, [r0, #2]
 8008816:	70c1      	strb	r1, [r0, #3]
 8008818:	1d03      	adds	r3, r0, #4
 800881a:	e7f1      	b.n	8008800 <__exponent+0x58>
 800881c:	0000      	movs	r0, r0
	...

08008820 <_printf_float>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	b08d      	sub	sp, #52	@ 0x34
 8008826:	460c      	mov	r4, r1
 8008828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800882c:	4616      	mov	r6, r2
 800882e:	461f      	mov	r7, r3
 8008830:	4605      	mov	r5, r0
 8008832:	f000 ffdb 	bl	80097ec <_localeconv_r>
 8008836:	f8d0 b000 	ldr.w	fp, [r0]
 800883a:	4658      	mov	r0, fp
 800883c:	f7f7 fda0 	bl	8000380 <strlen>
 8008840:	2300      	movs	r3, #0
 8008842:	930a      	str	r3, [sp, #40]	@ 0x28
 8008844:	f8d8 3000 	ldr.w	r3, [r8]
 8008848:	f894 9018 	ldrb.w	r9, [r4, #24]
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	9005      	str	r0, [sp, #20]
 8008850:	3307      	adds	r3, #7
 8008852:	f023 0307 	bic.w	r3, r3, #7
 8008856:	f103 0108 	add.w	r1, r3, #8
 800885a:	f8c8 1000 	str.w	r1, [r8]
 800885e:	ed93 0b00 	vldr	d0, [r3]
 8008862:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008ac0 <_printf_float+0x2a0>
 8008866:	eeb0 7bc0 	vabs.f64	d7, d0
 800886a:	eeb4 7b46 	vcmp.f64	d7, d6
 800886e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008872:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008876:	dd24      	ble.n	80088c2 <_printf_float+0xa2>
 8008878:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008880:	d502      	bpl.n	8008888 <_printf_float+0x68>
 8008882:	232d      	movs	r3, #45	@ 0x2d
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008888:	498f      	ldr	r1, [pc, #572]	@ (8008ac8 <_printf_float+0x2a8>)
 800888a:	4b90      	ldr	r3, [pc, #576]	@ (8008acc <_printf_float+0x2ac>)
 800888c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008890:	bf94      	ite	ls
 8008892:	4688      	movls	r8, r1
 8008894:	4698      	movhi	r8, r3
 8008896:	f022 0204 	bic.w	r2, r2, #4
 800889a:	2303      	movs	r3, #3
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	f04f 0a00 	mov.w	sl, #0
 80088a4:	9700      	str	r7, [sp, #0]
 80088a6:	4633      	mov	r3, r6
 80088a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088aa:	4621      	mov	r1, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	f000 f9d1 	bl	8008c54 <_printf_common>
 80088b2:	3001      	adds	r0, #1
 80088b4:	f040 8089 	bne.w	80089ca <_printf_float+0x1aa>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	b00d      	add	sp, #52	@ 0x34
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80088c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ca:	d709      	bvc.n	80088e0 <_printf_float+0xc0>
 80088cc:	ee10 3a90 	vmov	r3, s1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bfbc      	itt	lt
 80088d4:	232d      	movlt	r3, #45	@ 0x2d
 80088d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088da:	497d      	ldr	r1, [pc, #500]	@ (8008ad0 <_printf_float+0x2b0>)
 80088dc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ad4 <_printf_float+0x2b4>)
 80088de:	e7d5      	b.n	800888c <_printf_float+0x6c>
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80088e8:	d139      	bne.n	800895e <_printf_float+0x13e>
 80088ea:	2306      	movs	r3, #6
 80088ec:	6063      	str	r3, [r4, #4]
 80088ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088f2:	2300      	movs	r3, #0
 80088f4:	6022      	str	r2, [r4, #0]
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80088fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80088fe:	ab09      	add	r3, sp, #36	@ 0x24
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	6861      	ldr	r1, [r4, #4]
 8008904:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008908:	4628      	mov	r0, r5
 800890a:	f7ff fef9 	bl	8008700 <__cvt>
 800890e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008914:	4680      	mov	r8, r0
 8008916:	d129      	bne.n	800896c <_printf_float+0x14c>
 8008918:	1cc8      	adds	r0, r1, #3
 800891a:	db02      	blt.n	8008922 <_printf_float+0x102>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	4299      	cmp	r1, r3
 8008920:	dd41      	ble.n	80089a6 <_printf_float+0x186>
 8008922:	f1a9 0902 	sub.w	r9, r9, #2
 8008926:	fa5f f989 	uxtb.w	r9, r9
 800892a:	3901      	subs	r1, #1
 800892c:	464a      	mov	r2, r9
 800892e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008932:	9109      	str	r1, [sp, #36]	@ 0x24
 8008934:	f7ff ff38 	bl	80087a8 <__exponent>
 8008938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800893a:	1813      	adds	r3, r2, r0
 800893c:	2a01      	cmp	r2, #1
 800893e:	4682      	mov	sl, r0
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	dc02      	bgt.n	800894a <_printf_float+0x12a>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	07d2      	lsls	r2, r2, #31
 8008948:	d501      	bpl.n	800894e <_printf_float+0x12e>
 800894a:	3301      	adds	r3, #1
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0a6      	beq.n	80088a4 <_printf_float+0x84>
 8008956:	232d      	movs	r3, #45	@ 0x2d
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800895c:	e7a2      	b.n	80088a4 <_printf_float+0x84>
 800895e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008962:	d1c4      	bne.n	80088ee <_printf_float+0xce>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1c2      	bne.n	80088ee <_printf_float+0xce>
 8008968:	2301      	movs	r3, #1
 800896a:	e7bf      	b.n	80088ec <_printf_float+0xcc>
 800896c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008970:	d9db      	bls.n	800892a <_printf_float+0x10a>
 8008972:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008976:	d118      	bne.n	80089aa <_printf_float+0x18a>
 8008978:	2900      	cmp	r1, #0
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	dd0b      	ble.n	8008996 <_printf_float+0x176>
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	b913      	cbnz	r3, 8008988 <_printf_float+0x168>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	07d0      	lsls	r0, r2, #31
 8008986:	d502      	bpl.n	800898e <_printf_float+0x16e>
 8008988:	3301      	adds	r3, #1
 800898a:	440b      	add	r3, r1
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008990:	f04f 0a00 	mov.w	sl, #0
 8008994:	e7db      	b.n	800894e <_printf_float+0x12e>
 8008996:	b913      	cbnz	r3, 800899e <_printf_float+0x17e>
 8008998:	6822      	ldr	r2, [r4, #0]
 800899a:	07d2      	lsls	r2, r2, #31
 800899c:	d501      	bpl.n	80089a2 <_printf_float+0x182>
 800899e:	3302      	adds	r3, #2
 80089a0:	e7f4      	b.n	800898c <_printf_float+0x16c>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7f2      	b.n	800898c <_printf_float+0x16c>
 80089a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80089aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ac:	4299      	cmp	r1, r3
 80089ae:	db05      	blt.n	80089bc <_printf_float+0x19c>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	6121      	str	r1, [r4, #16]
 80089b4:	07d8      	lsls	r0, r3, #31
 80089b6:	d5ea      	bpl.n	800898e <_printf_float+0x16e>
 80089b8:	1c4b      	adds	r3, r1, #1
 80089ba:	e7e7      	b.n	800898c <_printf_float+0x16c>
 80089bc:	2900      	cmp	r1, #0
 80089be:	bfd4      	ite	le
 80089c0:	f1c1 0202 	rsble	r2, r1, #2
 80089c4:	2201      	movgt	r2, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	e7e0      	b.n	800898c <_printf_float+0x16c>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	055a      	lsls	r2, r3, #21
 80089ce:	d407      	bmi.n	80089e0 <_printf_float+0x1c0>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	4642      	mov	r2, r8
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d12a      	bne.n	8008a34 <_printf_float+0x214>
 80089de:	e76b      	b.n	80088b8 <_printf_float+0x98>
 80089e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80089e4:	f240 80e0 	bls.w	8008ba8 <_printf_float+0x388>
 80089e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80089ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	d133      	bne.n	8008a5e <_printf_float+0x23e>
 80089f6:	4a38      	ldr	r2, [pc, #224]	@ (8008ad8 <_printf_float+0x2b8>)
 80089f8:	2301      	movs	r3, #1
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f af59 	beq.w	80088b8 <_printf_float+0x98>
 8008a06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a0a:	4543      	cmp	r3, r8
 8008a0c:	db02      	blt.n	8008a14 <_printf_float+0x1f4>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	07d8      	lsls	r0, r3, #31
 8008a12:	d50f      	bpl.n	8008a34 <_printf_float+0x214>
 8008a14:	9b05      	ldr	r3, [sp, #20]
 8008a16:	465a      	mov	r2, fp
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af4a 	beq.w	80088b8 <_printf_float+0x98>
 8008a24:	f04f 0900 	mov.w	r9, #0
 8008a28:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a2c:	f104 0a1a 	add.w	sl, r4, #26
 8008a30:	45c8      	cmp	r8, r9
 8008a32:	dc09      	bgt.n	8008a48 <_printf_float+0x228>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	079b      	lsls	r3, r3, #30
 8008a38:	f100 8107 	bmi.w	8008c4a <_printf_float+0x42a>
 8008a3c:	68e0      	ldr	r0, [r4, #12]
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a40:	4298      	cmp	r0, r3
 8008a42:	bfb8      	it	lt
 8008a44:	4618      	movlt	r0, r3
 8008a46:	e739      	b.n	80088bc <_printf_float+0x9c>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af30 	beq.w	80088b8 <_printf_float+0x98>
 8008a58:	f109 0901 	add.w	r9, r9, #1
 8008a5c:	e7e8      	b.n	8008a30 <_printf_float+0x210>
 8008a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dc3b      	bgt.n	8008adc <_printf_float+0x2bc>
 8008a64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad8 <_printf_float+0x2b8>)
 8008a66:	2301      	movs	r3, #1
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	f43f af22 	beq.w	80088b8 <_printf_float+0x98>
 8008a74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a78:	ea59 0303 	orrs.w	r3, r9, r3
 8008a7c:	d102      	bne.n	8008a84 <_printf_float+0x264>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07d9      	lsls	r1, r3, #31
 8008a82:	d5d7      	bpl.n	8008a34 <_printf_float+0x214>
 8008a84:	9b05      	ldr	r3, [sp, #20]
 8008a86:	465a      	mov	r2, fp
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f af12 	beq.w	80088b8 <_printf_float+0x98>
 8008a94:	f04f 0a00 	mov.w	sl, #0
 8008a98:	f104 0b1a 	add.w	fp, r4, #26
 8008a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9e:	425b      	negs	r3, r3
 8008aa0:	4553      	cmp	r3, sl
 8008aa2:	dc01      	bgt.n	8008aa8 <_printf_float+0x288>
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	e794      	b.n	80089d2 <_printf_float+0x1b2>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	465a      	mov	r2, fp
 8008aac:	4631      	mov	r1, r6
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f43f af00 	beq.w	80088b8 <_printf_float+0x98>
 8008ab8:	f10a 0a01 	add.w	sl, sl, #1
 8008abc:	e7ee      	b.n	8008a9c <_printf_float+0x27c>
 8008abe:	bf00      	nop
 8008ac0:	ffffffff 	.word	0xffffffff
 8008ac4:	7fefffff 	.word	0x7fefffff
 8008ac8:	0800d3c8 	.word	0x0800d3c8
 8008acc:	0800d3cc 	.word	0x0800d3cc
 8008ad0:	0800d3d0 	.word	0x0800d3d0
 8008ad4:	0800d3d4 	.word	0x0800d3d4
 8008ad8:	0800d3d8 	.word	0x0800d3d8
 8008adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ade:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ae2:	4553      	cmp	r3, sl
 8008ae4:	bfa8      	it	ge
 8008ae6:	4653      	movge	r3, sl
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	4699      	mov	r9, r3
 8008aec:	dc37      	bgt.n	8008b5e <_printf_float+0x33e>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9307      	str	r3, [sp, #28]
 8008af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af6:	f104 021a 	add.w	r2, r4, #26
 8008afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008afc:	9907      	ldr	r1, [sp, #28]
 8008afe:	9306      	str	r3, [sp, #24]
 8008b00:	eba3 0309 	sub.w	r3, r3, r9
 8008b04:	428b      	cmp	r3, r1
 8008b06:	dc31      	bgt.n	8008b6c <_printf_float+0x34c>
 8008b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0a:	459a      	cmp	sl, r3
 8008b0c:	dc3b      	bgt.n	8008b86 <_printf_float+0x366>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	07da      	lsls	r2, r3, #31
 8008b12:	d438      	bmi.n	8008b86 <_printf_float+0x366>
 8008b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b16:	ebaa 0903 	sub.w	r9, sl, r3
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b20:	4599      	cmp	r9, r3
 8008b22:	bfa8      	it	ge
 8008b24:	4699      	movge	r9, r3
 8008b26:	f1b9 0f00 	cmp.w	r9, #0
 8008b2a:	dc34      	bgt.n	8008b96 <_printf_float+0x376>
 8008b2c:	f04f 0800 	mov.w	r8, #0
 8008b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b34:	f104 0b1a 	add.w	fp, r4, #26
 8008b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8008b3e:	eba3 0309 	sub.w	r3, r3, r9
 8008b42:	4543      	cmp	r3, r8
 8008b44:	f77f af76 	ble.w	8008a34 <_printf_float+0x214>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	465a      	mov	r2, fp
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f aeb0 	beq.w	80088b8 <_printf_float+0x98>
 8008b58:	f108 0801 	add.w	r8, r8, #1
 8008b5c:	e7ec      	b.n	8008b38 <_printf_float+0x318>
 8008b5e:	4642      	mov	r2, r8
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	d1c1      	bne.n	8008aee <_printf_float+0x2ce>
 8008b6a:	e6a5      	b.n	80088b8 <_printf_float+0x98>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	9206      	str	r2, [sp, #24]
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f ae9e 	beq.w	80088b8 <_printf_float+0x98>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	9a06      	ldr	r2, [sp, #24]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	e7b9      	b.n	8008afa <_printf_float+0x2da>
 8008b86:	9b05      	ldr	r3, [sp, #20]
 8008b88:	465a      	mov	r2, fp
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1bf      	bne.n	8008b14 <_printf_float+0x2f4>
 8008b94:	e690      	b.n	80088b8 <_printf_float+0x98>
 8008b96:	9a06      	ldr	r2, [sp, #24]
 8008b98:	464b      	mov	r3, r9
 8008b9a:	4442      	add	r2, r8
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d1c2      	bne.n	8008b2c <_printf_float+0x30c>
 8008ba6:	e687      	b.n	80088b8 <_printf_float+0x98>
 8008ba8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008bac:	f1b9 0f01 	cmp.w	r9, #1
 8008bb0:	dc01      	bgt.n	8008bb6 <_printf_float+0x396>
 8008bb2:	07db      	lsls	r3, r3, #31
 8008bb4:	d536      	bpl.n	8008c24 <_printf_float+0x404>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4642      	mov	r2, r8
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae79 	beq.w	80088b8 <_printf_float+0x98>
 8008bc6:	9b05      	ldr	r3, [sp, #20]
 8008bc8:	465a      	mov	r2, fp
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f43f ae71 	beq.w	80088b8 <_printf_float+0x98>
 8008bd6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008bda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be2:	f109 39ff 	add.w	r9, r9, #4294967295
 8008be6:	d018      	beq.n	8008c1a <_printf_float+0x3fa>
 8008be8:	464b      	mov	r3, r9
 8008bea:	f108 0201 	add.w	r2, r8, #1
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d10c      	bne.n	8008c12 <_printf_float+0x3f2>
 8008bf8:	e65e      	b.n	80088b8 <_printf_float+0x98>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	465a      	mov	r2, fp
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f ae57 	beq.w	80088b8 <_printf_float+0x98>
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	45c8      	cmp	r8, r9
 8008c10:	dbf3      	blt.n	8008bfa <_printf_float+0x3da>
 8008c12:	4653      	mov	r3, sl
 8008c14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c18:	e6dc      	b.n	80089d4 <_printf_float+0x1b4>
 8008c1a:	f04f 0800 	mov.w	r8, #0
 8008c1e:	f104 0b1a 	add.w	fp, r4, #26
 8008c22:	e7f4      	b.n	8008c0e <_printf_float+0x3ee>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4642      	mov	r2, r8
 8008c28:	e7e1      	b.n	8008bee <_printf_float+0x3ce>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	464a      	mov	r2, r9
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae3f 	beq.w	80088b8 <_printf_float+0x98>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	68e3      	ldr	r3, [r4, #12]
 8008c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c42:	1a5b      	subs	r3, r3, r1
 8008c44:	4543      	cmp	r3, r8
 8008c46:	dcf0      	bgt.n	8008c2a <_printf_float+0x40a>
 8008c48:	e6f8      	b.n	8008a3c <_printf_float+0x21c>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	f104 0919 	add.w	r9, r4, #25
 8008c52:	e7f4      	b.n	8008c3e <_printf_float+0x41e>

08008c54 <_printf_common>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	4616      	mov	r6, r2
 8008c5a:	4698      	mov	r8, r3
 8008c5c:	688a      	ldr	r2, [r1, #8]
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	bfb8      	it	lt
 8008c68:	4613      	movlt	r3, r2
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c70:	4607      	mov	r7, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	b10a      	cbz	r2, 8008c7a <_printf_common+0x26>
 8008c76:	3301      	adds	r3, #1
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	0699      	lsls	r1, r3, #26
 8008c7e:	bf42      	ittt	mi
 8008c80:	6833      	ldrmi	r3, [r6, #0]
 8008c82:	3302      	addmi	r3, #2
 8008c84:	6033      	strmi	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	f015 0506 	ands.w	r5, r5, #6
 8008c8c:	d106      	bne.n	8008c9c <_printf_common+0x48>
 8008c8e:	f104 0a19 	add.w	sl, r4, #25
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc26      	bgt.n	8008cea <_printf_common+0x96>
 8008c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	6822      	ldr	r2, [r4, #0]
 8008ca2:	3b00      	subs	r3, #0
 8008ca4:	bf18      	it	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	0692      	lsls	r2, r2, #26
 8008caa:	d42b      	bmi.n	8008d04 <_printf_common+0xb0>
 8008cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cb0:	4641      	mov	r1, r8
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	47c8      	blx	r9
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d01e      	beq.n	8008cf8 <_printf_common+0xa4>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	f003 0306 	and.w	r3, r3, #6
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	bf02      	ittt	eq
 8008cc6:	68e5      	ldreq	r5, [r4, #12]
 8008cc8:	6833      	ldreq	r3, [r6, #0]
 8008cca:	1aed      	subeq	r5, r5, r3
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	bf0c      	ite	eq
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	2500      	movne	r5, #0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	bfc4      	itt	gt
 8008cda:	1a9b      	subgt	r3, r3, r2
 8008cdc:	18ed      	addgt	r5, r5, r3
 8008cde:	2600      	movs	r6, #0
 8008ce0:	341a      	adds	r4, #26
 8008ce2:	42b5      	cmp	r5, r6
 8008ce4:	d11a      	bne.n	8008d1c <_printf_common+0xc8>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e008      	b.n	8008cfc <_printf_common+0xa8>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4652      	mov	r2, sl
 8008cee:	4641      	mov	r1, r8
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	47c8      	blx	r9
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d103      	bne.n	8008d00 <_printf_common+0xac>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	3501      	adds	r5, #1
 8008d02:	e7c6      	b.n	8008c92 <_printf_common+0x3e>
 8008d04:	18e1      	adds	r1, r4, r3
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	2030      	movs	r0, #48	@ 0x30
 8008d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d0e:	4422      	add	r2, r4
 8008d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d18:	3302      	adds	r3, #2
 8008d1a:	e7c7      	b.n	8008cac <_printf_common+0x58>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4641      	mov	r1, r8
 8008d22:	4638      	mov	r0, r7
 8008d24:	47c8      	blx	r9
 8008d26:	3001      	adds	r0, #1
 8008d28:	d0e6      	beq.n	8008cf8 <_printf_common+0xa4>
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7d9      	b.n	8008ce2 <_printf_common+0x8e>
	...

08008d30 <_printf_i>:
 8008d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	7e0f      	ldrb	r7, [r1, #24]
 8008d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d38:	2f78      	cmp	r7, #120	@ 0x78
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	469a      	mov	sl, r3
 8008d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d46:	d807      	bhi.n	8008d58 <_printf_i+0x28>
 8008d48:	2f62      	cmp	r7, #98	@ 0x62
 8008d4a:	d80a      	bhi.n	8008d62 <_printf_i+0x32>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	f000 80d2 	beq.w	8008ef6 <_printf_i+0x1c6>
 8008d52:	2f58      	cmp	r7, #88	@ 0x58
 8008d54:	f000 80b9 	beq.w	8008eca <_printf_i+0x19a>
 8008d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d60:	e03a      	b.n	8008dd8 <_printf_i+0xa8>
 8008d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d66:	2b15      	cmp	r3, #21
 8008d68:	d8f6      	bhi.n	8008d58 <_printf_i+0x28>
 8008d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8008d70 <_printf_i+0x40>)
 8008d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d70:	08008dc9 	.word	0x08008dc9
 8008d74:	08008ddd 	.word	0x08008ddd
 8008d78:	08008d59 	.word	0x08008d59
 8008d7c:	08008d59 	.word	0x08008d59
 8008d80:	08008d59 	.word	0x08008d59
 8008d84:	08008d59 	.word	0x08008d59
 8008d88:	08008ddd 	.word	0x08008ddd
 8008d8c:	08008d59 	.word	0x08008d59
 8008d90:	08008d59 	.word	0x08008d59
 8008d94:	08008d59 	.word	0x08008d59
 8008d98:	08008d59 	.word	0x08008d59
 8008d9c:	08008edd 	.word	0x08008edd
 8008da0:	08008e07 	.word	0x08008e07
 8008da4:	08008e97 	.word	0x08008e97
 8008da8:	08008d59 	.word	0x08008d59
 8008dac:	08008d59 	.word	0x08008d59
 8008db0:	08008eff 	.word	0x08008eff
 8008db4:	08008d59 	.word	0x08008d59
 8008db8:	08008e07 	.word	0x08008e07
 8008dbc:	08008d59 	.word	0x08008d59
 8008dc0:	08008d59 	.word	0x08008d59
 8008dc4:	08008e9f 	.word	0x08008e9f
 8008dc8:	6833      	ldr	r3, [r6, #0]
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6032      	str	r2, [r6, #0]
 8008dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e09d      	b.n	8008f18 <_printf_i+0x1e8>
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	1d19      	adds	r1, r3, #4
 8008de2:	6031      	str	r1, [r6, #0]
 8008de4:	0606      	lsls	r6, r0, #24
 8008de6:	d501      	bpl.n	8008dec <_printf_i+0xbc>
 8008de8:	681d      	ldr	r5, [r3, #0]
 8008dea:	e003      	b.n	8008df4 <_printf_i+0xc4>
 8008dec:	0645      	lsls	r5, r0, #25
 8008dee:	d5fb      	bpl.n	8008de8 <_printf_i+0xb8>
 8008df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008df4:	2d00      	cmp	r5, #0
 8008df6:	da03      	bge.n	8008e00 <_printf_i+0xd0>
 8008df8:	232d      	movs	r3, #45	@ 0x2d
 8008dfa:	426d      	negs	r5, r5
 8008dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e00:	4859      	ldr	r0, [pc, #356]	@ (8008f68 <_printf_i+0x238>)
 8008e02:	230a      	movs	r3, #10
 8008e04:	e011      	b.n	8008e2a <_printf_i+0xfa>
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	6833      	ldr	r3, [r6, #0]
 8008e0a:	0608      	lsls	r0, r1, #24
 8008e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e10:	d402      	bmi.n	8008e18 <_printf_i+0xe8>
 8008e12:	0649      	lsls	r1, r1, #25
 8008e14:	bf48      	it	mi
 8008e16:	b2ad      	uxthmi	r5, r5
 8008e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e1a:	4853      	ldr	r0, [pc, #332]	@ (8008f68 <_printf_i+0x238>)
 8008e1c:	6033      	str	r3, [r6, #0]
 8008e1e:	bf14      	ite	ne
 8008e20:	230a      	movne	r3, #10
 8008e22:	2308      	moveq	r3, #8
 8008e24:	2100      	movs	r1, #0
 8008e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e2a:	6866      	ldr	r6, [r4, #4]
 8008e2c:	60a6      	str	r6, [r4, #8]
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	bfa2      	ittt	ge
 8008e32:	6821      	ldrge	r1, [r4, #0]
 8008e34:	f021 0104 	bicge.w	r1, r1, #4
 8008e38:	6021      	strge	r1, [r4, #0]
 8008e3a:	b90d      	cbnz	r5, 8008e40 <_printf_i+0x110>
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	d04b      	beq.n	8008ed8 <_printf_i+0x1a8>
 8008e40:	4616      	mov	r6, r2
 8008e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e46:	fb03 5711 	mls	r7, r3, r1, r5
 8008e4a:	5dc7      	ldrb	r7, [r0, r7]
 8008e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e50:	462f      	mov	r7, r5
 8008e52:	42bb      	cmp	r3, r7
 8008e54:	460d      	mov	r5, r1
 8008e56:	d9f4      	bls.n	8008e42 <_printf_i+0x112>
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d10b      	bne.n	8008e74 <_printf_i+0x144>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	07df      	lsls	r7, r3, #31
 8008e60:	d508      	bpl.n	8008e74 <_printf_i+0x144>
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	4299      	cmp	r1, r3
 8008e68:	bfde      	ittt	le
 8008e6a:	2330      	movle	r3, #48	@ 0x30
 8008e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e74:	1b92      	subs	r2, r2, r6
 8008e76:	6122      	str	r2, [r4, #16]
 8008e78:	f8cd a000 	str.w	sl, [sp]
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	aa03      	add	r2, sp, #12
 8008e80:	4621      	mov	r1, r4
 8008e82:	4640      	mov	r0, r8
 8008e84:	f7ff fee6 	bl	8008c54 <_printf_common>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d14a      	bne.n	8008f22 <_printf_i+0x1f2>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b004      	add	sp, #16
 8008e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	4833      	ldr	r0, [pc, #204]	@ (8008f6c <_printf_i+0x23c>)
 8008ea0:	2778      	movs	r7, #120	@ 0x78
 8008ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	6831      	ldr	r1, [r6, #0]
 8008eaa:	061f      	lsls	r7, r3, #24
 8008eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8008eb0:	d402      	bmi.n	8008eb8 <_printf_i+0x188>
 8008eb2:	065f      	lsls	r7, r3, #25
 8008eb4:	bf48      	it	mi
 8008eb6:	b2ad      	uxthmi	r5, r5
 8008eb8:	6031      	str	r1, [r6, #0]
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	bf44      	itt	mi
 8008ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8008ec2:	6023      	strmi	r3, [r4, #0]
 8008ec4:	b11d      	cbz	r5, 8008ece <_printf_i+0x19e>
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	e7ac      	b.n	8008e24 <_printf_i+0xf4>
 8008eca:	4827      	ldr	r0, [pc, #156]	@ (8008f68 <_printf_i+0x238>)
 8008ecc:	e7e9      	b.n	8008ea2 <_printf_i+0x172>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	f023 0320 	bic.w	r3, r3, #32
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	e7f6      	b.n	8008ec6 <_printf_i+0x196>
 8008ed8:	4616      	mov	r6, r2
 8008eda:	e7bd      	b.n	8008e58 <_printf_i+0x128>
 8008edc:	6833      	ldr	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	6961      	ldr	r1, [r4, #20]
 8008ee2:	1d18      	adds	r0, r3, #4
 8008ee4:	6030      	str	r0, [r6, #0]
 8008ee6:	062e      	lsls	r6, r5, #24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0x1c0>
 8008eec:	6019      	str	r1, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0x1c6>
 8008ef0:	0668      	lsls	r0, r5, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0x1bc>
 8008ef4:	8019      	strh	r1, [r3, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	4616      	mov	r6, r2
 8008efc:	e7bc      	b.n	8008e78 <_printf_i+0x148>
 8008efe:	6833      	ldr	r3, [r6, #0]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	6032      	str	r2, [r6, #0]
 8008f04:	681e      	ldr	r6, [r3, #0]
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 f9e8 	bl	80002e0 <memchr>
 8008f10:	b108      	cbz	r0, 8008f16 <_printf_i+0x1e6>
 8008f12:	1b80      	subs	r0, r0, r6
 8008f14:	6060      	str	r0, [r4, #4]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f20:	e7aa      	b.n	8008e78 <_printf_i+0x148>
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	4632      	mov	r2, r6
 8008f26:	4649      	mov	r1, r9
 8008f28:	4640      	mov	r0, r8
 8008f2a:	47d0      	blx	sl
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0ad      	beq.n	8008e8c <_printf_i+0x15c>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	079b      	lsls	r3, r3, #30
 8008f34:	d413      	bmi.n	8008f5e <_printf_i+0x22e>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	bfb8      	it	lt
 8008f3e:	4618      	movlt	r0, r3
 8008f40:	e7a6      	b.n	8008e90 <_printf_i+0x160>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4632      	mov	r2, r6
 8008f46:	4649      	mov	r1, r9
 8008f48:	4640      	mov	r0, r8
 8008f4a:	47d0      	blx	sl
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d09d      	beq.n	8008e8c <_printf_i+0x15c>
 8008f50:	3501      	adds	r5, #1
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	9903      	ldr	r1, [sp, #12]
 8008f56:	1a5b      	subs	r3, r3, r1
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dcf2      	bgt.n	8008f42 <_printf_i+0x212>
 8008f5c:	e7eb      	b.n	8008f36 <_printf_i+0x206>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f104 0619 	add.w	r6, r4, #25
 8008f64:	e7f5      	b.n	8008f52 <_printf_i+0x222>
 8008f66:	bf00      	nop
 8008f68:	0800d3da 	.word	0x0800d3da
 8008f6c:	0800d3eb 	.word	0x0800d3eb

08008f70 <_scanf_float>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b087      	sub	sp, #28
 8008f76:	4617      	mov	r7, r2
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	688b      	ldr	r3, [r1, #8]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008f82:	bf81      	itttt	hi
 8008f84:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008f88:	eb03 0b05 	addhi.w	fp, r3, r5
 8008f8c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008f90:	608b      	strhi	r3, [r1, #8]
 8008f92:	680b      	ldr	r3, [r1, #0]
 8008f94:	460a      	mov	r2, r1
 8008f96:	f04f 0500 	mov.w	r5, #0
 8008f9a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008f9e:	f842 3b1c 	str.w	r3, [r2], #28
 8008fa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	bf98      	it	ls
 8008fac:	f04f 0b00 	movls.w	fp, #0
 8008fb0:	9201      	str	r2, [sp, #4]
 8008fb2:	4616      	mov	r6, r2
 8008fb4:	46aa      	mov	sl, r5
 8008fb6:	46a9      	mov	r9, r5
 8008fb8:	9502      	str	r5, [sp, #8]
 8008fba:	68a2      	ldr	r2, [r4, #8]
 8008fbc:	b152      	cbz	r2, 8008fd4 <_scanf_float+0x64>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008fc4:	d864      	bhi.n	8009090 <_scanf_float+0x120>
 8008fc6:	2b40      	cmp	r3, #64	@ 0x40
 8008fc8:	d83c      	bhi.n	8009044 <_scanf_float+0xd4>
 8008fca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008fce:	b2c8      	uxtb	r0, r1
 8008fd0:	280e      	cmp	r0, #14
 8008fd2:	d93a      	bls.n	800904a <_scanf_float+0xda>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	d003      	beq.n	8008fe2 <_scanf_float+0x72>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fe6:	f1ba 0f01 	cmp.w	sl, #1
 8008fea:	f200 8117 	bhi.w	800921c <_scanf_float+0x2ac>
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	f200 8108 	bhi.w	8009206 <_scanf_float+0x296>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	b007      	add	sp, #28
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009002:	2a0d      	cmp	r2, #13
 8009004:	d8e6      	bhi.n	8008fd4 <_scanf_float+0x64>
 8009006:	a101      	add	r1, pc, #4	@ (adr r1, 800900c <_scanf_float+0x9c>)
 8009008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800900c:	08009153 	.word	0x08009153
 8009010:	08008fd5 	.word	0x08008fd5
 8009014:	08008fd5 	.word	0x08008fd5
 8009018:	08008fd5 	.word	0x08008fd5
 800901c:	080091b3 	.word	0x080091b3
 8009020:	0800918b 	.word	0x0800918b
 8009024:	08008fd5 	.word	0x08008fd5
 8009028:	08008fd5 	.word	0x08008fd5
 800902c:	08009161 	.word	0x08009161
 8009030:	08008fd5 	.word	0x08008fd5
 8009034:	08008fd5 	.word	0x08008fd5
 8009038:	08008fd5 	.word	0x08008fd5
 800903c:	08008fd5 	.word	0x08008fd5
 8009040:	08009119 	.word	0x08009119
 8009044:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009048:	e7db      	b.n	8009002 <_scanf_float+0x92>
 800904a:	290e      	cmp	r1, #14
 800904c:	d8c2      	bhi.n	8008fd4 <_scanf_float+0x64>
 800904e:	a001      	add	r0, pc, #4	@ (adr r0, 8009054 <_scanf_float+0xe4>)
 8009050:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009054:	08009109 	.word	0x08009109
 8009058:	08008fd5 	.word	0x08008fd5
 800905c:	08009109 	.word	0x08009109
 8009060:	0800919f 	.word	0x0800919f
 8009064:	08008fd5 	.word	0x08008fd5
 8009068:	080090b1 	.word	0x080090b1
 800906c:	080090ef 	.word	0x080090ef
 8009070:	080090ef 	.word	0x080090ef
 8009074:	080090ef 	.word	0x080090ef
 8009078:	080090ef 	.word	0x080090ef
 800907c:	080090ef 	.word	0x080090ef
 8009080:	080090ef 	.word	0x080090ef
 8009084:	080090ef 	.word	0x080090ef
 8009088:	080090ef 	.word	0x080090ef
 800908c:	080090ef 	.word	0x080090ef
 8009090:	2b6e      	cmp	r3, #110	@ 0x6e
 8009092:	d809      	bhi.n	80090a8 <_scanf_float+0x138>
 8009094:	2b60      	cmp	r3, #96	@ 0x60
 8009096:	d8b2      	bhi.n	8008ffe <_scanf_float+0x8e>
 8009098:	2b54      	cmp	r3, #84	@ 0x54
 800909a:	d07b      	beq.n	8009194 <_scanf_float+0x224>
 800909c:	2b59      	cmp	r3, #89	@ 0x59
 800909e:	d199      	bne.n	8008fd4 <_scanf_float+0x64>
 80090a0:	2d07      	cmp	r5, #7
 80090a2:	d197      	bne.n	8008fd4 <_scanf_float+0x64>
 80090a4:	2508      	movs	r5, #8
 80090a6:	e02c      	b.n	8009102 <_scanf_float+0x192>
 80090a8:	2b74      	cmp	r3, #116	@ 0x74
 80090aa:	d073      	beq.n	8009194 <_scanf_float+0x224>
 80090ac:	2b79      	cmp	r3, #121	@ 0x79
 80090ae:	e7f6      	b.n	800909e <_scanf_float+0x12e>
 80090b0:	6821      	ldr	r1, [r4, #0]
 80090b2:	05c8      	lsls	r0, r1, #23
 80090b4:	d51b      	bpl.n	80090ee <_scanf_float+0x17e>
 80090b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80090ba:	6021      	str	r1, [r4, #0]
 80090bc:	f109 0901 	add.w	r9, r9, #1
 80090c0:	f1bb 0f00 	cmp.w	fp, #0
 80090c4:	d003      	beq.n	80090ce <_scanf_float+0x15e>
 80090c6:	3201      	adds	r2, #1
 80090c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090cc:	60a2      	str	r2, [r4, #8]
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	60a3      	str	r3, [r4, #8]
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	3301      	adds	r3, #1
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3b01      	subs	r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	f340 8087 	ble.w	80091f4 <_scanf_float+0x284>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	e765      	b.n	8008fba <_scanf_float+0x4a>
 80090ee:	eb1a 0105 	adds.w	r1, sl, r5
 80090f2:	f47f af6f 	bne.w	8008fd4 <_scanf_float+0x64>
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80090fc:	6022      	str	r2, [r4, #0]
 80090fe:	460d      	mov	r5, r1
 8009100:	468a      	mov	sl, r1
 8009102:	f806 3b01 	strb.w	r3, [r6], #1
 8009106:	e7e2      	b.n	80090ce <_scanf_float+0x15e>
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	0610      	lsls	r0, r2, #24
 800910c:	f57f af62 	bpl.w	8008fd4 <_scanf_float+0x64>
 8009110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	e7f4      	b.n	8009102 <_scanf_float+0x192>
 8009118:	f1ba 0f00 	cmp.w	sl, #0
 800911c:	d10e      	bne.n	800913c <_scanf_float+0x1cc>
 800911e:	f1b9 0f00 	cmp.w	r9, #0
 8009122:	d10e      	bne.n	8009142 <_scanf_float+0x1d2>
 8009124:	6822      	ldr	r2, [r4, #0]
 8009126:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800912a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800912e:	d108      	bne.n	8009142 <_scanf_float+0x1d2>
 8009130:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009134:	6022      	str	r2, [r4, #0]
 8009136:	f04f 0a01 	mov.w	sl, #1
 800913a:	e7e2      	b.n	8009102 <_scanf_float+0x192>
 800913c:	f1ba 0f02 	cmp.w	sl, #2
 8009140:	d055      	beq.n	80091ee <_scanf_float+0x27e>
 8009142:	2d01      	cmp	r5, #1
 8009144:	d002      	beq.n	800914c <_scanf_float+0x1dc>
 8009146:	2d04      	cmp	r5, #4
 8009148:	f47f af44 	bne.w	8008fd4 <_scanf_float+0x64>
 800914c:	3501      	adds	r5, #1
 800914e:	b2ed      	uxtb	r5, r5
 8009150:	e7d7      	b.n	8009102 <_scanf_float+0x192>
 8009152:	f1ba 0f01 	cmp.w	sl, #1
 8009156:	f47f af3d 	bne.w	8008fd4 <_scanf_float+0x64>
 800915a:	f04f 0a02 	mov.w	sl, #2
 800915e:	e7d0      	b.n	8009102 <_scanf_float+0x192>
 8009160:	b97d      	cbnz	r5, 8009182 <_scanf_float+0x212>
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	f47f af38 	bne.w	8008fda <_scanf_float+0x6a>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009170:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009174:	f040 8101 	bne.w	800937a <_scanf_float+0x40a>
 8009178:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	2501      	movs	r5, #1
 8009180:	e7bf      	b.n	8009102 <_scanf_float+0x192>
 8009182:	2d03      	cmp	r5, #3
 8009184:	d0e2      	beq.n	800914c <_scanf_float+0x1dc>
 8009186:	2d05      	cmp	r5, #5
 8009188:	e7de      	b.n	8009148 <_scanf_float+0x1d8>
 800918a:	2d02      	cmp	r5, #2
 800918c:	f47f af22 	bne.w	8008fd4 <_scanf_float+0x64>
 8009190:	2503      	movs	r5, #3
 8009192:	e7b6      	b.n	8009102 <_scanf_float+0x192>
 8009194:	2d06      	cmp	r5, #6
 8009196:	f47f af1d 	bne.w	8008fd4 <_scanf_float+0x64>
 800919a:	2507      	movs	r5, #7
 800919c:	e7b1      	b.n	8009102 <_scanf_float+0x192>
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	0591      	lsls	r1, r2, #22
 80091a2:	f57f af17 	bpl.w	8008fd4 <_scanf_float+0x64>
 80091a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80091aa:	6022      	str	r2, [r4, #0]
 80091ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80091b0:	e7a7      	b.n	8009102 <_scanf_float+0x192>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80091b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80091bc:	d006      	beq.n	80091cc <_scanf_float+0x25c>
 80091be:	0550      	lsls	r0, r2, #21
 80091c0:	f57f af08 	bpl.w	8008fd4 <_scanf_float+0x64>
 80091c4:	f1b9 0f00 	cmp.w	r9, #0
 80091c8:	f000 80d7 	beq.w	800937a <_scanf_float+0x40a>
 80091cc:	0591      	lsls	r1, r2, #22
 80091ce:	bf58      	it	pl
 80091d0:	9902      	ldrpl	r1, [sp, #8]
 80091d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091d6:	bf58      	it	pl
 80091d8:	eba9 0101 	subpl.w	r1, r9, r1
 80091dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80091e0:	bf58      	it	pl
 80091e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091e6:	6022      	str	r2, [r4, #0]
 80091e8:	f04f 0900 	mov.w	r9, #0
 80091ec:	e789      	b.n	8009102 <_scanf_float+0x192>
 80091ee:	f04f 0a03 	mov.w	sl, #3
 80091f2:	e786      	b.n	8009102 <_scanf_float+0x192>
 80091f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80091f8:	4639      	mov	r1, r7
 80091fa:	4640      	mov	r0, r8
 80091fc:	4798      	blx	r3
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f aedb 	beq.w	8008fba <_scanf_float+0x4a>
 8009204:	e6e6      	b.n	8008fd4 <_scanf_float+0x64>
 8009206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800920a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800920e:	463a      	mov	r2, r7
 8009210:	4640      	mov	r0, r8
 8009212:	4798      	blx	r3
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	3b01      	subs	r3, #1
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	e6e8      	b.n	8008fee <_scanf_float+0x7e>
 800921c:	1e6b      	subs	r3, r5, #1
 800921e:	2b06      	cmp	r3, #6
 8009220:	d824      	bhi.n	800926c <_scanf_float+0x2fc>
 8009222:	2d02      	cmp	r5, #2
 8009224:	d836      	bhi.n	8009294 <_scanf_float+0x324>
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	429e      	cmp	r6, r3
 800922a:	f67f aee4 	bls.w	8008ff6 <_scanf_float+0x86>
 800922e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009236:	463a      	mov	r2, r7
 8009238:	4640      	mov	r0, r8
 800923a:	4798      	blx	r3
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	3b01      	subs	r3, #1
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	e7f0      	b.n	8009226 <_scanf_float+0x2b6>
 8009244:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009248:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800924c:	463a      	mov	r2, r7
 800924e:	4640      	mov	r0, r8
 8009250:	4798      	blx	r3
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	3b01      	subs	r3, #1
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	f10a 3aff 	add.w	sl, sl, #4294967295
 800925c:	fa5f fa8a 	uxtb.w	sl, sl
 8009260:	f1ba 0f02 	cmp.w	sl, #2
 8009264:	d1ee      	bne.n	8009244 <_scanf_float+0x2d4>
 8009266:	3d03      	subs	r5, #3
 8009268:	b2ed      	uxtb	r5, r5
 800926a:	1b76      	subs	r6, r6, r5
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	05da      	lsls	r2, r3, #23
 8009270:	d530      	bpl.n	80092d4 <_scanf_float+0x364>
 8009272:	055b      	lsls	r3, r3, #21
 8009274:	d511      	bpl.n	800929a <_scanf_float+0x32a>
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	429e      	cmp	r6, r3
 800927a:	f67f aebc 	bls.w	8008ff6 <_scanf_float+0x86>
 800927e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009286:	463a      	mov	r2, r7
 8009288:	4640      	mov	r0, r8
 800928a:	4798      	blx	r3
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	3b01      	subs	r3, #1
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	e7f0      	b.n	8009276 <_scanf_float+0x306>
 8009294:	46aa      	mov	sl, r5
 8009296:	46b3      	mov	fp, r6
 8009298:	e7de      	b.n	8009258 <_scanf_float+0x2e8>
 800929a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	2965      	cmp	r1, #101	@ 0x65
 80092a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80092a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	d00c      	beq.n	80092c8 <_scanf_float+0x358>
 80092ae:	2945      	cmp	r1, #69	@ 0x45
 80092b0:	d00a      	beq.n	80092c8 <_scanf_float+0x358>
 80092b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092b6:	463a      	mov	r2, r7
 80092b8:	4640      	mov	r0, r8
 80092ba:	4798      	blx	r3
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	1eb5      	subs	r5, r6, #2
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092cc:	463a      	mov	r2, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	4798      	blx	r3
 80092d2:	462e      	mov	r6, r5
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	f012 0210 	ands.w	r2, r2, #16
 80092da:	d001      	beq.n	80092e0 <_scanf_float+0x370>
 80092dc:	2000      	movs	r0, #0
 80092de:	e68b      	b.n	8008ff8 <_scanf_float+0x88>
 80092e0:	7032      	strb	r2, [r6, #0]
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80092e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ec:	d11a      	bne.n	8009324 <_scanf_float+0x3b4>
 80092ee:	9b02      	ldr	r3, [sp, #8]
 80092f0:	454b      	cmp	r3, r9
 80092f2:	eba3 0209 	sub.w	r2, r3, r9
 80092f6:	d121      	bne.n	800933c <_scanf_float+0x3cc>
 80092f8:	9901      	ldr	r1, [sp, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	4640      	mov	r0, r8
 80092fe:	f002 fc31 	bl	800bb64 <_strtod_r>
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	6821      	ldr	r1, [r4, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f011 0f02 	tst.w	r1, #2
 800930c:	f103 0204 	add.w	r2, r3, #4
 8009310:	d01f      	beq.n	8009352 <_scanf_float+0x3e2>
 8009312:	9903      	ldr	r1, [sp, #12]
 8009314:	600a      	str	r2, [r1, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	ed83 0b00 	vstr	d0, [r3]
 800931c:	68e3      	ldr	r3, [r4, #12]
 800931e:	3301      	adds	r3, #1
 8009320:	60e3      	str	r3, [r4, #12]
 8009322:	e7db      	b.n	80092dc <_scanf_float+0x36c>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0e6      	beq.n	80092f8 <_scanf_float+0x388>
 800932a:	9905      	ldr	r1, [sp, #20]
 800932c:	230a      	movs	r3, #10
 800932e:	3101      	adds	r1, #1
 8009330:	4640      	mov	r0, r8
 8009332:	f002 fc97 	bl	800bc64 <_strtol_r>
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	9e05      	ldr	r6, [sp, #20]
 800933a:	1ac2      	subs	r2, r0, r3
 800933c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009340:	429e      	cmp	r6, r3
 8009342:	bf28      	it	cs
 8009344:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009348:	490d      	ldr	r1, [pc, #52]	@ (8009380 <_scanf_float+0x410>)
 800934a:	4630      	mov	r0, r6
 800934c:	f000 f94e 	bl	80095ec <siprintf>
 8009350:	e7d2      	b.n	80092f8 <_scanf_float+0x388>
 8009352:	f011 0f04 	tst.w	r1, #4
 8009356:	9903      	ldr	r1, [sp, #12]
 8009358:	600a      	str	r2, [r1, #0]
 800935a:	d1dc      	bne.n	8009316 <_scanf_float+0x3a6>
 800935c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009364:	681d      	ldr	r5, [r3, #0]
 8009366:	d705      	bvc.n	8009374 <_scanf_float+0x404>
 8009368:	4806      	ldr	r0, [pc, #24]	@ (8009384 <_scanf_float+0x414>)
 800936a:	f000 fab7 	bl	80098dc <nanf>
 800936e:	ed85 0a00 	vstr	s0, [r5]
 8009372:	e7d3      	b.n	800931c <_scanf_float+0x3ac>
 8009374:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009378:	e7f9      	b.n	800936e <_scanf_float+0x3fe>
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	e630      	b.n	8008fe2 <_scanf_float+0x72>
 8009380:	0800d3fc 	.word	0x0800d3fc
 8009384:	0800d795 	.word	0x0800d795

08009388 <std>:
 8009388:	2300      	movs	r3, #0
 800938a:	b510      	push	{r4, lr}
 800938c:	4604      	mov	r4, r0
 800938e:	e9c0 3300 	strd	r3, r3, [r0]
 8009392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009396:	6083      	str	r3, [r0, #8]
 8009398:	8181      	strh	r1, [r0, #12]
 800939a:	6643      	str	r3, [r0, #100]	@ 0x64
 800939c:	81c2      	strh	r2, [r0, #14]
 800939e:	6183      	str	r3, [r0, #24]
 80093a0:	4619      	mov	r1, r3
 80093a2:	2208      	movs	r2, #8
 80093a4:	305c      	adds	r0, #92	@ 0x5c
 80093a6:	f000 fa19 	bl	80097dc <memset>
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <std+0x58>)
 80093ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <std+0x5c>)
 80093b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093b2:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <std+0x60>)
 80093b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x64>)
 80093b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <std+0x68>)
 80093bc:	6224      	str	r4, [r4, #32]
 80093be:	429c      	cmp	r4, r3
 80093c0:	d006      	beq.n	80093d0 <std+0x48>
 80093c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093c6:	4294      	cmp	r4, r2
 80093c8:	d002      	beq.n	80093d0 <std+0x48>
 80093ca:	33d0      	adds	r3, #208	@ 0xd0
 80093cc:	429c      	cmp	r4, r3
 80093ce:	d105      	bne.n	80093dc <std+0x54>
 80093d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d8:	f000 ba7c 	b.w	80098d4 <__retarget_lock_init_recursive>
 80093dc:	bd10      	pop	{r4, pc}
 80093de:	bf00      	nop
 80093e0:	0800962d 	.word	0x0800962d
 80093e4:	0800964f 	.word	0x0800964f
 80093e8:	08009687 	.word	0x08009687
 80093ec:	080096ab 	.word	0x080096ab
 80093f0:	24000a08 	.word	0x24000a08

080093f4 <stdio_exit_handler>:
 80093f4:	4a02      	ldr	r2, [pc, #8]	@ (8009400 <stdio_exit_handler+0xc>)
 80093f6:	4903      	ldr	r1, [pc, #12]	@ (8009404 <stdio_exit_handler+0x10>)
 80093f8:	4803      	ldr	r0, [pc, #12]	@ (8009408 <stdio_exit_handler+0x14>)
 80093fa:	f000 b869 	b.w	80094d0 <_fwalk_sglue>
 80093fe:	bf00      	nop
 8009400:	24000010 	.word	0x24000010
 8009404:	0800c2a5 	.word	0x0800c2a5
 8009408:	24000020 	.word	0x24000020

0800940c <cleanup_stdio>:
 800940c:	6841      	ldr	r1, [r0, #4]
 800940e:	4b0c      	ldr	r3, [pc, #48]	@ (8009440 <cleanup_stdio+0x34>)
 8009410:	4299      	cmp	r1, r3
 8009412:	b510      	push	{r4, lr}
 8009414:	4604      	mov	r4, r0
 8009416:	d001      	beq.n	800941c <cleanup_stdio+0x10>
 8009418:	f002 ff44 	bl	800c2a4 <_fflush_r>
 800941c:	68a1      	ldr	r1, [r4, #8]
 800941e:	4b09      	ldr	r3, [pc, #36]	@ (8009444 <cleanup_stdio+0x38>)
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <cleanup_stdio+0x1e>
 8009424:	4620      	mov	r0, r4
 8009426:	f002 ff3d 	bl	800c2a4 <_fflush_r>
 800942a:	68e1      	ldr	r1, [r4, #12]
 800942c:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <cleanup_stdio+0x3c>)
 800942e:	4299      	cmp	r1, r3
 8009430:	d004      	beq.n	800943c <cleanup_stdio+0x30>
 8009432:	4620      	mov	r0, r4
 8009434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009438:	f002 bf34 	b.w	800c2a4 <_fflush_r>
 800943c:	bd10      	pop	{r4, pc}
 800943e:	bf00      	nop
 8009440:	24000a08 	.word	0x24000a08
 8009444:	24000a70 	.word	0x24000a70
 8009448:	24000ad8 	.word	0x24000ad8

0800944c <global_stdio_init.part.0>:
 800944c:	b510      	push	{r4, lr}
 800944e:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <global_stdio_init.part.0+0x30>)
 8009450:	4c0b      	ldr	r4, [pc, #44]	@ (8009480 <global_stdio_init.part.0+0x34>)
 8009452:	4a0c      	ldr	r2, [pc, #48]	@ (8009484 <global_stdio_init.part.0+0x38>)
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	4620      	mov	r0, r4
 8009458:	2200      	movs	r2, #0
 800945a:	2104      	movs	r1, #4
 800945c:	f7ff ff94 	bl	8009388 <std>
 8009460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009464:	2201      	movs	r2, #1
 8009466:	2109      	movs	r1, #9
 8009468:	f7ff ff8e 	bl	8009388 <std>
 800946c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009470:	2202      	movs	r2, #2
 8009472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009476:	2112      	movs	r1, #18
 8009478:	f7ff bf86 	b.w	8009388 <std>
 800947c:	24000b40 	.word	0x24000b40
 8009480:	24000a08 	.word	0x24000a08
 8009484:	080093f5 	.word	0x080093f5

08009488 <__sfp_lock_acquire>:
 8009488:	4801      	ldr	r0, [pc, #4]	@ (8009490 <__sfp_lock_acquire+0x8>)
 800948a:	f000 ba24 	b.w	80098d6 <__retarget_lock_acquire_recursive>
 800948e:	bf00      	nop
 8009490:	24000b49 	.word	0x24000b49

08009494 <__sfp_lock_release>:
 8009494:	4801      	ldr	r0, [pc, #4]	@ (800949c <__sfp_lock_release+0x8>)
 8009496:	f000 ba1f 	b.w	80098d8 <__retarget_lock_release_recursive>
 800949a:	bf00      	nop
 800949c:	24000b49 	.word	0x24000b49

080094a0 <__sinit>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	4604      	mov	r4, r0
 80094a4:	f7ff fff0 	bl	8009488 <__sfp_lock_acquire>
 80094a8:	6a23      	ldr	r3, [r4, #32]
 80094aa:	b11b      	cbz	r3, 80094b4 <__sinit+0x14>
 80094ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b0:	f7ff bff0 	b.w	8009494 <__sfp_lock_release>
 80094b4:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <__sinit+0x28>)
 80094b6:	6223      	str	r3, [r4, #32]
 80094b8:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <__sinit+0x2c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f5      	bne.n	80094ac <__sinit+0xc>
 80094c0:	f7ff ffc4 	bl	800944c <global_stdio_init.part.0>
 80094c4:	e7f2      	b.n	80094ac <__sinit+0xc>
 80094c6:	bf00      	nop
 80094c8:	0800940d 	.word	0x0800940d
 80094cc:	24000b40 	.word	0x24000b40

080094d0 <_fwalk_sglue>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4607      	mov	r7, r0
 80094d6:	4688      	mov	r8, r1
 80094d8:	4614      	mov	r4, r2
 80094da:	2600      	movs	r6, #0
 80094dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094e0:	f1b9 0901 	subs.w	r9, r9, #1
 80094e4:	d505      	bpl.n	80094f2 <_fwalk_sglue+0x22>
 80094e6:	6824      	ldr	r4, [r4, #0]
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	d1f7      	bne.n	80094dc <_fwalk_sglue+0xc>
 80094ec:	4630      	mov	r0, r6
 80094ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f2:	89ab      	ldrh	r3, [r5, #12]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d907      	bls.n	8009508 <_fwalk_sglue+0x38>
 80094f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094fc:	3301      	adds	r3, #1
 80094fe:	d003      	beq.n	8009508 <_fwalk_sglue+0x38>
 8009500:	4629      	mov	r1, r5
 8009502:	4638      	mov	r0, r7
 8009504:	47c0      	blx	r8
 8009506:	4306      	orrs	r6, r0
 8009508:	3568      	adds	r5, #104	@ 0x68
 800950a:	e7e9      	b.n	80094e0 <_fwalk_sglue+0x10>

0800950c <iprintf>:
 800950c:	b40f      	push	{r0, r1, r2, r3}
 800950e:	b507      	push	{r0, r1, r2, lr}
 8009510:	4906      	ldr	r1, [pc, #24]	@ (800952c <iprintf+0x20>)
 8009512:	ab04      	add	r3, sp, #16
 8009514:	6808      	ldr	r0, [r1, #0]
 8009516:	f853 2b04 	ldr.w	r2, [r3], #4
 800951a:	6881      	ldr	r1, [r0, #8]
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f002 fd25 	bl	800bf6c <_vfiprintf_r>
 8009522:	b003      	add	sp, #12
 8009524:	f85d eb04 	ldr.w	lr, [sp], #4
 8009528:	b004      	add	sp, #16
 800952a:	4770      	bx	lr
 800952c:	2400001c 	.word	0x2400001c

08009530 <_puts_r>:
 8009530:	6a03      	ldr	r3, [r0, #32]
 8009532:	b570      	push	{r4, r5, r6, lr}
 8009534:	6884      	ldr	r4, [r0, #8]
 8009536:	4605      	mov	r5, r0
 8009538:	460e      	mov	r6, r1
 800953a:	b90b      	cbnz	r3, 8009540 <_puts_r+0x10>
 800953c:	f7ff ffb0 	bl	80094a0 <__sinit>
 8009540:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009542:	07db      	lsls	r3, r3, #31
 8009544:	d405      	bmi.n	8009552 <_puts_r+0x22>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	0598      	lsls	r0, r3, #22
 800954a:	d402      	bmi.n	8009552 <_puts_r+0x22>
 800954c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800954e:	f000 f9c2 	bl	80098d6 <__retarget_lock_acquire_recursive>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	0719      	lsls	r1, r3, #28
 8009556:	d502      	bpl.n	800955e <_puts_r+0x2e>
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d135      	bne.n	80095ca <_puts_r+0x9a>
 800955e:	4621      	mov	r1, r4
 8009560:	4628      	mov	r0, r5
 8009562:	f000 f8e5 	bl	8009730 <__swsetup_r>
 8009566:	b380      	cbz	r0, 80095ca <_puts_r+0x9a>
 8009568:	f04f 35ff 	mov.w	r5, #4294967295
 800956c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800956e:	07da      	lsls	r2, r3, #31
 8009570:	d405      	bmi.n	800957e <_puts_r+0x4e>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	059b      	lsls	r3, r3, #22
 8009576:	d402      	bmi.n	800957e <_puts_r+0x4e>
 8009578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800957a:	f000 f9ad 	bl	80098d8 <__retarget_lock_release_recursive>
 800957e:	4628      	mov	r0, r5
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	2b00      	cmp	r3, #0
 8009584:	da04      	bge.n	8009590 <_puts_r+0x60>
 8009586:	69a2      	ldr	r2, [r4, #24]
 8009588:	429a      	cmp	r2, r3
 800958a:	dc17      	bgt.n	80095bc <_puts_r+0x8c>
 800958c:	290a      	cmp	r1, #10
 800958e:	d015      	beq.n	80095bc <_puts_r+0x8c>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	6022      	str	r2, [r4, #0]
 8009596:	7019      	strb	r1, [r3, #0]
 8009598:	68a3      	ldr	r3, [r4, #8]
 800959a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800959e:	3b01      	subs	r3, #1
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	2900      	cmp	r1, #0
 80095a4:	d1ed      	bne.n	8009582 <_puts_r+0x52>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da11      	bge.n	80095ce <_puts_r+0x9e>
 80095aa:	4622      	mov	r2, r4
 80095ac:	210a      	movs	r1, #10
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f87f 	bl	80096b2 <__swbuf_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d0d7      	beq.n	8009568 <_puts_r+0x38>
 80095b8:	250a      	movs	r5, #10
 80095ba:	e7d7      	b.n	800956c <_puts_r+0x3c>
 80095bc:	4622      	mov	r2, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 f877 	bl	80096b2 <__swbuf_r>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d1e7      	bne.n	8009598 <_puts_r+0x68>
 80095c8:	e7ce      	b.n	8009568 <_puts_r+0x38>
 80095ca:	3e01      	subs	r6, #1
 80095cc:	e7e4      	b.n	8009598 <_puts_r+0x68>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	6022      	str	r2, [r4, #0]
 80095d4:	220a      	movs	r2, #10
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e7ee      	b.n	80095b8 <_puts_r+0x88>
	...

080095dc <puts>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	@ (80095e8 <puts+0xc>)
 80095de:	4601      	mov	r1, r0
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f7ff bfa5 	b.w	8009530 <_puts_r>
 80095e6:	bf00      	nop
 80095e8:	2400001c 	.word	0x2400001c

080095ec <siprintf>:
 80095ec:	b40e      	push	{r1, r2, r3}
 80095ee:	b500      	push	{lr}
 80095f0:	b09c      	sub	sp, #112	@ 0x70
 80095f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	9006      	str	r0, [sp, #24]
 80095f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095fc:	4809      	ldr	r0, [pc, #36]	@ (8009624 <siprintf+0x38>)
 80095fe:	9107      	str	r1, [sp, #28]
 8009600:	9104      	str	r1, [sp, #16]
 8009602:	4909      	ldr	r1, [pc, #36]	@ (8009628 <siprintf+0x3c>)
 8009604:	f853 2b04 	ldr.w	r2, [r3], #4
 8009608:	9105      	str	r1, [sp, #20]
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	a902      	add	r1, sp, #8
 8009610:	f002 fb86 	bl	800bd20 <_svfiprintf_r>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	b01c      	add	sp, #112	@ 0x70
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	2400001c 	.word	0x2400001c
 8009628:	ffff0208 	.word	0xffff0208

0800962c <__sread>:
 800962c:	b510      	push	{r4, lr}
 800962e:	460c      	mov	r4, r1
 8009630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009634:	f000 f900 	bl	8009838 <_read_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	bfab      	itete	ge
 800963c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800963e:	89a3      	ldrhlt	r3, [r4, #12]
 8009640:	181b      	addge	r3, r3, r0
 8009642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009646:	bfac      	ite	ge
 8009648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800964a:	81a3      	strhlt	r3, [r4, #12]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__swrite>:
 800964e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009652:	461f      	mov	r7, r3
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	05db      	lsls	r3, r3, #23
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	4616      	mov	r6, r2
 800965e:	d505      	bpl.n	800966c <__swrite+0x1e>
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	2302      	movs	r3, #2
 8009666:	2200      	movs	r2, #0
 8009668:	f000 f8d4 	bl	8009814 <_lseek_r>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	f000 b8eb 	b.w	800985c <_write_r>

08009686 <__sseek>:
 8009686:	b510      	push	{r4, lr}
 8009688:	460c      	mov	r4, r1
 800968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968e:	f000 f8c1 	bl	8009814 <_lseek_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	bf15      	itete	ne
 8009698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800969a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800969e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096a2:	81a3      	strheq	r3, [r4, #12]
 80096a4:	bf18      	it	ne
 80096a6:	81a3      	strhne	r3, [r4, #12]
 80096a8:	bd10      	pop	{r4, pc}

080096aa <__sclose>:
 80096aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ae:	f000 b8a1 	b.w	80097f4 <_close_r>

080096b2 <__swbuf_r>:
 80096b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b4:	460e      	mov	r6, r1
 80096b6:	4614      	mov	r4, r2
 80096b8:	4605      	mov	r5, r0
 80096ba:	b118      	cbz	r0, 80096c4 <__swbuf_r+0x12>
 80096bc:	6a03      	ldr	r3, [r0, #32]
 80096be:	b90b      	cbnz	r3, 80096c4 <__swbuf_r+0x12>
 80096c0:	f7ff feee 	bl	80094a0 <__sinit>
 80096c4:	69a3      	ldr	r3, [r4, #24]
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	071a      	lsls	r2, r3, #28
 80096cc:	d501      	bpl.n	80096d2 <__swbuf_r+0x20>
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	b943      	cbnz	r3, 80096e4 <__swbuf_r+0x32>
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 f82b 	bl	8009730 <__swsetup_r>
 80096da:	b118      	cbz	r0, 80096e4 <__swbuf_r+0x32>
 80096dc:	f04f 37ff 	mov.w	r7, #4294967295
 80096e0:	4638      	mov	r0, r7
 80096e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	6922      	ldr	r2, [r4, #16]
 80096e8:	1a98      	subs	r0, r3, r2
 80096ea:	6963      	ldr	r3, [r4, #20]
 80096ec:	b2f6      	uxtb	r6, r6
 80096ee:	4283      	cmp	r3, r0
 80096f0:	4637      	mov	r7, r6
 80096f2:	dc05      	bgt.n	8009700 <__swbuf_r+0x4e>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4628      	mov	r0, r5
 80096f8:	f002 fdd4 	bl	800c2a4 <_fflush_r>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d1ed      	bne.n	80096dc <__swbuf_r+0x2a>
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	60a3      	str	r3, [r4, #8]
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	701e      	strb	r6, [r3, #0]
 800970e:	6962      	ldr	r2, [r4, #20]
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	429a      	cmp	r2, r3
 8009714:	d004      	beq.n	8009720 <__swbuf_r+0x6e>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d5e1      	bpl.n	80096e0 <__swbuf_r+0x2e>
 800971c:	2e0a      	cmp	r6, #10
 800971e:	d1df      	bne.n	80096e0 <__swbuf_r+0x2e>
 8009720:	4621      	mov	r1, r4
 8009722:	4628      	mov	r0, r5
 8009724:	f002 fdbe 	bl	800c2a4 <_fflush_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	d0d9      	beq.n	80096e0 <__swbuf_r+0x2e>
 800972c:	e7d6      	b.n	80096dc <__swbuf_r+0x2a>
	...

08009730 <__swsetup_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4b29      	ldr	r3, [pc, #164]	@ (80097d8 <__swsetup_r+0xa8>)
 8009734:	4605      	mov	r5, r0
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	460c      	mov	r4, r1
 800973a:	b118      	cbz	r0, 8009744 <__swsetup_r+0x14>
 800973c:	6a03      	ldr	r3, [r0, #32]
 800973e:	b90b      	cbnz	r3, 8009744 <__swsetup_r+0x14>
 8009740:	f7ff feae 	bl	80094a0 <__sinit>
 8009744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009748:	0719      	lsls	r1, r3, #28
 800974a:	d422      	bmi.n	8009792 <__swsetup_r+0x62>
 800974c:	06da      	lsls	r2, r3, #27
 800974e:	d407      	bmi.n	8009760 <__swsetup_r+0x30>
 8009750:	2209      	movs	r2, #9
 8009752:	602a      	str	r2, [r5, #0]
 8009754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	f04f 30ff 	mov.w	r0, #4294967295
 800975e:	e033      	b.n	80097c8 <__swsetup_r+0x98>
 8009760:	0758      	lsls	r0, r3, #29
 8009762:	d512      	bpl.n	800978a <__swsetup_r+0x5a>
 8009764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009766:	b141      	cbz	r1, 800977a <__swsetup_r+0x4a>
 8009768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800976c:	4299      	cmp	r1, r3
 800976e:	d002      	beq.n	8009776 <__swsetup_r+0x46>
 8009770:	4628      	mov	r0, r5
 8009772:	f000 fe97 	bl	800a4a4 <_free_r>
 8009776:	2300      	movs	r3, #0
 8009778:	6363      	str	r3, [r4, #52]	@ 0x34
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	2300      	movs	r3, #0
 8009784:	6063      	str	r3, [r4, #4]
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	f043 0308 	orr.w	r3, r3, #8
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	b94b      	cbnz	r3, 80097aa <__swsetup_r+0x7a>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800979c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a0:	d003      	beq.n	80097aa <__swsetup_r+0x7a>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f002 fdcb 	bl	800c340 <__smakebuf_r>
 80097aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ae:	f013 0201 	ands.w	r2, r3, #1
 80097b2:	d00a      	beq.n	80097ca <__swsetup_r+0x9a>
 80097b4:	2200      	movs	r2, #0
 80097b6:	60a2      	str	r2, [r4, #8]
 80097b8:	6962      	ldr	r2, [r4, #20]
 80097ba:	4252      	negs	r2, r2
 80097bc:	61a2      	str	r2, [r4, #24]
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	b942      	cbnz	r2, 80097d4 <__swsetup_r+0xa4>
 80097c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097c6:	d1c5      	bne.n	8009754 <__swsetup_r+0x24>
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
 80097ca:	0799      	lsls	r1, r3, #30
 80097cc:	bf58      	it	pl
 80097ce:	6962      	ldrpl	r2, [r4, #20]
 80097d0:	60a2      	str	r2, [r4, #8]
 80097d2:	e7f4      	b.n	80097be <__swsetup_r+0x8e>
 80097d4:	2000      	movs	r0, #0
 80097d6:	e7f7      	b.n	80097c8 <__swsetup_r+0x98>
 80097d8:	2400001c 	.word	0x2400001c

080097dc <memset>:
 80097dc:	4402      	add	r2, r0
 80097de:	4603      	mov	r3, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d100      	bne.n	80097e6 <memset+0xa>
 80097e4:	4770      	bx	lr
 80097e6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ea:	e7f9      	b.n	80097e0 <memset+0x4>

080097ec <_localeconv_r>:
 80097ec:	4800      	ldr	r0, [pc, #0]	@ (80097f0 <_localeconv_r+0x4>)
 80097ee:	4770      	bx	lr
 80097f0:	2400015c 	.word	0x2400015c

080097f4 <_close_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	@ (8009810 <_close_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f7 fe88 	bl	8001514 <_close>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_close_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_close_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	24000b44 	.word	0x24000b44

08009814 <_lseek_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	@ (8009834 <_lseek_r+0x20>)
 8009818:	4604      	mov	r4, r0
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f7f7 fe9d 	bl	8001562 <_lseek>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_lseek_r+0x1e>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_lseek_r+0x1e>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	24000b44 	.word	0x24000b44

08009838 <_read_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d07      	ldr	r5, [pc, #28]	@ (8009858 <_read_r+0x20>)
 800983c:	4604      	mov	r4, r0
 800983e:	4608      	mov	r0, r1
 8009840:	4611      	mov	r1, r2
 8009842:	2200      	movs	r2, #0
 8009844:	602a      	str	r2, [r5, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f7f7 fe2b 	bl	80014a2 <_read>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_read_r+0x1e>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_read_r+0x1e>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	24000b44 	.word	0x24000b44

0800985c <_write_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	@ (800987c <_write_r+0x20>)
 8009860:	4604      	mov	r4, r0
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	2200      	movs	r2, #0
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f7f7 fe36 	bl	80014dc <_write>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_write_r+0x1e>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_write_r+0x1e>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	24000b44 	.word	0x24000b44

08009880 <__errno>:
 8009880:	4b01      	ldr	r3, [pc, #4]	@ (8009888 <__errno+0x8>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	2400001c 	.word	0x2400001c

0800988c <__libc_init_array>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4d0d      	ldr	r5, [pc, #52]	@ (80098c4 <__libc_init_array+0x38>)
 8009890:	4c0d      	ldr	r4, [pc, #52]	@ (80098c8 <__libc_init_array+0x3c>)
 8009892:	1b64      	subs	r4, r4, r5
 8009894:	10a4      	asrs	r4, r4, #2
 8009896:	2600      	movs	r6, #0
 8009898:	42a6      	cmp	r6, r4
 800989a:	d109      	bne.n	80098b0 <__libc_init_array+0x24>
 800989c:	4d0b      	ldr	r5, [pc, #44]	@ (80098cc <__libc_init_array+0x40>)
 800989e:	4c0c      	ldr	r4, [pc, #48]	@ (80098d0 <__libc_init_array+0x44>)
 80098a0:	f003 fd16 	bl	800d2d0 <_init>
 80098a4:	1b64      	subs	r4, r4, r5
 80098a6:	10a4      	asrs	r4, r4, #2
 80098a8:	2600      	movs	r6, #0
 80098aa:	42a6      	cmp	r6, r4
 80098ac:	d105      	bne.n	80098ba <__libc_init_array+0x2e>
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b4:	4798      	blx	r3
 80098b6:	3601      	adds	r6, #1
 80098b8:	e7ee      	b.n	8009898 <__libc_init_array+0xc>
 80098ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80098be:	4798      	blx	r3
 80098c0:	3601      	adds	r6, #1
 80098c2:	e7f2      	b.n	80098aa <__libc_init_array+0x1e>
 80098c4:	0800f0b8 	.word	0x0800f0b8
 80098c8:	0800f0b8 	.word	0x0800f0b8
 80098cc:	0800f0b8 	.word	0x0800f0b8
 80098d0:	0800f0bc 	.word	0x0800f0bc

080098d4 <__retarget_lock_init_recursive>:
 80098d4:	4770      	bx	lr

080098d6 <__retarget_lock_acquire_recursive>:
 80098d6:	4770      	bx	lr

080098d8 <__retarget_lock_release_recursive>:
 80098d8:	4770      	bx	lr
	...

080098dc <nanf>:
 80098dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80098e4 <nanf+0x8>
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	7fc00000 	.word	0x7fc00000

080098e8 <quorem>:
 80098e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	6903      	ldr	r3, [r0, #16]
 80098ee:	690c      	ldr	r4, [r1, #16]
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	4607      	mov	r7, r0
 80098f4:	db7e      	blt.n	80099f4 <quorem+0x10c>
 80098f6:	3c01      	subs	r4, #1
 80098f8:	f101 0814 	add.w	r8, r1, #20
 80098fc:	00a3      	lsls	r3, r4, #2
 80098fe:	f100 0514 	add.w	r5, r0, #20
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800990e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009912:	3301      	adds	r3, #1
 8009914:	429a      	cmp	r2, r3
 8009916:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800991a:	fbb2 f6f3 	udiv	r6, r2, r3
 800991e:	d32e      	bcc.n	800997e <quorem+0x96>
 8009920:	f04f 0a00 	mov.w	sl, #0
 8009924:	46c4      	mov	ip, r8
 8009926:	46ae      	mov	lr, r5
 8009928:	46d3      	mov	fp, sl
 800992a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800992e:	b298      	uxth	r0, r3
 8009930:	fb06 a000 	mla	r0, r6, r0, sl
 8009934:	0c02      	lsrs	r2, r0, #16
 8009936:	0c1b      	lsrs	r3, r3, #16
 8009938:	fb06 2303 	mla	r3, r6, r3, r2
 800993c:	f8de 2000 	ldr.w	r2, [lr]
 8009940:	b280      	uxth	r0, r0
 8009942:	b292      	uxth	r2, r2
 8009944:	1a12      	subs	r2, r2, r0
 8009946:	445a      	add	r2, fp
 8009948:	f8de 0000 	ldr.w	r0, [lr]
 800994c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009950:	b29b      	uxth	r3, r3
 8009952:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009956:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800995a:	b292      	uxth	r2, r2
 800995c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009960:	45e1      	cmp	r9, ip
 8009962:	f84e 2b04 	str.w	r2, [lr], #4
 8009966:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800996a:	d2de      	bcs.n	800992a <quorem+0x42>
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	58eb      	ldr	r3, [r5, r3]
 8009970:	b92b      	cbnz	r3, 800997e <quorem+0x96>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	3b04      	subs	r3, #4
 8009976:	429d      	cmp	r5, r3
 8009978:	461a      	mov	r2, r3
 800997a:	d32f      	bcc.n	80099dc <quorem+0xf4>
 800997c:	613c      	str	r4, [r7, #16]
 800997e:	4638      	mov	r0, r7
 8009980:	f001 f954 	bl	800ac2c <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	db25      	blt.n	80099d4 <quorem+0xec>
 8009988:	4629      	mov	r1, r5
 800998a:	2000      	movs	r0, #0
 800998c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009990:	f8d1 c000 	ldr.w	ip, [r1]
 8009994:	fa1f fe82 	uxth.w	lr, r2
 8009998:	fa1f f38c 	uxth.w	r3, ip
 800999c:	eba3 030e 	sub.w	r3, r3, lr
 80099a0:	4403      	add	r3, r0
 80099a2:	0c12      	lsrs	r2, r2, #16
 80099a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099b2:	45c1      	cmp	r9, r8
 80099b4:	f841 3b04 	str.w	r3, [r1], #4
 80099b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099bc:	d2e6      	bcs.n	800998c <quorem+0xa4>
 80099be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c6:	b922      	cbnz	r2, 80099d2 <quorem+0xea>
 80099c8:	3b04      	subs	r3, #4
 80099ca:	429d      	cmp	r5, r3
 80099cc:	461a      	mov	r2, r3
 80099ce:	d30b      	bcc.n	80099e8 <quorem+0x100>
 80099d0:	613c      	str	r4, [r7, #16]
 80099d2:	3601      	adds	r6, #1
 80099d4:	4630      	mov	r0, r6
 80099d6:	b003      	add	sp, #12
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	6812      	ldr	r2, [r2, #0]
 80099de:	3b04      	subs	r3, #4
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	d1cb      	bne.n	800997c <quorem+0x94>
 80099e4:	3c01      	subs	r4, #1
 80099e6:	e7c6      	b.n	8009976 <quorem+0x8e>
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	3b04      	subs	r3, #4
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	d1ef      	bne.n	80099d0 <quorem+0xe8>
 80099f0:	3c01      	subs	r4, #1
 80099f2:	e7ea      	b.n	80099ca <quorem+0xe2>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e7ee      	b.n	80099d6 <quorem+0xee>

080099f8 <_dtoa_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	ed2d 8b02 	vpush	{d8}
 8009a00:	69c7      	ldr	r7, [r0, #28]
 8009a02:	b091      	sub	sp, #68	@ 0x44
 8009a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a08:	ec55 4b10 	vmov	r4, r5, d0
 8009a0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009a0e:	9107      	str	r1, [sp, #28]
 8009a10:	4681      	mov	r9, r0
 8009a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a14:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a16:	b97f      	cbnz	r7, 8009a38 <_dtoa_r+0x40>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f000 fd8d 	bl	800a538 <malloc>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	f8c9 001c 	str.w	r0, [r9, #28]
 8009a24:	b920      	cbnz	r0, 8009a30 <_dtoa_r+0x38>
 8009a26:	4ba0      	ldr	r3, [pc, #640]	@ (8009ca8 <_dtoa_r+0x2b0>)
 8009a28:	21ef      	movs	r1, #239	@ 0xef
 8009a2a:	48a0      	ldr	r0, [pc, #640]	@ (8009cac <_dtoa_r+0x2b4>)
 8009a2c:	f002 fd38 	bl	800c4a0 <__assert_func>
 8009a30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a34:	6007      	str	r7, [r0, #0]
 8009a36:	60c7      	str	r7, [r0, #12]
 8009a38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009a3c:	6819      	ldr	r1, [r3, #0]
 8009a3e:	b159      	cbz	r1, 8009a58 <_dtoa_r+0x60>
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	604a      	str	r2, [r1, #4]
 8009a44:	2301      	movs	r3, #1
 8009a46:	4093      	lsls	r3, r2
 8009a48:	608b      	str	r3, [r1, #8]
 8009a4a:	4648      	mov	r0, r9
 8009a4c:	f000 fe6a 	bl	800a724 <_Bfree>
 8009a50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	1e2b      	subs	r3, r5, #0
 8009a5a:	bfbb      	ittet	lt
 8009a5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a60:	9303      	strlt	r3, [sp, #12]
 8009a62:	2300      	movge	r3, #0
 8009a64:	2201      	movlt	r2, #1
 8009a66:	bfac      	ite	ge
 8009a68:	6033      	strge	r3, [r6, #0]
 8009a6a:	6032      	strlt	r2, [r6, #0]
 8009a6c:	4b90      	ldr	r3, [pc, #576]	@ (8009cb0 <_dtoa_r+0x2b8>)
 8009a6e:	9e03      	ldr	r6, [sp, #12]
 8009a70:	43b3      	bics	r3, r6
 8009a72:	d110      	bne.n	8009a96 <_dtoa_r+0x9e>
 8009a74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009a80:	4323      	orrs	r3, r4
 8009a82:	f000 84de 	beq.w	800a442 <_dtoa_r+0xa4a>
 8009a86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a88:	4f8a      	ldr	r7, [pc, #552]	@ (8009cb4 <_dtoa_r+0x2bc>)
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 84e0 	beq.w	800a450 <_dtoa_r+0xa58>
 8009a90:	1cfb      	adds	r3, r7, #3
 8009a92:	f000 bcdb 	b.w	800a44c <_dtoa_r+0xa54>
 8009a96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009a9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa2:	d10a      	bne.n	8009aba <_dtoa_r+0xc2>
 8009aa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009aac:	b113      	cbz	r3, 8009ab4 <_dtoa_r+0xbc>
 8009aae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009ab0:	4b81      	ldr	r3, [pc, #516]	@ (8009cb8 <_dtoa_r+0x2c0>)
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	4f81      	ldr	r7, [pc, #516]	@ (8009cbc <_dtoa_r+0x2c4>)
 8009ab6:	f000 bccb 	b.w	800a450 <_dtoa_r+0xa58>
 8009aba:	aa0e      	add	r2, sp, #56	@ 0x38
 8009abc:	a90f      	add	r1, sp, #60	@ 0x3c
 8009abe:	4648      	mov	r0, r9
 8009ac0:	eeb0 0b48 	vmov.f64	d0, d8
 8009ac4:	f001 f9d2 	bl	800ae6c <__d2b>
 8009ac8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ace:	9001      	str	r0, [sp, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d045      	beq.n	8009b60 <_dtoa_r+0x168>
 8009ad4:	eeb0 7b48 	vmov.f64	d7, d8
 8009ad8:	ee18 1a90 	vmov	r1, s17
 8009adc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ae0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009ae4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009ae8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009aec:	2500      	movs	r5, #0
 8009aee:	ee07 1a90 	vmov	s15, r1
 8009af2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009af6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009c90 <_dtoa_r+0x298>
 8009afa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009afe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009c98 <_dtoa_r+0x2a0>
 8009b02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009b06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009ca0 <_dtoa_r+0x2a8>
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009b12:	eeb0 7b46 	vmov.f64	d7, d6
 8009b16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009b1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009b1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b26:	ee16 8a90 	vmov	r8, s13
 8009b2a:	d508      	bpl.n	8009b3e <_dtoa_r+0x146>
 8009b2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009b30:	eeb4 6b47 	vcmp.f64	d6, d7
 8009b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b38:	bf18      	it	ne
 8009b3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009b3e:	f1b8 0f16 	cmp.w	r8, #22
 8009b42:	d82b      	bhi.n	8009b9c <_dtoa_r+0x1a4>
 8009b44:	495e      	ldr	r1, [pc, #376]	@ (8009cc0 <_dtoa_r+0x2c8>)
 8009b46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009b4a:	ed91 7b00 	vldr	d7, [r1]
 8009b4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b56:	d501      	bpl.n	8009b5c <_dtoa_r+0x164>
 8009b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	e01e      	b.n	8009b9e <_dtoa_r+0x1a6>
 8009b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b62:	4413      	add	r3, r2
 8009b64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009b68:	2920      	cmp	r1, #32
 8009b6a:	bfc1      	itttt	gt
 8009b6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009b70:	408e      	lslgt	r6, r1
 8009b72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009b76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009b7a:	bfd6      	itet	le
 8009b7c:	f1c1 0120 	rsble	r1, r1, #32
 8009b80:	4331      	orrgt	r1, r6
 8009b82:	fa04 f101 	lslle.w	r1, r4, r1
 8009b86:	ee07 1a90 	vmov	s15, r1
 8009b8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	ee17 1a90 	vmov	r1, s15
 8009b94:	2501      	movs	r5, #1
 8009b96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009b9a:	e7a8      	b.n	8009aee <_dtoa_r+0xf6>
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	1e53      	subs	r3, r2, #1
 8009ba2:	9306      	str	r3, [sp, #24]
 8009ba4:	bf45      	ittet	mi
 8009ba6:	f1c2 0301 	rsbmi	r3, r2, #1
 8009baa:	9305      	strmi	r3, [sp, #20]
 8009bac:	2300      	movpl	r3, #0
 8009bae:	2300      	movmi	r3, #0
 8009bb0:	bf4c      	ite	mi
 8009bb2:	9306      	strmi	r3, [sp, #24]
 8009bb4:	9305      	strpl	r3, [sp, #20]
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	910c      	str	r1, [sp, #48]	@ 0x30
 8009bbc:	db18      	blt.n	8009bf0 <_dtoa_r+0x1f8>
 8009bbe:	9b06      	ldr	r3, [sp, #24]
 8009bc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009bc4:	4443      	add	r3, r8
 8009bc6:	9306      	str	r3, [sp, #24]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9a07      	ldr	r2, [sp, #28]
 8009bcc:	2a09      	cmp	r2, #9
 8009bce:	d849      	bhi.n	8009c64 <_dtoa_r+0x26c>
 8009bd0:	2a05      	cmp	r2, #5
 8009bd2:	bfc4      	itt	gt
 8009bd4:	3a04      	subgt	r2, #4
 8009bd6:	9207      	strgt	r2, [sp, #28]
 8009bd8:	9a07      	ldr	r2, [sp, #28]
 8009bda:	f1a2 0202 	sub.w	r2, r2, #2
 8009bde:	bfcc      	ite	gt
 8009be0:	2400      	movgt	r4, #0
 8009be2:	2401      	movle	r4, #1
 8009be4:	2a03      	cmp	r2, #3
 8009be6:	d848      	bhi.n	8009c7a <_dtoa_r+0x282>
 8009be8:	e8df f002 	tbb	[pc, r2]
 8009bec:	3a2c2e0b 	.word	0x3a2c2e0b
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	eba3 0308 	sub.w	r3, r3, r8
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8009bfc:	f1c8 0300 	rsb	r3, r8, #0
 8009c00:	e7e3      	b.n	8009bca <_dtoa_r+0x1d2>
 8009c02:	2200      	movs	r2, #0
 8009c04:	9208      	str	r2, [sp, #32]
 8009c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	dc39      	bgt.n	8009c80 <_dtoa_r+0x288>
 8009c0c:	f04f 0b01 	mov.w	fp, #1
 8009c10:	46da      	mov	sl, fp
 8009c12:	465a      	mov	r2, fp
 8009c14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009c18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	2004      	movs	r0, #4
 8009c20:	f100 0614 	add.w	r6, r0, #20
 8009c24:	4296      	cmp	r6, r2
 8009c26:	d930      	bls.n	8009c8a <_dtoa_r+0x292>
 8009c28:	6079      	str	r1, [r7, #4]
 8009c2a:	4648      	mov	r0, r9
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	f000 fd39 	bl	800a6a4 <_Balloc>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	4607      	mov	r7, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d146      	bne.n	8009cc8 <_dtoa_r+0x2d0>
 8009c3a:	4b22      	ldr	r3, [pc, #136]	@ (8009cc4 <_dtoa_r+0x2cc>)
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c42:	e6f2      	b.n	8009a2a <_dtoa_r+0x32>
 8009c44:	2201      	movs	r2, #1
 8009c46:	e7dd      	b.n	8009c04 <_dtoa_r+0x20c>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	9208      	str	r2, [sp, #32]
 8009c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c4e:	eb08 0b02 	add.w	fp, r8, r2
 8009c52:	f10b 0a01 	add.w	sl, fp, #1
 8009c56:	4652      	mov	r2, sl
 8009c58:	2a01      	cmp	r2, #1
 8009c5a:	bfb8      	it	lt
 8009c5c:	2201      	movlt	r2, #1
 8009c5e:	e7db      	b.n	8009c18 <_dtoa_r+0x220>
 8009c60:	2201      	movs	r2, #1
 8009c62:	e7f2      	b.n	8009c4a <_dtoa_r+0x252>
 8009c64:	2401      	movs	r4, #1
 8009c66:	2200      	movs	r2, #0
 8009c68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009c6c:	f04f 3bff 	mov.w	fp, #4294967295
 8009c70:	2100      	movs	r1, #0
 8009c72:	46da      	mov	sl, fp
 8009c74:	2212      	movs	r2, #18
 8009c76:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c78:	e7ce      	b.n	8009c18 <_dtoa_r+0x220>
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	9208      	str	r2, [sp, #32]
 8009c7e:	e7f5      	b.n	8009c6c <_dtoa_r+0x274>
 8009c80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009c84:	46da      	mov	sl, fp
 8009c86:	465a      	mov	r2, fp
 8009c88:	e7c6      	b.n	8009c18 <_dtoa_r+0x220>
 8009c8a:	3101      	adds	r1, #1
 8009c8c:	0040      	lsls	r0, r0, #1
 8009c8e:	e7c7      	b.n	8009c20 <_dtoa_r+0x228>
 8009c90:	636f4361 	.word	0x636f4361
 8009c94:	3fd287a7 	.word	0x3fd287a7
 8009c98:	8b60c8b3 	.word	0x8b60c8b3
 8009c9c:	3fc68a28 	.word	0x3fc68a28
 8009ca0:	509f79fb 	.word	0x509f79fb
 8009ca4:	3fd34413 	.word	0x3fd34413
 8009ca8:	0800d40e 	.word	0x0800d40e
 8009cac:	0800d425 	.word	0x0800d425
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	0800d40a 	.word	0x0800d40a
 8009cb8:	0800d3d9 	.word	0x0800d3d9
 8009cbc:	0800d3d8 	.word	0x0800d3d8
 8009cc0:	0800d520 	.word	0x0800d520
 8009cc4:	0800d47d 	.word	0x0800d47d
 8009cc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009ccc:	f1ba 0f0e 	cmp.w	sl, #14
 8009cd0:	6010      	str	r0, [r2, #0]
 8009cd2:	d86f      	bhi.n	8009db4 <_dtoa_r+0x3bc>
 8009cd4:	2c00      	cmp	r4, #0
 8009cd6:	d06d      	beq.n	8009db4 <_dtoa_r+0x3bc>
 8009cd8:	f1b8 0f00 	cmp.w	r8, #0
 8009cdc:	f340 80c2 	ble.w	8009e64 <_dtoa_r+0x46c>
 8009ce0:	4aca      	ldr	r2, [pc, #808]	@ (800a00c <_dtoa_r+0x614>)
 8009ce2:	f008 010f 	and.w	r1, r8, #15
 8009ce6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009cea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009cee:	ed92 7b00 	vldr	d7, [r2]
 8009cf2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009cf6:	f000 80a9 	beq.w	8009e4c <_dtoa_r+0x454>
 8009cfa:	4ac5      	ldr	r2, [pc, #788]	@ (800a010 <_dtoa_r+0x618>)
 8009cfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8009d00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009d04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009d08:	f001 010f 	and.w	r1, r1, #15
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	48c0      	ldr	r0, [pc, #768]	@ (800a010 <_dtoa_r+0x618>)
 8009d10:	2900      	cmp	r1, #0
 8009d12:	f040 809d 	bne.w	8009e50 <_dtoa_r+0x458>
 8009d16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009d1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	f000 80c1 	beq.w	8009eb0 <_dtoa_r+0x4b8>
 8009d2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009d32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	f140 80b9 	bpl.w	8009eb0 <_dtoa_r+0x4b8>
 8009d3e:	f1ba 0f00 	cmp.w	sl, #0
 8009d42:	f000 80b5 	beq.w	8009eb0 <_dtoa_r+0x4b8>
 8009d46:	f1bb 0f00 	cmp.w	fp, #0
 8009d4a:	dd31      	ble.n	8009db0 <_dtoa_r+0x3b8>
 8009d4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d58:	f108 31ff 	add.w	r1, r8, #4294967295
 8009d5c:	9104      	str	r1, [sp, #16]
 8009d5e:	3201      	adds	r2, #1
 8009d60:	465c      	mov	r4, fp
 8009d62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009d6a:	ee07 2a90 	vmov	s15, r2
 8009d6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009d76:	ee15 2a90 	vmov	r2, s11
 8009d7a:	ec51 0b15 	vmov	r0, r1, d5
 8009d7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009d82:	2c00      	cmp	r4, #0
 8009d84:	f040 8098 	bne.w	8009eb8 <_dtoa_r+0x4c0>
 8009d88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d90:	ec41 0b17 	vmov	d7, r0, r1
 8009d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9c:	f300 8261 	bgt.w	800a262 <_dtoa_r+0x86a>
 8009da0:	eeb1 7b47 	vneg.f64	d7, d7
 8009da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	f100 80f5 	bmi.w	8009f9a <_dtoa_r+0x5a2>
 8009db0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009db4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	f2c0 812c 	blt.w	800a014 <_dtoa_r+0x61c>
 8009dbc:	f1b8 0f0e 	cmp.w	r8, #14
 8009dc0:	f300 8128 	bgt.w	800a014 <_dtoa_r+0x61c>
 8009dc4:	4b91      	ldr	r3, [pc, #580]	@ (800a00c <_dtoa_r+0x614>)
 8009dc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009dca:	ed93 6b00 	vldr	d6, [r3]
 8009dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	da03      	bge.n	8009ddc <_dtoa_r+0x3e4>
 8009dd4:	f1ba 0f00 	cmp.w	sl, #0
 8009dd8:	f340 80d2 	ble.w	8009f80 <_dtoa_r+0x588>
 8009ddc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009de4:	463e      	mov	r6, r7
 8009de6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009dea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009dee:	ee15 3a10 	vmov	r3, s10
 8009df2:	3330      	adds	r3, #48	@ 0x30
 8009df4:	f806 3b01 	strb.w	r3, [r6], #1
 8009df8:	1bf3      	subs	r3, r6, r7
 8009dfa:	459a      	cmp	sl, r3
 8009dfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009e00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009e04:	f040 80f8 	bne.w	8009ff8 <_dtoa_r+0x600>
 8009e08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009e0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e14:	f300 80dd 	bgt.w	8009fd2 <_dtoa_r+0x5da>
 8009e18:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	d104      	bne.n	8009e2c <_dtoa_r+0x434>
 8009e22:	ee15 3a10 	vmov	r3, s10
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	f100 80d3 	bmi.w	8009fd2 <_dtoa_r+0x5da>
 8009e2c:	9901      	ldr	r1, [sp, #4]
 8009e2e:	4648      	mov	r0, r9
 8009e30:	f000 fc78 	bl	800a724 <_Bfree>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e38:	7033      	strb	r3, [r6, #0]
 8009e3a:	f108 0301 	add.w	r3, r8, #1
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 8304 	beq.w	800a450 <_dtoa_r+0xa58>
 8009e48:	601e      	str	r6, [r3, #0]
 8009e4a:	e301      	b.n	800a450 <_dtoa_r+0xa58>
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	e75e      	b.n	8009d0e <_dtoa_r+0x316>
 8009e50:	07cc      	lsls	r4, r1, #31
 8009e52:	d504      	bpl.n	8009e5e <_dtoa_r+0x466>
 8009e54:	ed90 6b00 	vldr	d6, [r0]
 8009e58:	3201      	adds	r2, #1
 8009e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e5e:	1049      	asrs	r1, r1, #1
 8009e60:	3008      	adds	r0, #8
 8009e62:	e755      	b.n	8009d10 <_dtoa_r+0x318>
 8009e64:	d022      	beq.n	8009eac <_dtoa_r+0x4b4>
 8009e66:	f1c8 0100 	rsb	r1, r8, #0
 8009e6a:	4a68      	ldr	r2, [pc, #416]	@ (800a00c <_dtoa_r+0x614>)
 8009e6c:	f001 000f 	and.w	r0, r1, #15
 8009e70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009e74:	ed92 7b00 	vldr	d7, [r2]
 8009e78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009e7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e80:	4863      	ldr	r0, [pc, #396]	@ (800a010 <_dtoa_r+0x618>)
 8009e82:	1109      	asrs	r1, r1, #4
 8009e84:	2400      	movs	r4, #0
 8009e86:	2202      	movs	r2, #2
 8009e88:	b929      	cbnz	r1, 8009e96 <_dtoa_r+0x49e>
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	f43f af49 	beq.w	8009d22 <_dtoa_r+0x32a>
 8009e90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e94:	e745      	b.n	8009d22 <_dtoa_r+0x32a>
 8009e96:	07ce      	lsls	r6, r1, #31
 8009e98:	d505      	bpl.n	8009ea6 <_dtoa_r+0x4ae>
 8009e9a:	ed90 6b00 	vldr	d6, [r0]
 8009e9e:	3201      	adds	r2, #1
 8009ea0:	2401      	movs	r4, #1
 8009ea2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ea6:	1049      	asrs	r1, r1, #1
 8009ea8:	3008      	adds	r0, #8
 8009eaa:	e7ed      	b.n	8009e88 <_dtoa_r+0x490>
 8009eac:	2202      	movs	r2, #2
 8009eae:	e738      	b.n	8009d22 <_dtoa_r+0x32a>
 8009eb0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009eb4:	4654      	mov	r4, sl
 8009eb6:	e754      	b.n	8009d62 <_dtoa_r+0x36a>
 8009eb8:	4a54      	ldr	r2, [pc, #336]	@ (800a00c <_dtoa_r+0x614>)
 8009eba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009ebe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009ec2:	9a08      	ldr	r2, [sp, #32]
 8009ec4:	ec41 0b17 	vmov	d7, r0, r1
 8009ec8:	443c      	add	r4, r7
 8009eca:	b34a      	cbz	r2, 8009f20 <_dtoa_r+0x528>
 8009ecc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009ed0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009ed4:	463e      	mov	r6, r7
 8009ed6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009eda:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009ede:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ee2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ee6:	ee14 2a90 	vmov	r2, s9
 8009eea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009eee:	3230      	adds	r2, #48	@ 0x30
 8009ef0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	f806 2b01 	strb.w	r2, [r6], #1
 8009f00:	d438      	bmi.n	8009f74 <_dtoa_r+0x57c>
 8009f02:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009f06:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0e:	d462      	bmi.n	8009fd6 <_dtoa_r+0x5de>
 8009f10:	42a6      	cmp	r6, r4
 8009f12:	f43f af4d 	beq.w	8009db0 <_dtoa_r+0x3b8>
 8009f16:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009f1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009f1e:	e7e0      	b.n	8009ee2 <_dtoa_r+0x4ea>
 8009f20:	4621      	mov	r1, r4
 8009f22:	463e      	mov	r6, r7
 8009f24:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f28:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009f2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009f30:	ee14 2a90 	vmov	r2, s9
 8009f34:	3230      	adds	r2, #48	@ 0x30
 8009f36:	f806 2b01 	strb.w	r2, [r6], #1
 8009f3a:	42a6      	cmp	r6, r4
 8009f3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009f40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009f44:	d119      	bne.n	8009f7a <_dtoa_r+0x582>
 8009f46:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009f4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009f4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f56:	dc3e      	bgt.n	8009fd6 <_dtoa_r+0x5de>
 8009f58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009f5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	f57f af24 	bpl.w	8009db0 <_dtoa_r+0x3b8>
 8009f68:	460e      	mov	r6, r1
 8009f6a:	3901      	subs	r1, #1
 8009f6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f70:	2b30      	cmp	r3, #48	@ 0x30
 8009f72:	d0f9      	beq.n	8009f68 <_dtoa_r+0x570>
 8009f74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f78:	e758      	b.n	8009e2c <_dtoa_r+0x434>
 8009f7a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009f7e:	e7d5      	b.n	8009f2c <_dtoa_r+0x534>
 8009f80:	d10b      	bne.n	8009f9a <_dtoa_r+0x5a2>
 8009f82:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009f86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009f8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f96:	f2c0 8161 	blt.w	800a25c <_dtoa_r+0x864>
 8009f9a:	2400      	movs	r4, #0
 8009f9c:	4625      	mov	r5, r4
 8009f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	463e      	mov	r6, r7
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	4621      	mov	r1, r4
 8009fac:	4648      	mov	r0, r9
 8009fae:	f000 fbb9 	bl	800a724 <_Bfree>
 8009fb2:	2d00      	cmp	r5, #0
 8009fb4:	d0de      	beq.n	8009f74 <_dtoa_r+0x57c>
 8009fb6:	f1b8 0f00 	cmp.w	r8, #0
 8009fba:	d005      	beq.n	8009fc8 <_dtoa_r+0x5d0>
 8009fbc:	45a8      	cmp	r8, r5
 8009fbe:	d003      	beq.n	8009fc8 <_dtoa_r+0x5d0>
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	4648      	mov	r0, r9
 8009fc4:	f000 fbae 	bl	800a724 <_Bfree>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4648      	mov	r0, r9
 8009fcc:	f000 fbaa 	bl	800a724 <_Bfree>
 8009fd0:	e7d0      	b.n	8009f74 <_dtoa_r+0x57c>
 8009fd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	461e      	mov	r6, r3
 8009fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fde:	2a39      	cmp	r2, #57	@ 0x39
 8009fe0:	d106      	bne.n	8009ff0 <_dtoa_r+0x5f8>
 8009fe2:	429f      	cmp	r7, r3
 8009fe4:	d1f8      	bne.n	8009fd8 <_dtoa_r+0x5e0>
 8009fe6:	9a04      	ldr	r2, [sp, #16]
 8009fe8:	3201      	adds	r2, #1
 8009fea:	9204      	str	r2, [sp, #16]
 8009fec:	2230      	movs	r2, #48	@ 0x30
 8009fee:	703a      	strb	r2, [r7, #0]
 8009ff0:	781a      	ldrb	r2, [r3, #0]
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e7bd      	b.n	8009f74 <_dtoa_r+0x57c>
 8009ff8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ffc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a004:	f47f aeef 	bne.w	8009de6 <_dtoa_r+0x3ee>
 800a008:	e710      	b.n	8009e2c <_dtoa_r+0x434>
 800a00a:	bf00      	nop
 800a00c:	0800d520 	.word	0x0800d520
 800a010:	0800d4f8 	.word	0x0800d4f8
 800a014:	9908      	ldr	r1, [sp, #32]
 800a016:	2900      	cmp	r1, #0
 800a018:	f000 80e3 	beq.w	800a1e2 <_dtoa_r+0x7ea>
 800a01c:	9907      	ldr	r1, [sp, #28]
 800a01e:	2901      	cmp	r1, #1
 800a020:	f300 80c8 	bgt.w	800a1b4 <_dtoa_r+0x7bc>
 800a024:	2d00      	cmp	r5, #0
 800a026:	f000 80c1 	beq.w	800a1ac <_dtoa_r+0x7b4>
 800a02a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a02e:	9e05      	ldr	r6, [sp, #20]
 800a030:	461c      	mov	r4, r3
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	9b05      	ldr	r3, [sp, #20]
 800a036:	4413      	add	r3, r2
 800a038:	9305      	str	r3, [sp, #20]
 800a03a:	9b06      	ldr	r3, [sp, #24]
 800a03c:	2101      	movs	r1, #1
 800a03e:	4413      	add	r3, r2
 800a040:	4648      	mov	r0, r9
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	f000 fc6c 	bl	800a920 <__i2b>
 800a048:	9b04      	ldr	r3, [sp, #16]
 800a04a:	4605      	mov	r5, r0
 800a04c:	b166      	cbz	r6, 800a068 <_dtoa_r+0x670>
 800a04e:	9a06      	ldr	r2, [sp, #24]
 800a050:	2a00      	cmp	r2, #0
 800a052:	dd09      	ble.n	800a068 <_dtoa_r+0x670>
 800a054:	42b2      	cmp	r2, r6
 800a056:	9905      	ldr	r1, [sp, #20]
 800a058:	bfa8      	it	ge
 800a05a:	4632      	movge	r2, r6
 800a05c:	1a89      	subs	r1, r1, r2
 800a05e:	9105      	str	r1, [sp, #20]
 800a060:	9906      	ldr	r1, [sp, #24]
 800a062:	1ab6      	subs	r6, r6, r2
 800a064:	1a8a      	subs	r2, r1, r2
 800a066:	9206      	str	r2, [sp, #24]
 800a068:	b1fb      	cbz	r3, 800a0aa <_dtoa_r+0x6b2>
 800a06a:	9a08      	ldr	r2, [sp, #32]
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	f000 80bc 	beq.w	800a1ea <_dtoa_r+0x7f2>
 800a072:	b19c      	cbz	r4, 800a09c <_dtoa_r+0x6a4>
 800a074:	4629      	mov	r1, r5
 800a076:	4622      	mov	r2, r4
 800a078:	4648      	mov	r0, r9
 800a07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a07c:	f000 fd10 	bl	800aaa0 <__pow5mult>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	4601      	mov	r1, r0
 800a084:	4605      	mov	r5, r0
 800a086:	4648      	mov	r0, r9
 800a088:	f000 fc60 	bl	800a94c <__multiply>
 800a08c:	9901      	ldr	r1, [sp, #4]
 800a08e:	9004      	str	r0, [sp, #16]
 800a090:	4648      	mov	r0, r9
 800a092:	f000 fb47 	bl	800a724 <_Bfree>
 800a096:	9a04      	ldr	r2, [sp, #16]
 800a098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a09a:	9201      	str	r2, [sp, #4]
 800a09c:	1b1a      	subs	r2, r3, r4
 800a09e:	d004      	beq.n	800a0aa <_dtoa_r+0x6b2>
 800a0a0:	9901      	ldr	r1, [sp, #4]
 800a0a2:	4648      	mov	r0, r9
 800a0a4:	f000 fcfc 	bl	800aaa0 <__pow5mult>
 800a0a8:	9001      	str	r0, [sp, #4]
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	4648      	mov	r0, r9
 800a0ae:	f000 fc37 	bl	800a920 <__i2b>
 800a0b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 81d0 	beq.w	800a45c <_dtoa_r+0xa64>
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4648      	mov	r0, r9
 800a0c2:	f000 fced 	bl	800aaa0 <__pow5mult>
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	f300 8095 	bgt.w	800a1fa <_dtoa_r+0x802>
 800a0d0:	9b02      	ldr	r3, [sp, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 808b 	bne.w	800a1ee <_dtoa_r+0x7f6>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	f040 8087 	bne.w	800a1f2 <_dtoa_r+0x7fa>
 800a0e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a0e8:	0d12      	lsrs	r2, r2, #20
 800a0ea:	0512      	lsls	r2, r2, #20
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	f000 8082 	beq.w	800a1f6 <_dtoa_r+0x7fe>
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	9306      	str	r3, [sp, #24]
 800a0fe:	2301      	movs	r3, #1
 800a100:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 81af 	beq.w	800a468 <_dtoa_r+0xa70>
 800a10a:	6922      	ldr	r2, [r4, #16]
 800a10c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a110:	6910      	ldr	r0, [r2, #16]
 800a112:	f000 fbb9 	bl	800a888 <__hi0bits>
 800a116:	f1c0 0020 	rsb	r0, r0, #32
 800a11a:	9b06      	ldr	r3, [sp, #24]
 800a11c:	4418      	add	r0, r3
 800a11e:	f010 001f 	ands.w	r0, r0, #31
 800a122:	d076      	beq.n	800a212 <_dtoa_r+0x81a>
 800a124:	f1c0 0220 	rsb	r2, r0, #32
 800a128:	2a04      	cmp	r2, #4
 800a12a:	dd69      	ble.n	800a200 <_dtoa_r+0x808>
 800a12c:	9b05      	ldr	r3, [sp, #20]
 800a12e:	f1c0 001c 	rsb	r0, r0, #28
 800a132:	4403      	add	r3, r0
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	4406      	add	r6, r0
 800a13a:	4403      	add	r3, r0
 800a13c:	9306      	str	r3, [sp, #24]
 800a13e:	9b05      	ldr	r3, [sp, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	dd05      	ble.n	800a150 <_dtoa_r+0x758>
 800a144:	9901      	ldr	r1, [sp, #4]
 800a146:	461a      	mov	r2, r3
 800a148:	4648      	mov	r0, r9
 800a14a:	f000 fd03 	bl	800ab54 <__lshift>
 800a14e:	9001      	str	r0, [sp, #4]
 800a150:	9b06      	ldr	r3, [sp, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd05      	ble.n	800a162 <_dtoa_r+0x76a>
 800a156:	4621      	mov	r1, r4
 800a158:	461a      	mov	r2, r3
 800a15a:	4648      	mov	r0, r9
 800a15c:	f000 fcfa 	bl	800ab54 <__lshift>
 800a160:	4604      	mov	r4, r0
 800a162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a164:	2b00      	cmp	r3, #0
 800a166:	d056      	beq.n	800a216 <_dtoa_r+0x81e>
 800a168:	9801      	ldr	r0, [sp, #4]
 800a16a:	4621      	mov	r1, r4
 800a16c:	f000 fd5e 	bl	800ac2c <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	da50      	bge.n	800a216 <_dtoa_r+0x81e>
 800a174:	f108 33ff 	add.w	r3, r8, #4294967295
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	9901      	ldr	r1, [sp, #4]
 800a17c:	2300      	movs	r3, #0
 800a17e:	220a      	movs	r2, #10
 800a180:	4648      	mov	r0, r9
 800a182:	f000 faf1 	bl	800a768 <__multadd>
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	9001      	str	r0, [sp, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 816e 	beq.w	800a46c <_dtoa_r+0xa74>
 800a190:	4629      	mov	r1, r5
 800a192:	2300      	movs	r3, #0
 800a194:	220a      	movs	r2, #10
 800a196:	4648      	mov	r0, r9
 800a198:	f000 fae6 	bl	800a768 <__multadd>
 800a19c:	f1bb 0f00 	cmp.w	fp, #0
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	dc64      	bgt.n	800a26e <_dtoa_r+0x876>
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	dc3e      	bgt.n	800a228 <_dtoa_r+0x830>
 800a1aa:	e060      	b.n	800a26e <_dtoa_r+0x876>
 800a1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1b2:	e73c      	b.n	800a02e <_dtoa_r+0x636>
 800a1b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	bfbf      	itttt	lt
 800a1bc:	1ae2      	sublt	r2, r4, r3
 800a1be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1c0:	189b      	addlt	r3, r3, r2
 800a1c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a1c4:	bfae      	itee	ge
 800a1c6:	1b1c      	subge	r4, r3, r4
 800a1c8:	4623      	movlt	r3, r4
 800a1ca:	2400      	movlt	r4, #0
 800a1cc:	f1ba 0f00 	cmp.w	sl, #0
 800a1d0:	bfb5      	itete	lt
 800a1d2:	9a05      	ldrlt	r2, [sp, #20]
 800a1d4:	9e05      	ldrge	r6, [sp, #20]
 800a1d6:	eba2 060a 	sublt.w	r6, r2, sl
 800a1da:	4652      	movge	r2, sl
 800a1dc:	bfb8      	it	lt
 800a1de:	2200      	movlt	r2, #0
 800a1e0:	e727      	b.n	800a032 <_dtoa_r+0x63a>
 800a1e2:	9e05      	ldr	r6, [sp, #20]
 800a1e4:	9d08      	ldr	r5, [sp, #32]
 800a1e6:	461c      	mov	r4, r3
 800a1e8:	e730      	b.n	800a04c <_dtoa_r+0x654>
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	e758      	b.n	800a0a0 <_dtoa_r+0x6a8>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e786      	b.n	800a100 <_dtoa_r+0x708>
 800a1f2:	9b02      	ldr	r3, [sp, #8]
 800a1f4:	e784      	b.n	800a100 <_dtoa_r+0x708>
 800a1f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1f8:	e783      	b.n	800a102 <_dtoa_r+0x70a>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1fe:	e784      	b.n	800a10a <_dtoa_r+0x712>
 800a200:	d09d      	beq.n	800a13e <_dtoa_r+0x746>
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	321c      	adds	r2, #28
 800a206:	4413      	add	r3, r2
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	9b06      	ldr	r3, [sp, #24]
 800a20c:	4416      	add	r6, r2
 800a20e:	4413      	add	r3, r2
 800a210:	e794      	b.n	800a13c <_dtoa_r+0x744>
 800a212:	4602      	mov	r2, r0
 800a214:	e7f5      	b.n	800a202 <_dtoa_r+0x80a>
 800a216:	f1ba 0f00 	cmp.w	sl, #0
 800a21a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a21e:	46d3      	mov	fp, sl
 800a220:	dc21      	bgt.n	800a266 <_dtoa_r+0x86e>
 800a222:	9b07      	ldr	r3, [sp, #28]
 800a224:	2b02      	cmp	r3, #2
 800a226:	dd1e      	ble.n	800a266 <_dtoa_r+0x86e>
 800a228:	f1bb 0f00 	cmp.w	fp, #0
 800a22c:	f47f aeb7 	bne.w	8009f9e <_dtoa_r+0x5a6>
 800a230:	4621      	mov	r1, r4
 800a232:	465b      	mov	r3, fp
 800a234:	2205      	movs	r2, #5
 800a236:	4648      	mov	r0, r9
 800a238:	f000 fa96 	bl	800a768 <__multadd>
 800a23c:	4601      	mov	r1, r0
 800a23e:	4604      	mov	r4, r0
 800a240:	9801      	ldr	r0, [sp, #4]
 800a242:	f000 fcf3 	bl	800ac2c <__mcmp>
 800a246:	2800      	cmp	r0, #0
 800a248:	f77f aea9 	ble.w	8009f9e <_dtoa_r+0x5a6>
 800a24c:	463e      	mov	r6, r7
 800a24e:	2331      	movs	r3, #49	@ 0x31
 800a250:	f806 3b01 	strb.w	r3, [r6], #1
 800a254:	9b04      	ldr	r3, [sp, #16]
 800a256:	3301      	adds	r3, #1
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	e6a4      	b.n	8009fa6 <_dtoa_r+0x5ae>
 800a25c:	f8cd 8010 	str.w	r8, [sp, #16]
 800a260:	4654      	mov	r4, sl
 800a262:	4625      	mov	r5, r4
 800a264:	e7f2      	b.n	800a24c <_dtoa_r+0x854>
 800a266:	9b08      	ldr	r3, [sp, #32]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 8103 	beq.w	800a474 <_dtoa_r+0xa7c>
 800a26e:	2e00      	cmp	r6, #0
 800a270:	dd05      	ble.n	800a27e <_dtoa_r+0x886>
 800a272:	4629      	mov	r1, r5
 800a274:	4632      	mov	r2, r6
 800a276:	4648      	mov	r0, r9
 800a278:	f000 fc6c 	bl	800ab54 <__lshift>
 800a27c:	4605      	mov	r5, r0
 800a27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d058      	beq.n	800a336 <_dtoa_r+0x93e>
 800a284:	6869      	ldr	r1, [r5, #4]
 800a286:	4648      	mov	r0, r9
 800a288:	f000 fa0c 	bl	800a6a4 <_Balloc>
 800a28c:	4606      	mov	r6, r0
 800a28e:	b928      	cbnz	r0, 800a29c <_dtoa_r+0x8a4>
 800a290:	4b82      	ldr	r3, [pc, #520]	@ (800a49c <_dtoa_r+0xaa4>)
 800a292:	4602      	mov	r2, r0
 800a294:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a298:	f7ff bbc7 	b.w	8009a2a <_dtoa_r+0x32>
 800a29c:	692a      	ldr	r2, [r5, #16]
 800a29e:	3202      	adds	r2, #2
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	f105 010c 	add.w	r1, r5, #12
 800a2a6:	300c      	adds	r0, #12
 800a2a8:	f002 f8e4 	bl	800c474 <memcpy>
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4648      	mov	r0, r9
 800a2b2:	f000 fc4f 	bl	800ab54 <__lshift>
 800a2b6:	1c7b      	adds	r3, r7, #1
 800a2b8:	9305      	str	r3, [sp, #20]
 800a2ba:	eb07 030b 	add.w	r3, r7, fp
 800a2be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	46a8      	mov	r8, r5
 800a2c8:	9308      	str	r3, [sp, #32]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	9b05      	ldr	r3, [sp, #20]
 800a2ce:	9801      	ldr	r0, [sp, #4]
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2d6:	f7ff fb07 	bl	80098e8 <quorem>
 800a2da:	4641      	mov	r1, r8
 800a2dc:	9002      	str	r0, [sp, #8]
 800a2de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a2e2:	9801      	ldr	r0, [sp, #4]
 800a2e4:	f000 fca2 	bl	800ac2c <__mcmp>
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	9006      	str	r0, [sp, #24]
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4648      	mov	r0, r9
 800a2f0:	f000 fcb8 	bl	800ac64 <__mdiff>
 800a2f4:	68c2      	ldr	r2, [r0, #12]
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	b9fa      	cbnz	r2, 800a33a <_dtoa_r+0x942>
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	9801      	ldr	r0, [sp, #4]
 800a2fe:	f000 fc95 	bl	800ac2c <__mcmp>
 800a302:	4602      	mov	r2, r0
 800a304:	4631      	mov	r1, r6
 800a306:	4648      	mov	r0, r9
 800a308:	920a      	str	r2, [sp, #40]	@ 0x28
 800a30a:	f000 fa0b 	bl	800a724 <_Bfree>
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a312:	9e05      	ldr	r6, [sp, #20]
 800a314:	ea43 0102 	orr.w	r1, r3, r2
 800a318:	9b08      	ldr	r3, [sp, #32]
 800a31a:	4319      	orrs	r1, r3
 800a31c:	d10f      	bne.n	800a33e <_dtoa_r+0x946>
 800a31e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a322:	d028      	beq.n	800a376 <_dtoa_r+0x97e>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	dd02      	ble.n	800a330 <_dtoa_r+0x938>
 800a32a:	9b02      	ldr	r3, [sp, #8]
 800a32c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a330:	f88b a000 	strb.w	sl, [fp]
 800a334:	e639      	b.n	8009faa <_dtoa_r+0x5b2>
 800a336:	4628      	mov	r0, r5
 800a338:	e7bd      	b.n	800a2b6 <_dtoa_r+0x8be>
 800a33a:	2201      	movs	r2, #1
 800a33c:	e7e2      	b.n	800a304 <_dtoa_r+0x90c>
 800a33e:	9b06      	ldr	r3, [sp, #24]
 800a340:	2b00      	cmp	r3, #0
 800a342:	db04      	blt.n	800a34e <_dtoa_r+0x956>
 800a344:	9907      	ldr	r1, [sp, #28]
 800a346:	430b      	orrs	r3, r1
 800a348:	9908      	ldr	r1, [sp, #32]
 800a34a:	430b      	orrs	r3, r1
 800a34c:	d120      	bne.n	800a390 <_dtoa_r+0x998>
 800a34e:	2a00      	cmp	r2, #0
 800a350:	ddee      	ble.n	800a330 <_dtoa_r+0x938>
 800a352:	9901      	ldr	r1, [sp, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	4648      	mov	r0, r9
 800a358:	f000 fbfc 	bl	800ab54 <__lshift>
 800a35c:	4621      	mov	r1, r4
 800a35e:	9001      	str	r0, [sp, #4]
 800a360:	f000 fc64 	bl	800ac2c <__mcmp>
 800a364:	2800      	cmp	r0, #0
 800a366:	dc03      	bgt.n	800a370 <_dtoa_r+0x978>
 800a368:	d1e2      	bne.n	800a330 <_dtoa_r+0x938>
 800a36a:	f01a 0f01 	tst.w	sl, #1
 800a36e:	d0df      	beq.n	800a330 <_dtoa_r+0x938>
 800a370:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a374:	d1d9      	bne.n	800a32a <_dtoa_r+0x932>
 800a376:	2339      	movs	r3, #57	@ 0x39
 800a378:	f88b 3000 	strb.w	r3, [fp]
 800a37c:	4633      	mov	r3, r6
 800a37e:	461e      	mov	r6, r3
 800a380:	3b01      	subs	r3, #1
 800a382:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a386:	2a39      	cmp	r2, #57	@ 0x39
 800a388:	d053      	beq.n	800a432 <_dtoa_r+0xa3a>
 800a38a:	3201      	adds	r2, #1
 800a38c:	701a      	strb	r2, [r3, #0]
 800a38e:	e60c      	b.n	8009faa <_dtoa_r+0x5b2>
 800a390:	2a00      	cmp	r2, #0
 800a392:	dd07      	ble.n	800a3a4 <_dtoa_r+0x9ac>
 800a394:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a398:	d0ed      	beq.n	800a376 <_dtoa_r+0x97e>
 800a39a:	f10a 0301 	add.w	r3, sl, #1
 800a39e:	f88b 3000 	strb.w	r3, [fp]
 800a3a2:	e602      	b.n	8009faa <_dtoa_r+0x5b2>
 800a3a4:	9b05      	ldr	r3, [sp, #20]
 800a3a6:	9a05      	ldr	r2, [sp, #20]
 800a3a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d029      	beq.n	800a406 <_dtoa_r+0xa0e>
 800a3b2:	9901      	ldr	r1, [sp, #4]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	220a      	movs	r2, #10
 800a3b8:	4648      	mov	r0, r9
 800a3ba:	f000 f9d5 	bl	800a768 <__multadd>
 800a3be:	45a8      	cmp	r8, r5
 800a3c0:	9001      	str	r0, [sp, #4]
 800a3c2:	f04f 0300 	mov.w	r3, #0
 800a3c6:	f04f 020a 	mov.w	r2, #10
 800a3ca:	4641      	mov	r1, r8
 800a3cc:	4648      	mov	r0, r9
 800a3ce:	d107      	bne.n	800a3e0 <_dtoa_r+0x9e8>
 800a3d0:	f000 f9ca 	bl	800a768 <__multadd>
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	9b05      	ldr	r3, [sp, #20]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	e775      	b.n	800a2cc <_dtoa_r+0x8d4>
 800a3e0:	f000 f9c2 	bl	800a768 <__multadd>
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f000 f9bb 	bl	800a768 <__multadd>
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	e7f0      	b.n	800a3d8 <_dtoa_r+0x9e0>
 800a3f6:	f1bb 0f00 	cmp.w	fp, #0
 800a3fa:	bfcc      	ite	gt
 800a3fc:	465e      	movgt	r6, fp
 800a3fe:	2601      	movle	r6, #1
 800a400:	443e      	add	r6, r7
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	9901      	ldr	r1, [sp, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	4648      	mov	r0, r9
 800a40c:	f000 fba2 	bl	800ab54 <__lshift>
 800a410:	4621      	mov	r1, r4
 800a412:	9001      	str	r0, [sp, #4]
 800a414:	f000 fc0a 	bl	800ac2c <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	dcaf      	bgt.n	800a37c <_dtoa_r+0x984>
 800a41c:	d102      	bne.n	800a424 <_dtoa_r+0xa2c>
 800a41e:	f01a 0f01 	tst.w	sl, #1
 800a422:	d1ab      	bne.n	800a37c <_dtoa_r+0x984>
 800a424:	4633      	mov	r3, r6
 800a426:	461e      	mov	r6, r3
 800a428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a42c:	2a30      	cmp	r2, #48	@ 0x30
 800a42e:	d0fa      	beq.n	800a426 <_dtoa_r+0xa2e>
 800a430:	e5bb      	b.n	8009faa <_dtoa_r+0x5b2>
 800a432:	429f      	cmp	r7, r3
 800a434:	d1a3      	bne.n	800a37e <_dtoa_r+0x986>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	3301      	adds	r3, #1
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	2331      	movs	r3, #49	@ 0x31
 800a43e:	703b      	strb	r3, [r7, #0]
 800a440:	e5b3      	b.n	8009faa <_dtoa_r+0x5b2>
 800a442:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a444:	4f16      	ldr	r7, [pc, #88]	@ (800a4a0 <_dtoa_r+0xaa8>)
 800a446:	b11b      	cbz	r3, 800a450 <_dtoa_r+0xa58>
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	4638      	mov	r0, r7
 800a452:	b011      	add	sp, #68	@ 0x44
 800a454:	ecbd 8b02 	vpop	{d8}
 800a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45c:	9b07      	ldr	r3, [sp, #28]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	f77f ae36 	ble.w	800a0d0 <_dtoa_r+0x6d8>
 800a464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a466:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a468:	2001      	movs	r0, #1
 800a46a:	e656      	b.n	800a11a <_dtoa_r+0x722>
 800a46c:	f1bb 0f00 	cmp.w	fp, #0
 800a470:	f77f aed7 	ble.w	800a222 <_dtoa_r+0x82a>
 800a474:	463e      	mov	r6, r7
 800a476:	9801      	ldr	r0, [sp, #4]
 800a478:	4621      	mov	r1, r4
 800a47a:	f7ff fa35 	bl	80098e8 <quorem>
 800a47e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a482:	f806 ab01 	strb.w	sl, [r6], #1
 800a486:	1bf2      	subs	r2, r6, r7
 800a488:	4593      	cmp	fp, r2
 800a48a:	ddb4      	ble.n	800a3f6 <_dtoa_r+0x9fe>
 800a48c:	9901      	ldr	r1, [sp, #4]
 800a48e:	2300      	movs	r3, #0
 800a490:	220a      	movs	r2, #10
 800a492:	4648      	mov	r0, r9
 800a494:	f000 f968 	bl	800a768 <__multadd>
 800a498:	9001      	str	r0, [sp, #4]
 800a49a:	e7ec      	b.n	800a476 <_dtoa_r+0xa7e>
 800a49c:	0800d47d 	.word	0x0800d47d
 800a4a0:	0800d401 	.word	0x0800d401

0800a4a4 <_free_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d041      	beq.n	800a530 <_free_r+0x8c>
 800a4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b0:	1f0c      	subs	r4, r1, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bfb8      	it	lt
 800a4b6:	18e4      	addlt	r4, r4, r3
 800a4b8:	f000 f8e8 	bl	800a68c <__malloc_lock>
 800a4bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a534 <_free_r+0x90>)
 800a4be:	6813      	ldr	r3, [r2, #0]
 800a4c0:	b933      	cbnz	r3, 800a4d0 <_free_r+0x2c>
 800a4c2:	6063      	str	r3, [r4, #4]
 800a4c4:	6014      	str	r4, [r2, #0]
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4cc:	f000 b8e4 	b.w	800a698 <__malloc_unlock>
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	d908      	bls.n	800a4e6 <_free_r+0x42>
 800a4d4:	6820      	ldr	r0, [r4, #0]
 800a4d6:	1821      	adds	r1, r4, r0
 800a4d8:	428b      	cmp	r3, r1
 800a4da:	bf01      	itttt	eq
 800a4dc:	6819      	ldreq	r1, [r3, #0]
 800a4de:	685b      	ldreq	r3, [r3, #4]
 800a4e0:	1809      	addeq	r1, r1, r0
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	e7ed      	b.n	800a4c2 <_free_r+0x1e>
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	b10b      	cbz	r3, 800a4f0 <_free_r+0x4c>
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d9fa      	bls.n	800a4e6 <_free_r+0x42>
 800a4f0:	6811      	ldr	r1, [r2, #0]
 800a4f2:	1850      	adds	r0, r2, r1
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d10b      	bne.n	800a510 <_free_r+0x6c>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	4401      	add	r1, r0
 800a4fc:	1850      	adds	r0, r2, r1
 800a4fe:	4283      	cmp	r3, r0
 800a500:	6011      	str	r1, [r2, #0]
 800a502:	d1e0      	bne.n	800a4c6 <_free_r+0x22>
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	6053      	str	r3, [r2, #4]
 800a50a:	4408      	add	r0, r1
 800a50c:	6010      	str	r0, [r2, #0]
 800a50e:	e7da      	b.n	800a4c6 <_free_r+0x22>
 800a510:	d902      	bls.n	800a518 <_free_r+0x74>
 800a512:	230c      	movs	r3, #12
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	e7d6      	b.n	800a4c6 <_free_r+0x22>
 800a518:	6820      	ldr	r0, [r4, #0]
 800a51a:	1821      	adds	r1, r4, r0
 800a51c:	428b      	cmp	r3, r1
 800a51e:	bf04      	itt	eq
 800a520:	6819      	ldreq	r1, [r3, #0]
 800a522:	685b      	ldreq	r3, [r3, #4]
 800a524:	6063      	str	r3, [r4, #4]
 800a526:	bf04      	itt	eq
 800a528:	1809      	addeq	r1, r1, r0
 800a52a:	6021      	streq	r1, [r4, #0]
 800a52c:	6054      	str	r4, [r2, #4]
 800a52e:	e7ca      	b.n	800a4c6 <_free_r+0x22>
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	24000b50 	.word	0x24000b50

0800a538 <malloc>:
 800a538:	4b02      	ldr	r3, [pc, #8]	@ (800a544 <malloc+0xc>)
 800a53a:	4601      	mov	r1, r0
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f000 b825 	b.w	800a58c <_malloc_r>
 800a542:	bf00      	nop
 800a544:	2400001c 	.word	0x2400001c

0800a548 <sbrk_aligned>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4e0f      	ldr	r6, [pc, #60]	@ (800a588 <sbrk_aligned+0x40>)
 800a54c:	460c      	mov	r4, r1
 800a54e:	6831      	ldr	r1, [r6, #0]
 800a550:	4605      	mov	r5, r0
 800a552:	b911      	cbnz	r1, 800a55a <sbrk_aligned+0x12>
 800a554:	f001 ff7e 	bl	800c454 <_sbrk_r>
 800a558:	6030      	str	r0, [r6, #0]
 800a55a:	4621      	mov	r1, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f001 ff79 	bl	800c454 <_sbrk_r>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	d103      	bne.n	800a56e <sbrk_aligned+0x26>
 800a566:	f04f 34ff 	mov.w	r4, #4294967295
 800a56a:	4620      	mov	r0, r4
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	1cc4      	adds	r4, r0, #3
 800a570:	f024 0403 	bic.w	r4, r4, #3
 800a574:	42a0      	cmp	r0, r4
 800a576:	d0f8      	beq.n	800a56a <sbrk_aligned+0x22>
 800a578:	1a21      	subs	r1, r4, r0
 800a57a:	4628      	mov	r0, r5
 800a57c:	f001 ff6a 	bl	800c454 <_sbrk_r>
 800a580:	3001      	adds	r0, #1
 800a582:	d1f2      	bne.n	800a56a <sbrk_aligned+0x22>
 800a584:	e7ef      	b.n	800a566 <sbrk_aligned+0x1e>
 800a586:	bf00      	nop
 800a588:	24000b4c 	.word	0x24000b4c

0800a58c <_malloc_r>:
 800a58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a590:	1ccd      	adds	r5, r1, #3
 800a592:	f025 0503 	bic.w	r5, r5, #3
 800a596:	3508      	adds	r5, #8
 800a598:	2d0c      	cmp	r5, #12
 800a59a:	bf38      	it	cc
 800a59c:	250c      	movcc	r5, #12
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	db01      	blt.n	800a5a8 <_malloc_r+0x1c>
 800a5a4:	42a9      	cmp	r1, r5
 800a5a6:	d904      	bls.n	800a5b2 <_malloc_r+0x26>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	6033      	str	r3, [r6, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a688 <_malloc_r+0xfc>
 800a5b6:	f000 f869 	bl	800a68c <__malloc_lock>
 800a5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a5be:	461c      	mov	r4, r3
 800a5c0:	bb44      	cbnz	r4, 800a614 <_malloc_r+0x88>
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7ff ffbf 	bl	800a548 <sbrk_aligned>
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	d158      	bne.n	800a682 <_malloc_r+0xf6>
 800a5d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a5d4:	4627      	mov	r7, r4
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	d143      	bne.n	800a662 <_malloc_r+0xd6>
 800a5da:	2c00      	cmp	r4, #0
 800a5dc:	d04b      	beq.n	800a676 <_malloc_r+0xea>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	eb04 0903 	add.w	r9, r4, r3
 800a5e8:	f001 ff34 	bl	800c454 <_sbrk_r>
 800a5ec:	4581      	cmp	r9, r0
 800a5ee:	d142      	bne.n	800a676 <_malloc_r+0xea>
 800a5f0:	6821      	ldr	r1, [r4, #0]
 800a5f2:	1a6d      	subs	r5, r5, r1
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ffa6 	bl	800a548 <sbrk_aligned>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d03a      	beq.n	800a676 <_malloc_r+0xea>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	442b      	add	r3, r5
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	f8d8 3000 	ldr.w	r3, [r8]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	bb62      	cbnz	r2, 800a668 <_malloc_r+0xdc>
 800a60e:	f8c8 7000 	str.w	r7, [r8]
 800a612:	e00f      	b.n	800a634 <_malloc_r+0xa8>
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	1b52      	subs	r2, r2, r5
 800a618:	d420      	bmi.n	800a65c <_malloc_r+0xd0>
 800a61a:	2a0b      	cmp	r2, #11
 800a61c:	d917      	bls.n	800a64e <_malloc_r+0xc2>
 800a61e:	1961      	adds	r1, r4, r5
 800a620:	42a3      	cmp	r3, r4
 800a622:	6025      	str	r5, [r4, #0]
 800a624:	bf18      	it	ne
 800a626:	6059      	strne	r1, [r3, #4]
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	bf08      	it	eq
 800a62c:	f8c8 1000 	streq.w	r1, [r8]
 800a630:	5162      	str	r2, [r4, r5]
 800a632:	604b      	str	r3, [r1, #4]
 800a634:	4630      	mov	r0, r6
 800a636:	f000 f82f 	bl	800a698 <__malloc_unlock>
 800a63a:	f104 000b 	add.w	r0, r4, #11
 800a63e:	1d23      	adds	r3, r4, #4
 800a640:	f020 0007 	bic.w	r0, r0, #7
 800a644:	1ac2      	subs	r2, r0, r3
 800a646:	bf1c      	itt	ne
 800a648:	1a1b      	subne	r3, r3, r0
 800a64a:	50a3      	strne	r3, [r4, r2]
 800a64c:	e7af      	b.n	800a5ae <_malloc_r+0x22>
 800a64e:	6862      	ldr	r2, [r4, #4]
 800a650:	42a3      	cmp	r3, r4
 800a652:	bf0c      	ite	eq
 800a654:	f8c8 2000 	streq.w	r2, [r8]
 800a658:	605a      	strne	r2, [r3, #4]
 800a65a:	e7eb      	b.n	800a634 <_malloc_r+0xa8>
 800a65c:	4623      	mov	r3, r4
 800a65e:	6864      	ldr	r4, [r4, #4]
 800a660:	e7ae      	b.n	800a5c0 <_malloc_r+0x34>
 800a662:	463c      	mov	r4, r7
 800a664:	687f      	ldr	r7, [r7, #4]
 800a666:	e7b6      	b.n	800a5d6 <_malloc_r+0x4a>
 800a668:	461a      	mov	r2, r3
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	42a3      	cmp	r3, r4
 800a66e:	d1fb      	bne.n	800a668 <_malloc_r+0xdc>
 800a670:	2300      	movs	r3, #0
 800a672:	6053      	str	r3, [r2, #4]
 800a674:	e7de      	b.n	800a634 <_malloc_r+0xa8>
 800a676:	230c      	movs	r3, #12
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	4630      	mov	r0, r6
 800a67c:	f000 f80c 	bl	800a698 <__malloc_unlock>
 800a680:	e794      	b.n	800a5ac <_malloc_r+0x20>
 800a682:	6005      	str	r5, [r0, #0]
 800a684:	e7d6      	b.n	800a634 <_malloc_r+0xa8>
 800a686:	bf00      	nop
 800a688:	24000b50 	.word	0x24000b50

0800a68c <__malloc_lock>:
 800a68c:	4801      	ldr	r0, [pc, #4]	@ (800a694 <__malloc_lock+0x8>)
 800a68e:	f7ff b922 	b.w	80098d6 <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	24000b48 	.word	0x24000b48

0800a698 <__malloc_unlock>:
 800a698:	4801      	ldr	r0, [pc, #4]	@ (800a6a0 <__malloc_unlock+0x8>)
 800a69a:	f7ff b91d 	b.w	80098d8 <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	24000b48 	.word	0x24000b48

0800a6a4 <_Balloc>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	69c6      	ldr	r6, [r0, #28]
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	b976      	cbnz	r6, 800a6cc <_Balloc+0x28>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	f7ff ff42 	bl	800a538 <malloc>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	61e0      	str	r0, [r4, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_Balloc+0x20>
 800a6ba:	4b18      	ldr	r3, [pc, #96]	@ (800a71c <_Balloc+0x78>)
 800a6bc:	4818      	ldr	r0, [pc, #96]	@ (800a720 <_Balloc+0x7c>)
 800a6be:	216b      	movs	r1, #107	@ 0x6b
 800a6c0:	f001 feee 	bl	800c4a0 <__assert_func>
 800a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c8:	6006      	str	r6, [r0, #0]
 800a6ca:	60c6      	str	r6, [r0, #12]
 800a6cc:	69e6      	ldr	r6, [r4, #28]
 800a6ce:	68f3      	ldr	r3, [r6, #12]
 800a6d0:	b183      	cbz	r3, 800a6f4 <_Balloc+0x50>
 800a6d2:	69e3      	ldr	r3, [r4, #28]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6da:	b9b8      	cbnz	r0, 800a70c <_Balloc+0x68>
 800a6dc:	2101      	movs	r1, #1
 800a6de:	fa01 f605 	lsl.w	r6, r1, r5
 800a6e2:	1d72      	adds	r2, r6, #5
 800a6e4:	0092      	lsls	r2, r2, #2
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f001 fef8 	bl	800c4dc <_calloc_r>
 800a6ec:	b160      	cbz	r0, 800a708 <_Balloc+0x64>
 800a6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6f2:	e00e      	b.n	800a712 <_Balloc+0x6e>
 800a6f4:	2221      	movs	r2, #33	@ 0x21
 800a6f6:	2104      	movs	r1, #4
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f001 feef 	bl	800c4dc <_calloc_r>
 800a6fe:	69e3      	ldr	r3, [r4, #28]
 800a700:	60f0      	str	r0, [r6, #12]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e4      	bne.n	800a6d2 <_Balloc+0x2e>
 800a708:	2000      	movs	r0, #0
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	6802      	ldr	r2, [r0, #0]
 800a70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a712:	2300      	movs	r3, #0
 800a714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a718:	e7f7      	b.n	800a70a <_Balloc+0x66>
 800a71a:	bf00      	nop
 800a71c:	0800d40e 	.word	0x0800d40e
 800a720:	0800d48e 	.word	0x0800d48e

0800a724 <_Bfree>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	69c6      	ldr	r6, [r0, #28]
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b976      	cbnz	r6, 800a74c <_Bfree+0x28>
 800a72e:	2010      	movs	r0, #16
 800a730:	f7ff ff02 	bl	800a538 <malloc>
 800a734:	4602      	mov	r2, r0
 800a736:	61e8      	str	r0, [r5, #28]
 800a738:	b920      	cbnz	r0, 800a744 <_Bfree+0x20>
 800a73a:	4b09      	ldr	r3, [pc, #36]	@ (800a760 <_Bfree+0x3c>)
 800a73c:	4809      	ldr	r0, [pc, #36]	@ (800a764 <_Bfree+0x40>)
 800a73e:	218f      	movs	r1, #143	@ 0x8f
 800a740:	f001 feae 	bl	800c4a0 <__assert_func>
 800a744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a748:	6006      	str	r6, [r0, #0]
 800a74a:	60c6      	str	r6, [r0, #12]
 800a74c:	b13c      	cbz	r4, 800a75e <_Bfree+0x3a>
 800a74e:	69eb      	ldr	r3, [r5, #28]
 800a750:	6862      	ldr	r2, [r4, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a758:	6021      	str	r1, [r4, #0]
 800a75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	0800d40e 	.word	0x0800d40e
 800a764:	0800d48e 	.word	0x0800d48e

0800a768 <__multadd>:
 800a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	690d      	ldr	r5, [r1, #16]
 800a76e:	4607      	mov	r7, r0
 800a770:	460c      	mov	r4, r1
 800a772:	461e      	mov	r6, r3
 800a774:	f101 0c14 	add.w	ip, r1, #20
 800a778:	2000      	movs	r0, #0
 800a77a:	f8dc 3000 	ldr.w	r3, [ip]
 800a77e:	b299      	uxth	r1, r3
 800a780:	fb02 6101 	mla	r1, r2, r1, r6
 800a784:	0c1e      	lsrs	r6, r3, #16
 800a786:	0c0b      	lsrs	r3, r1, #16
 800a788:	fb02 3306 	mla	r3, r2, r6, r3
 800a78c:	b289      	uxth	r1, r1
 800a78e:	3001      	adds	r0, #1
 800a790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a794:	4285      	cmp	r5, r0
 800a796:	f84c 1b04 	str.w	r1, [ip], #4
 800a79a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a79e:	dcec      	bgt.n	800a77a <__multadd+0x12>
 800a7a0:	b30e      	cbz	r6, 800a7e6 <__multadd+0x7e>
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	dc19      	bgt.n	800a7dc <__multadd+0x74>
 800a7a8:	6861      	ldr	r1, [r4, #4]
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	3101      	adds	r1, #1
 800a7ae:	f7ff ff79 	bl	800a6a4 <_Balloc>
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	b928      	cbnz	r0, 800a7c2 <__multadd+0x5a>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ec <__multadd+0x84>)
 800a7ba:	480d      	ldr	r0, [pc, #52]	@ (800a7f0 <__multadd+0x88>)
 800a7bc:	21ba      	movs	r1, #186	@ 0xba
 800a7be:	f001 fe6f 	bl	800c4a0 <__assert_func>
 800a7c2:	6922      	ldr	r2, [r4, #16]
 800a7c4:	3202      	adds	r2, #2
 800a7c6:	f104 010c 	add.w	r1, r4, #12
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	300c      	adds	r0, #12
 800a7ce:	f001 fe51 	bl	800c474 <memcpy>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff ffa5 	bl	800a724 <_Bfree>
 800a7da:	4644      	mov	r4, r8
 800a7dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	615e      	str	r6, [r3, #20]
 800a7e4:	6125      	str	r5, [r4, #16]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	0800d47d 	.word	0x0800d47d
 800a7f0:	0800d48e 	.word	0x0800d48e

0800a7f4 <__s2b>:
 800a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	4615      	mov	r5, r2
 800a7fc:	461f      	mov	r7, r3
 800a7fe:	2209      	movs	r2, #9
 800a800:	3308      	adds	r3, #8
 800a802:	4606      	mov	r6, r0
 800a804:	fb93 f3f2 	sdiv	r3, r3, r2
 800a808:	2100      	movs	r1, #0
 800a80a:	2201      	movs	r2, #1
 800a80c:	429a      	cmp	r2, r3
 800a80e:	db09      	blt.n	800a824 <__s2b+0x30>
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff ff47 	bl	800a6a4 <_Balloc>
 800a816:	b940      	cbnz	r0, 800a82a <__s2b+0x36>
 800a818:	4602      	mov	r2, r0
 800a81a:	4b19      	ldr	r3, [pc, #100]	@ (800a880 <__s2b+0x8c>)
 800a81c:	4819      	ldr	r0, [pc, #100]	@ (800a884 <__s2b+0x90>)
 800a81e:	21d3      	movs	r1, #211	@ 0xd3
 800a820:	f001 fe3e 	bl	800c4a0 <__assert_func>
 800a824:	0052      	lsls	r2, r2, #1
 800a826:	3101      	adds	r1, #1
 800a828:	e7f0      	b.n	800a80c <__s2b+0x18>
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	6143      	str	r3, [r0, #20]
 800a82e:	2d09      	cmp	r5, #9
 800a830:	f04f 0301 	mov.w	r3, #1
 800a834:	6103      	str	r3, [r0, #16]
 800a836:	dd16      	ble.n	800a866 <__s2b+0x72>
 800a838:	f104 0909 	add.w	r9, r4, #9
 800a83c:	46c8      	mov	r8, r9
 800a83e:	442c      	add	r4, r5
 800a840:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a844:	4601      	mov	r1, r0
 800a846:	3b30      	subs	r3, #48	@ 0x30
 800a848:	220a      	movs	r2, #10
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7ff ff8c 	bl	800a768 <__multadd>
 800a850:	45a0      	cmp	r8, r4
 800a852:	d1f5      	bne.n	800a840 <__s2b+0x4c>
 800a854:	f1a5 0408 	sub.w	r4, r5, #8
 800a858:	444c      	add	r4, r9
 800a85a:	1b2d      	subs	r5, r5, r4
 800a85c:	1963      	adds	r3, r4, r5
 800a85e:	42bb      	cmp	r3, r7
 800a860:	db04      	blt.n	800a86c <__s2b+0x78>
 800a862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a866:	340a      	adds	r4, #10
 800a868:	2509      	movs	r5, #9
 800a86a:	e7f6      	b.n	800a85a <__s2b+0x66>
 800a86c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a870:	4601      	mov	r1, r0
 800a872:	3b30      	subs	r3, #48	@ 0x30
 800a874:	220a      	movs	r2, #10
 800a876:	4630      	mov	r0, r6
 800a878:	f7ff ff76 	bl	800a768 <__multadd>
 800a87c:	e7ee      	b.n	800a85c <__s2b+0x68>
 800a87e:	bf00      	nop
 800a880:	0800d47d 	.word	0x0800d47d
 800a884:	0800d48e 	.word	0x0800d48e

0800a888 <__hi0bits>:
 800a888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a88c:	4603      	mov	r3, r0
 800a88e:	bf36      	itet	cc
 800a890:	0403      	lslcc	r3, r0, #16
 800a892:	2000      	movcs	r0, #0
 800a894:	2010      	movcc	r0, #16
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a89a:	bf3c      	itt	cc
 800a89c:	021b      	lslcc	r3, r3, #8
 800a89e:	3008      	addcc	r0, #8
 800a8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a4:	bf3c      	itt	cc
 800a8a6:	011b      	lslcc	r3, r3, #4
 800a8a8:	3004      	addcc	r0, #4
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ae:	bf3c      	itt	cc
 800a8b0:	009b      	lslcc	r3, r3, #2
 800a8b2:	3002      	addcc	r0, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db05      	blt.n	800a8c4 <__hi0bits+0x3c>
 800a8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	bf08      	it	eq
 800a8c2:	2020      	moveq	r0, #32
 800a8c4:	4770      	bx	lr

0800a8c6 <__lo0bits>:
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f013 0007 	ands.w	r0, r3, #7
 800a8ce:	d00b      	beq.n	800a8e8 <__lo0bits+0x22>
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d421      	bmi.n	800a918 <__lo0bits+0x52>
 800a8d4:	0798      	lsls	r0, r3, #30
 800a8d6:	bf49      	itett	mi
 800a8d8:	085b      	lsrmi	r3, r3, #1
 800a8da:	089b      	lsrpl	r3, r3, #2
 800a8dc:	2001      	movmi	r0, #1
 800a8de:	6013      	strmi	r3, [r2, #0]
 800a8e0:	bf5c      	itt	pl
 800a8e2:	6013      	strpl	r3, [r2, #0]
 800a8e4:	2002      	movpl	r0, #2
 800a8e6:	4770      	bx	lr
 800a8e8:	b299      	uxth	r1, r3
 800a8ea:	b909      	cbnz	r1, 800a8f0 <__lo0bits+0x2a>
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	b909      	cbnz	r1, 800a8f8 <__lo0bits+0x32>
 800a8f4:	3008      	adds	r0, #8
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	bf04      	itt	eq
 800a8fc:	091b      	lsreq	r3, r3, #4
 800a8fe:	3004      	addeq	r0, #4
 800a900:	0799      	lsls	r1, r3, #30
 800a902:	bf04      	itt	eq
 800a904:	089b      	lsreq	r3, r3, #2
 800a906:	3002      	addeq	r0, #2
 800a908:	07d9      	lsls	r1, r3, #31
 800a90a:	d403      	bmi.n	800a914 <__lo0bits+0x4e>
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	f100 0001 	add.w	r0, r0, #1
 800a912:	d003      	beq.n	800a91c <__lo0bits+0x56>
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4770      	bx	lr
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	2020      	movs	r0, #32
 800a91e:	4770      	bx	lr

0800a920 <__i2b>:
 800a920:	b510      	push	{r4, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	2101      	movs	r1, #1
 800a926:	f7ff febd 	bl	800a6a4 <_Balloc>
 800a92a:	4602      	mov	r2, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__i2b+0x1a>
 800a92e:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <__i2b+0x24>)
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <__i2b+0x28>)
 800a932:	f240 1145 	movw	r1, #325	@ 0x145
 800a936:	f001 fdb3 	bl	800c4a0 <__assert_func>
 800a93a:	2301      	movs	r3, #1
 800a93c:	6144      	str	r4, [r0, #20]
 800a93e:	6103      	str	r3, [r0, #16]
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800d47d 	.word	0x0800d47d
 800a948:	0800d48e 	.word	0x0800d48e

0800a94c <__multiply>:
 800a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4614      	mov	r4, r2
 800a952:	690a      	ldr	r2, [r1, #16]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	bfa8      	it	ge
 800a95a:	4623      	movge	r3, r4
 800a95c:	460f      	mov	r7, r1
 800a95e:	bfa4      	itt	ge
 800a960:	460c      	movge	r4, r1
 800a962:	461f      	movge	r7, r3
 800a964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a968:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a96c:	68a3      	ldr	r3, [r4, #8]
 800a96e:	6861      	ldr	r1, [r4, #4]
 800a970:	eb0a 0609 	add.w	r6, sl, r9
 800a974:	42b3      	cmp	r3, r6
 800a976:	b085      	sub	sp, #20
 800a978:	bfb8      	it	lt
 800a97a:	3101      	addlt	r1, #1
 800a97c:	f7ff fe92 	bl	800a6a4 <_Balloc>
 800a980:	b930      	cbnz	r0, 800a990 <__multiply+0x44>
 800a982:	4602      	mov	r2, r0
 800a984:	4b44      	ldr	r3, [pc, #272]	@ (800aa98 <__multiply+0x14c>)
 800a986:	4845      	ldr	r0, [pc, #276]	@ (800aa9c <__multiply+0x150>)
 800a988:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a98c:	f001 fd88 	bl	800c4a0 <__assert_func>
 800a990:	f100 0514 	add.w	r5, r0, #20
 800a994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a998:	462b      	mov	r3, r5
 800a99a:	2200      	movs	r2, #0
 800a99c:	4543      	cmp	r3, r8
 800a99e:	d321      	bcc.n	800a9e4 <__multiply+0x98>
 800a9a0:	f107 0114 	add.w	r1, r7, #20
 800a9a4:	f104 0214 	add.w	r2, r4, #20
 800a9a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	1b13      	subs	r3, r2, r4
 800a9b4:	3b15      	subs	r3, #21
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	f104 0715 	add.w	r7, r4, #21
 800a9c0:	42ba      	cmp	r2, r7
 800a9c2:	bf38      	it	cc
 800a9c4:	2304      	movcc	r3, #4
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	9b02      	ldr	r3, [sp, #8]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	d80c      	bhi.n	800a9ea <__multiply+0x9e>
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	dd03      	ble.n	800a9dc <__multiply+0x90>
 800a9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d05b      	beq.n	800aa94 <__multiply+0x148>
 800a9dc:	6106      	str	r6, [r0, #16]
 800a9de:	b005      	add	sp, #20
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	f843 2b04 	str.w	r2, [r3], #4
 800a9e8:	e7d8      	b.n	800a99c <__multiply+0x50>
 800a9ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ee:	f1ba 0f00 	cmp.w	sl, #0
 800a9f2:	d024      	beq.n	800aa3e <__multiply+0xf2>
 800a9f4:	f104 0e14 	add.w	lr, r4, #20
 800a9f8:	46a9      	mov	r9, r5
 800a9fa:	f04f 0c00 	mov.w	ip, #0
 800a9fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa02:	f8d9 3000 	ldr.w	r3, [r9]
 800aa06:	fa1f fb87 	uxth.w	fp, r7
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa14:	f8d9 7000 	ldr.w	r7, [r9]
 800aa18:	4463      	add	r3, ip
 800aa1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa2c:	4572      	cmp	r2, lr
 800aa2e:	f849 3b04 	str.w	r3, [r9], #4
 800aa32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa36:	d8e2      	bhi.n	800a9fe <__multiply+0xb2>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	f845 c003 	str.w	ip, [r5, r3]
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa44:	3104      	adds	r1, #4
 800aa46:	f1b9 0f00 	cmp.w	r9, #0
 800aa4a:	d021      	beq.n	800aa90 <__multiply+0x144>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	f104 0c14 	add.w	ip, r4, #20
 800aa52:	46ae      	mov	lr, r5
 800aa54:	f04f 0a00 	mov.w	sl, #0
 800aa58:	f8bc b000 	ldrh.w	fp, [ip]
 800aa5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa60:	fb09 770b 	mla	r7, r9, fp, r7
 800aa64:	4457      	add	r7, sl
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa6c:	f84e 3b04 	str.w	r3, [lr], #4
 800aa70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa78:	f8be 3000 	ldrh.w	r3, [lr]
 800aa7c:	fb09 330a 	mla	r3, r9, sl, r3
 800aa80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa84:	4562      	cmp	r2, ip
 800aa86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa8a:	d8e5      	bhi.n	800aa58 <__multiply+0x10c>
 800aa8c:	9f01      	ldr	r7, [sp, #4]
 800aa8e:	51eb      	str	r3, [r5, r7]
 800aa90:	3504      	adds	r5, #4
 800aa92:	e799      	b.n	800a9c8 <__multiply+0x7c>
 800aa94:	3e01      	subs	r6, #1
 800aa96:	e79b      	b.n	800a9d0 <__multiply+0x84>
 800aa98:	0800d47d 	.word	0x0800d47d
 800aa9c:	0800d48e 	.word	0x0800d48e

0800aaa0 <__pow5mult>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	f012 0203 	ands.w	r2, r2, #3
 800aaaa:	4607      	mov	r7, r0
 800aaac:	460e      	mov	r6, r1
 800aaae:	d007      	beq.n	800aac0 <__pow5mult+0x20>
 800aab0:	4c25      	ldr	r4, [pc, #148]	@ (800ab48 <__pow5mult+0xa8>)
 800aab2:	3a01      	subs	r2, #1
 800aab4:	2300      	movs	r3, #0
 800aab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaba:	f7ff fe55 	bl	800a768 <__multadd>
 800aabe:	4606      	mov	r6, r0
 800aac0:	10ad      	asrs	r5, r5, #2
 800aac2:	d03d      	beq.n	800ab40 <__pow5mult+0xa0>
 800aac4:	69fc      	ldr	r4, [r7, #28]
 800aac6:	b97c      	cbnz	r4, 800aae8 <__pow5mult+0x48>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f7ff fd35 	bl	800a538 <malloc>
 800aace:	4602      	mov	r2, r0
 800aad0:	61f8      	str	r0, [r7, #28]
 800aad2:	b928      	cbnz	r0, 800aae0 <__pow5mult+0x40>
 800aad4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <__pow5mult+0xac>)
 800aad6:	481e      	ldr	r0, [pc, #120]	@ (800ab50 <__pow5mult+0xb0>)
 800aad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aadc:	f001 fce0 	bl	800c4a0 <__assert_func>
 800aae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae4:	6004      	str	r4, [r0, #0]
 800aae6:	60c4      	str	r4, [r0, #12]
 800aae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aaec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaf0:	b94c      	cbnz	r4, 800ab06 <__pow5mult+0x66>
 800aaf2:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7ff ff12 	bl	800a920 <__i2b>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab02:	4604      	mov	r4, r0
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	f04f 0900 	mov.w	r9, #0
 800ab0a:	07eb      	lsls	r3, r5, #31
 800ab0c:	d50a      	bpl.n	800ab24 <__pow5mult+0x84>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4622      	mov	r2, r4
 800ab12:	4638      	mov	r0, r7
 800ab14:	f7ff ff1a 	bl	800a94c <__multiply>
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fe01 	bl	800a724 <_Bfree>
 800ab22:	4646      	mov	r6, r8
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	d00b      	beq.n	800ab40 <__pow5mult+0xa0>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	b938      	cbnz	r0, 800ab3c <__pow5mult+0x9c>
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7ff ff0b 	bl	800a94c <__multiply>
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f8c0 9000 	str.w	r9, [r0]
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	e7e4      	b.n	800ab0a <__pow5mult+0x6a>
 800ab40:	4630      	mov	r0, r6
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	bf00      	nop
 800ab48:	0800d4e8 	.word	0x0800d4e8
 800ab4c:	0800d40e 	.word	0x0800d40e
 800ab50:	0800d48e 	.word	0x0800d48e

0800ab54 <__lshift>:
 800ab54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	6849      	ldr	r1, [r1, #4]
 800ab5c:	6923      	ldr	r3, [r4, #16]
 800ab5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	4607      	mov	r7, r0
 800ab66:	4691      	mov	r9, r2
 800ab68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab6c:	f108 0601 	add.w	r6, r8, #1
 800ab70:	42b3      	cmp	r3, r6
 800ab72:	db0b      	blt.n	800ab8c <__lshift+0x38>
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff fd95 	bl	800a6a4 <_Balloc>
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	b948      	cbnz	r0, 800ab92 <__lshift+0x3e>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4b28      	ldr	r3, [pc, #160]	@ (800ac24 <__lshift+0xd0>)
 800ab82:	4829      	ldr	r0, [pc, #164]	@ (800ac28 <__lshift+0xd4>)
 800ab84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab88:	f001 fc8a 	bl	800c4a0 <__assert_func>
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	e7ee      	b.n	800ab70 <__lshift+0x1c>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f100 0114 	add.w	r1, r0, #20
 800ab98:	f100 0210 	add.w	r2, r0, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4553      	cmp	r3, sl
 800aba0:	db33      	blt.n	800ac0a <__lshift+0xb6>
 800aba2:	6920      	ldr	r0, [r4, #16]
 800aba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba8:	f104 0314 	add.w	r3, r4, #20
 800abac:	f019 091f 	ands.w	r9, r9, #31
 800abb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb8:	d02b      	beq.n	800ac12 <__lshift+0xbe>
 800abba:	f1c9 0e20 	rsb	lr, r9, #32
 800abbe:	468a      	mov	sl, r1
 800abc0:	2200      	movs	r2, #0
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	fa00 f009 	lsl.w	r0, r0, r9
 800abc8:	4310      	orrs	r0, r2
 800abca:	f84a 0b04 	str.w	r0, [sl], #4
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	459c      	cmp	ip, r3
 800abd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd8:	d8f3      	bhi.n	800abc2 <__lshift+0x6e>
 800abda:	ebac 0304 	sub.w	r3, ip, r4
 800abde:	3b15      	subs	r3, #21
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	f104 0015 	add.w	r0, r4, #21
 800abea:	4584      	cmp	ip, r0
 800abec:	bf38      	it	cc
 800abee:	2304      	movcc	r3, #4
 800abf0:	50ca      	str	r2, [r1, r3]
 800abf2:	b10a      	cbz	r2, 800abf8 <__lshift+0xa4>
 800abf4:	f108 0602 	add.w	r6, r8, #2
 800abf8:	3e01      	subs	r6, #1
 800abfa:	4638      	mov	r0, r7
 800abfc:	612e      	str	r6, [r5, #16]
 800abfe:	4621      	mov	r1, r4
 800ac00:	f7ff fd90 	bl	800a724 <_Bfree>
 800ac04:	4628      	mov	r0, r5
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0e:	3301      	adds	r3, #1
 800ac10:	e7c5      	b.n	800ab9e <__lshift+0x4a>
 800ac12:	3904      	subs	r1, #4
 800ac14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac1c:	459c      	cmp	ip, r3
 800ac1e:	d8f9      	bhi.n	800ac14 <__lshift+0xc0>
 800ac20:	e7ea      	b.n	800abf8 <__lshift+0xa4>
 800ac22:	bf00      	nop
 800ac24:	0800d47d 	.word	0x0800d47d
 800ac28:	0800d48e 	.word	0x0800d48e

0800ac2c <__mcmp>:
 800ac2c:	690a      	ldr	r2, [r1, #16]
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6900      	ldr	r0, [r0, #16]
 800ac32:	1a80      	subs	r0, r0, r2
 800ac34:	b530      	push	{r4, r5, lr}
 800ac36:	d10e      	bne.n	800ac56 <__mcmp+0x2a>
 800ac38:	3314      	adds	r3, #20
 800ac3a:	3114      	adds	r1, #20
 800ac3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac4c:	4295      	cmp	r5, r2
 800ac4e:	d003      	beq.n	800ac58 <__mcmp+0x2c>
 800ac50:	d205      	bcs.n	800ac5e <__mcmp+0x32>
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	bd30      	pop	{r4, r5, pc}
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d3f3      	bcc.n	800ac44 <__mcmp+0x18>
 800ac5c:	e7fb      	b.n	800ac56 <__mcmp+0x2a>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7f9      	b.n	800ac56 <__mcmp+0x2a>
	...

0800ac64 <__mdiff>:
 800ac64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4689      	mov	r9, r1
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4648      	mov	r0, r9
 800ac70:	4614      	mov	r4, r2
 800ac72:	f7ff ffdb 	bl	800ac2c <__mcmp>
 800ac76:	1e05      	subs	r5, r0, #0
 800ac78:	d112      	bne.n	800aca0 <__mdiff+0x3c>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fd11 	bl	800a6a4 <_Balloc>
 800ac82:	4602      	mov	r2, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <__mdiff+0x2e>
 800ac86:	4b3f      	ldr	r3, [pc, #252]	@ (800ad84 <__mdiff+0x120>)
 800ac88:	f240 2137 	movw	r1, #567	@ 0x237
 800ac8c:	483e      	ldr	r0, [pc, #248]	@ (800ad88 <__mdiff+0x124>)
 800ac8e:	f001 fc07 	bl	800c4a0 <__assert_func>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac98:	4610      	mov	r0, r2
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	bfbc      	itt	lt
 800aca2:	464b      	movlt	r3, r9
 800aca4:	46a1      	movlt	r9, r4
 800aca6:	4630      	mov	r0, r6
 800aca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800acac:	bfba      	itte	lt
 800acae:	461c      	movlt	r4, r3
 800acb0:	2501      	movlt	r5, #1
 800acb2:	2500      	movge	r5, #0
 800acb4:	f7ff fcf6 	bl	800a6a4 <_Balloc>
 800acb8:	4602      	mov	r2, r0
 800acba:	b918      	cbnz	r0, 800acc4 <__mdiff+0x60>
 800acbc:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <__mdiff+0x120>)
 800acbe:	f240 2145 	movw	r1, #581	@ 0x245
 800acc2:	e7e3      	b.n	800ac8c <__mdiff+0x28>
 800acc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc8:	6926      	ldr	r6, [r4, #16]
 800acca:	60c5      	str	r5, [r0, #12]
 800accc:	f109 0310 	add.w	r3, r9, #16
 800acd0:	f109 0514 	add.w	r5, r9, #20
 800acd4:	f104 0e14 	add.w	lr, r4, #20
 800acd8:	f100 0b14 	add.w	fp, r0, #20
 800acdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ace0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	46d9      	mov	r9, fp
 800ace8:	f04f 0c00 	mov.w	ip, #0
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	fa1f f38a 	uxth.w	r3, sl
 800acfc:	4619      	mov	r1, r3
 800acfe:	b283      	uxth	r3, r0
 800ad00:	1acb      	subs	r3, r1, r3
 800ad02:	0c00      	lsrs	r0, r0, #16
 800ad04:	4463      	add	r3, ip
 800ad06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad14:	4576      	cmp	r6, lr
 800ad16:	f849 3b04 	str.w	r3, [r9], #4
 800ad1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad1e:	d8e5      	bhi.n	800acec <__mdiff+0x88>
 800ad20:	1b33      	subs	r3, r6, r4
 800ad22:	3b15      	subs	r3, #21
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	3415      	adds	r4, #21
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	42a6      	cmp	r6, r4
 800ad2e:	bf38      	it	cc
 800ad30:	2304      	movcc	r3, #4
 800ad32:	441d      	add	r5, r3
 800ad34:	445b      	add	r3, fp
 800ad36:	461e      	mov	r6, r3
 800ad38:	462c      	mov	r4, r5
 800ad3a:	4544      	cmp	r4, r8
 800ad3c:	d30e      	bcc.n	800ad5c <__mdiff+0xf8>
 800ad3e:	f108 0103 	add.w	r1, r8, #3
 800ad42:	1b49      	subs	r1, r1, r5
 800ad44:	f021 0103 	bic.w	r1, r1, #3
 800ad48:	3d03      	subs	r5, #3
 800ad4a:	45a8      	cmp	r8, r5
 800ad4c:	bf38      	it	cc
 800ad4e:	2100      	movcc	r1, #0
 800ad50:	440b      	add	r3, r1
 800ad52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad56:	b191      	cbz	r1, 800ad7e <__mdiff+0x11a>
 800ad58:	6117      	str	r7, [r2, #16]
 800ad5a:	e79d      	b.n	800ac98 <__mdiff+0x34>
 800ad5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad60:	46e6      	mov	lr, ip
 800ad62:	0c08      	lsrs	r0, r1, #16
 800ad64:	fa1c fc81 	uxtah	ip, ip, r1
 800ad68:	4471      	add	r1, lr
 800ad6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6e:	b289      	uxth	r1, r1
 800ad70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad74:	f846 1b04 	str.w	r1, [r6], #4
 800ad78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad7c:	e7dd      	b.n	800ad3a <__mdiff+0xd6>
 800ad7e:	3f01      	subs	r7, #1
 800ad80:	e7e7      	b.n	800ad52 <__mdiff+0xee>
 800ad82:	bf00      	nop
 800ad84:	0800d47d 	.word	0x0800d47d
 800ad88:	0800d48e 	.word	0x0800d48e

0800ad8c <__ulp>:
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	ed8d 0b00 	vstr	d0, [sp]
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	4b0f      	ldr	r3, [pc, #60]	@ (800add4 <__ulp+0x48>)
 800ad96:	4013      	ands	r3, r2
 800ad98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dc08      	bgt.n	800adb2 <__ulp+0x26>
 800ada0:	425b      	negs	r3, r3
 800ada2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ada6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800adaa:	da04      	bge.n	800adb6 <__ulp+0x2a>
 800adac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800adb0:	4113      	asrs	r3, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	e008      	b.n	800adc8 <__ulp+0x3c>
 800adb6:	f1a2 0314 	sub.w	r3, r2, #20
 800adba:	2b1e      	cmp	r3, #30
 800adbc:	bfda      	itte	le
 800adbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800adc2:	40da      	lsrle	r2, r3
 800adc4:	2201      	movgt	r2, #1
 800adc6:	2300      	movs	r3, #0
 800adc8:	4619      	mov	r1, r3
 800adca:	4610      	mov	r0, r2
 800adcc:	ec41 0b10 	vmov	d0, r0, r1
 800add0:	b002      	add	sp, #8
 800add2:	4770      	bx	lr
 800add4:	7ff00000 	.word	0x7ff00000

0800add8 <__b2d>:
 800add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800addc:	6906      	ldr	r6, [r0, #16]
 800adde:	f100 0814 	add.w	r8, r0, #20
 800ade2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ade6:	1f37      	subs	r7, r6, #4
 800ade8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fd4b 	bl	800a888 <__hi0bits>
 800adf2:	f1c0 0320 	rsb	r3, r0, #32
 800adf6:	280a      	cmp	r0, #10
 800adf8:	600b      	str	r3, [r1, #0]
 800adfa:	491b      	ldr	r1, [pc, #108]	@ (800ae68 <__b2d+0x90>)
 800adfc:	dc15      	bgt.n	800ae2a <__b2d+0x52>
 800adfe:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae02:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae06:	45b8      	cmp	r8, r7
 800ae08:	ea43 0501 	orr.w	r5, r3, r1
 800ae0c:	bf34      	ite	cc
 800ae0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae12:	2300      	movcs	r3, #0
 800ae14:	3015      	adds	r0, #21
 800ae16:	fa02 f000 	lsl.w	r0, r2, r0
 800ae1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae1e:	4303      	orrs	r3, r0
 800ae20:	461c      	mov	r4, r3
 800ae22:	ec45 4b10 	vmov	d0, r4, r5
 800ae26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2a:	45b8      	cmp	r8, r7
 800ae2c:	bf3a      	itte	cc
 800ae2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae32:	f1a6 0708 	subcc.w	r7, r6, #8
 800ae36:	2300      	movcs	r3, #0
 800ae38:	380b      	subs	r0, #11
 800ae3a:	d012      	beq.n	800ae62 <__b2d+0x8a>
 800ae3c:	f1c0 0120 	rsb	r1, r0, #32
 800ae40:	fa23 f401 	lsr.w	r4, r3, r1
 800ae44:	4082      	lsls	r2, r0
 800ae46:	4322      	orrs	r2, r4
 800ae48:	4547      	cmp	r7, r8
 800ae4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ae4e:	bf8c      	ite	hi
 800ae50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ae54:	2200      	movls	r2, #0
 800ae56:	4083      	lsls	r3, r0
 800ae58:	40ca      	lsrs	r2, r1
 800ae5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	e7de      	b.n	800ae20 <__b2d+0x48>
 800ae62:	ea42 0501 	orr.w	r5, r2, r1
 800ae66:	e7db      	b.n	800ae20 <__b2d+0x48>
 800ae68:	3ff00000 	.word	0x3ff00000

0800ae6c <__d2b>:
 800ae6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	460f      	mov	r7, r1
 800ae72:	2101      	movs	r1, #1
 800ae74:	ec59 8b10 	vmov	r8, r9, d0
 800ae78:	4616      	mov	r6, r2
 800ae7a:	f7ff fc13 	bl	800a6a4 <_Balloc>
 800ae7e:	4604      	mov	r4, r0
 800ae80:	b930      	cbnz	r0, 800ae90 <__d2b+0x24>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b23      	ldr	r3, [pc, #140]	@ (800af14 <__d2b+0xa8>)
 800ae86:	4824      	ldr	r0, [pc, #144]	@ (800af18 <__d2b+0xac>)
 800ae88:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae8c:	f001 fb08 	bl	800c4a0 <__assert_func>
 800ae90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae98:	b10d      	cbz	r5, 800ae9e <__d2b+0x32>
 800ae9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	f1b8 0300 	subs.w	r3, r8, #0
 800aea4:	d023      	beq.n	800aeee <__d2b+0x82>
 800aea6:	4668      	mov	r0, sp
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	f7ff fd0c 	bl	800a8c6 <__lo0bits>
 800aeae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aeb2:	b1d0      	cbz	r0, 800aeea <__d2b+0x7e>
 800aeb4:	f1c0 0320 	rsb	r3, r0, #32
 800aeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800aebc:	430b      	orrs	r3, r1
 800aebe:	40c2      	lsrs	r2, r0
 800aec0:	6163      	str	r3, [r4, #20]
 800aec2:	9201      	str	r2, [sp, #4]
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	61a3      	str	r3, [r4, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bf0c      	ite	eq
 800aecc:	2201      	moveq	r2, #1
 800aece:	2202      	movne	r2, #2
 800aed0:	6122      	str	r2, [r4, #16]
 800aed2:	b1a5      	cbz	r5, 800aefe <__d2b+0x92>
 800aed4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aed8:	4405      	add	r5, r0
 800aeda:	603d      	str	r5, [r7, #0]
 800aedc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aee0:	6030      	str	r0, [r6, #0]
 800aee2:	4620      	mov	r0, r4
 800aee4:	b003      	add	sp, #12
 800aee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeea:	6161      	str	r1, [r4, #20]
 800aeec:	e7ea      	b.n	800aec4 <__d2b+0x58>
 800aeee:	a801      	add	r0, sp, #4
 800aef0:	f7ff fce9 	bl	800a8c6 <__lo0bits>
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	3020      	adds	r0, #32
 800aefa:	2201      	movs	r2, #1
 800aefc:	e7e8      	b.n	800aed0 <__d2b+0x64>
 800aefe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af06:	6038      	str	r0, [r7, #0]
 800af08:	6918      	ldr	r0, [r3, #16]
 800af0a:	f7ff fcbd 	bl	800a888 <__hi0bits>
 800af0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af12:	e7e5      	b.n	800aee0 <__d2b+0x74>
 800af14:	0800d47d 	.word	0x0800d47d
 800af18:	0800d48e 	.word	0x0800d48e

0800af1c <__ratio>:
 800af1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	4688      	mov	r8, r1
 800af22:	4669      	mov	r1, sp
 800af24:	4681      	mov	r9, r0
 800af26:	f7ff ff57 	bl	800add8 <__b2d>
 800af2a:	a901      	add	r1, sp, #4
 800af2c:	4640      	mov	r0, r8
 800af2e:	ec55 4b10 	vmov	r4, r5, d0
 800af32:	f7ff ff51 	bl	800add8 <__b2d>
 800af36:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800af3a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	e9dd 3100 	ldrd	r3, r1, [sp]
 800af44:	1a5b      	subs	r3, r3, r1
 800af46:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800af4a:	ec57 6b10 	vmov	r6, r7, d0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfd6      	itet	le
 800af52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af56:	462a      	movgt	r2, r5
 800af58:	463a      	movle	r2, r7
 800af5a:	46ab      	mov	fp, r5
 800af5c:	46a2      	mov	sl, r4
 800af5e:	bfce      	itee	gt
 800af60:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800af64:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800af68:	ee00 3a90 	vmovle	s1, r3
 800af6c:	ec4b ab17 	vmov	d7, sl, fp
 800af70:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800af74:	b003      	add	sp, #12
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af7a <__copybits>:
 800af7a:	3901      	subs	r1, #1
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	1149      	asrs	r1, r1, #5
 800af80:	6914      	ldr	r4, [r2, #16]
 800af82:	3101      	adds	r1, #1
 800af84:	f102 0314 	add.w	r3, r2, #20
 800af88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af90:	1f05      	subs	r5, r0, #4
 800af92:	42a3      	cmp	r3, r4
 800af94:	d30c      	bcc.n	800afb0 <__copybits+0x36>
 800af96:	1aa3      	subs	r3, r4, r2
 800af98:	3b11      	subs	r3, #17
 800af9a:	f023 0303 	bic.w	r3, r3, #3
 800af9e:	3211      	adds	r2, #17
 800afa0:	42a2      	cmp	r2, r4
 800afa2:	bf88      	it	hi
 800afa4:	2300      	movhi	r3, #0
 800afa6:	4418      	add	r0, r3
 800afa8:	2300      	movs	r3, #0
 800afaa:	4288      	cmp	r0, r1
 800afac:	d305      	bcc.n	800afba <__copybits+0x40>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800afb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800afb8:	e7eb      	b.n	800af92 <__copybits+0x18>
 800afba:	f840 3b04 	str.w	r3, [r0], #4
 800afbe:	e7f4      	b.n	800afaa <__copybits+0x30>

0800afc0 <__any_on>:
 800afc0:	f100 0214 	add.w	r2, r0, #20
 800afc4:	6900      	ldr	r0, [r0, #16]
 800afc6:	114b      	asrs	r3, r1, #5
 800afc8:	4298      	cmp	r0, r3
 800afca:	b510      	push	{r4, lr}
 800afcc:	db11      	blt.n	800aff2 <__any_on+0x32>
 800afce:	dd0a      	ble.n	800afe6 <__any_on+0x26>
 800afd0:	f011 011f 	ands.w	r1, r1, #31
 800afd4:	d007      	beq.n	800afe6 <__any_on+0x26>
 800afd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afda:	fa24 f001 	lsr.w	r0, r4, r1
 800afde:	fa00 f101 	lsl.w	r1, r0, r1
 800afe2:	428c      	cmp	r4, r1
 800afe4:	d10b      	bne.n	800affe <__any_on+0x3e>
 800afe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afea:	4293      	cmp	r3, r2
 800afec:	d803      	bhi.n	800aff6 <__any_on+0x36>
 800afee:	2000      	movs	r0, #0
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	4603      	mov	r3, r0
 800aff4:	e7f7      	b.n	800afe6 <__any_on+0x26>
 800aff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800affa:	2900      	cmp	r1, #0
 800affc:	d0f5      	beq.n	800afea <__any_on+0x2a>
 800affe:	2001      	movs	r0, #1
 800b000:	e7f6      	b.n	800aff0 <__any_on+0x30>

0800b002 <sulp>:
 800b002:	b570      	push	{r4, r5, r6, lr}
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	4616      	mov	r6, r2
 800b00a:	ec45 4b10 	vmov	d0, r4, r5
 800b00e:	f7ff febd 	bl	800ad8c <__ulp>
 800b012:	b17e      	cbz	r6, 800b034 <sulp+0x32>
 800b014:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd09      	ble.n	800b034 <sulp+0x32>
 800b020:	051b      	lsls	r3, r3, #20
 800b022:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b026:	2000      	movs	r0, #0
 800b028:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b02c:	ec41 0b17 	vmov	d7, r0, r1
 800b030:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b034:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b038 <_strtod_l>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	ed2d 8b0a 	vpush	{d8-d12}
 800b040:	b097      	sub	sp, #92	@ 0x5c
 800b042:	4688      	mov	r8, r1
 800b044:	920e      	str	r2, [sp, #56]	@ 0x38
 800b046:	2200      	movs	r2, #0
 800b048:	9212      	str	r2, [sp, #72]	@ 0x48
 800b04a:	9005      	str	r0, [sp, #20]
 800b04c:	f04f 0a00 	mov.w	sl, #0
 800b050:	f04f 0b00 	mov.w	fp, #0
 800b054:	460a      	mov	r2, r1
 800b056:	9211      	str	r2, [sp, #68]	@ 0x44
 800b058:	7811      	ldrb	r1, [r2, #0]
 800b05a:	292b      	cmp	r1, #43	@ 0x2b
 800b05c:	d04c      	beq.n	800b0f8 <_strtod_l+0xc0>
 800b05e:	d839      	bhi.n	800b0d4 <_strtod_l+0x9c>
 800b060:	290d      	cmp	r1, #13
 800b062:	d833      	bhi.n	800b0cc <_strtod_l+0x94>
 800b064:	2908      	cmp	r1, #8
 800b066:	d833      	bhi.n	800b0d0 <_strtod_l+0x98>
 800b068:	2900      	cmp	r1, #0
 800b06a:	d03c      	beq.n	800b0e6 <_strtod_l+0xae>
 800b06c:	2200      	movs	r2, #0
 800b06e:	9208      	str	r2, [sp, #32]
 800b070:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b072:	782a      	ldrb	r2, [r5, #0]
 800b074:	2a30      	cmp	r2, #48	@ 0x30
 800b076:	f040 80b5 	bne.w	800b1e4 <_strtod_l+0x1ac>
 800b07a:	786a      	ldrb	r2, [r5, #1]
 800b07c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b080:	2a58      	cmp	r2, #88	@ 0x58
 800b082:	d170      	bne.n	800b166 <_strtod_l+0x12e>
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	ab12      	add	r3, sp, #72	@ 0x48
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4a8b      	ldr	r2, [pc, #556]	@ (800b2bc <_strtod_l+0x284>)
 800b090:	9805      	ldr	r0, [sp, #20]
 800b092:	ab13      	add	r3, sp, #76	@ 0x4c
 800b094:	a911      	add	r1, sp, #68	@ 0x44
 800b096:	f001 fa9d 	bl	800c5d4 <__gethex>
 800b09a:	f010 060f 	ands.w	r6, r0, #15
 800b09e:	4604      	mov	r4, r0
 800b0a0:	d005      	beq.n	800b0ae <_strtod_l+0x76>
 800b0a2:	2e06      	cmp	r6, #6
 800b0a4:	d12a      	bne.n	800b0fc <_strtod_l+0xc4>
 800b0a6:	3501      	adds	r5, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9511      	str	r5, [sp, #68]	@ 0x44
 800b0ac:	9308      	str	r3, [sp, #32]
 800b0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 852f 	bne.w	800bb14 <_strtod_l+0xadc>
 800b0b6:	9b08      	ldr	r3, [sp, #32]
 800b0b8:	ec4b ab10 	vmov	d0, sl, fp
 800b0bc:	b1cb      	cbz	r3, 800b0f2 <_strtod_l+0xba>
 800b0be:	eeb1 0b40 	vneg.f64	d0, d0
 800b0c2:	b017      	add	sp, #92	@ 0x5c
 800b0c4:	ecbd 8b0a 	vpop	{d8-d12}
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	2920      	cmp	r1, #32
 800b0ce:	d1cd      	bne.n	800b06c <_strtod_l+0x34>
 800b0d0:	3201      	adds	r2, #1
 800b0d2:	e7c0      	b.n	800b056 <_strtod_l+0x1e>
 800b0d4:	292d      	cmp	r1, #45	@ 0x2d
 800b0d6:	d1c9      	bne.n	800b06c <_strtod_l+0x34>
 800b0d8:	2101      	movs	r1, #1
 800b0da:	9108      	str	r1, [sp, #32]
 800b0dc:	1c51      	adds	r1, r2, #1
 800b0de:	9111      	str	r1, [sp, #68]	@ 0x44
 800b0e0:	7852      	ldrb	r2, [r2, #1]
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	d1c4      	bne.n	800b070 <_strtod_l+0x38>
 800b0e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f040 850f 	bne.w	800bb10 <_strtod_l+0xad8>
 800b0f2:	ec4b ab10 	vmov	d0, sl, fp
 800b0f6:	e7e4      	b.n	800b0c2 <_strtod_l+0x8a>
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	e7ee      	b.n	800b0da <_strtod_l+0xa2>
 800b0fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0fe:	b13a      	cbz	r2, 800b110 <_strtod_l+0xd8>
 800b100:	2135      	movs	r1, #53	@ 0x35
 800b102:	a814      	add	r0, sp, #80	@ 0x50
 800b104:	f7ff ff39 	bl	800af7a <__copybits>
 800b108:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b10a:	9805      	ldr	r0, [sp, #20]
 800b10c:	f7ff fb0a 	bl	800a724 <_Bfree>
 800b110:	1e73      	subs	r3, r6, #1
 800b112:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b114:	2b04      	cmp	r3, #4
 800b116:	d806      	bhi.n	800b126 <_strtod_l+0xee>
 800b118:	e8df f003 	tbb	[pc, r3]
 800b11c:	201d0314 	.word	0x201d0314
 800b120:	14          	.byte	0x14
 800b121:	00          	.byte	0x00
 800b122:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b126:	05e3      	lsls	r3, r4, #23
 800b128:	bf48      	it	mi
 800b12a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b132:	0d1b      	lsrs	r3, r3, #20
 800b134:	051b      	lsls	r3, r3, #20
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1b9      	bne.n	800b0ae <_strtod_l+0x76>
 800b13a:	f7fe fba1 	bl	8009880 <__errno>
 800b13e:	2322      	movs	r3, #34	@ 0x22
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	e7b4      	b.n	800b0ae <_strtod_l+0x76>
 800b144:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b14c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b154:	e7e7      	b.n	800b126 <_strtod_l+0xee>
 800b156:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b2c4 <_strtod_l+0x28c>
 800b15a:	e7e4      	b.n	800b126 <_strtod_l+0xee>
 800b15c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b160:	f04f 3aff 	mov.w	sl, #4294967295
 800b164:	e7df      	b.n	800b126 <_strtod_l+0xee>
 800b166:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b30      	cmp	r3, #48	@ 0x30
 800b170:	d0f9      	beq.n	800b166 <_strtod_l+0x12e>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d09b      	beq.n	800b0ae <_strtod_l+0x76>
 800b176:	2301      	movs	r3, #1
 800b178:	2600      	movs	r6, #0
 800b17a:	9307      	str	r3, [sp, #28]
 800b17c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b180:	46b1      	mov	r9, r6
 800b182:	4635      	mov	r5, r6
 800b184:	220a      	movs	r2, #10
 800b186:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b188:	7804      	ldrb	r4, [r0, #0]
 800b18a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b18e:	b2d9      	uxtb	r1, r3
 800b190:	2909      	cmp	r1, #9
 800b192:	d929      	bls.n	800b1e8 <_strtod_l+0x1b0>
 800b194:	494a      	ldr	r1, [pc, #296]	@ (800b2c0 <_strtod_l+0x288>)
 800b196:	2201      	movs	r2, #1
 800b198:	f001 f928 	bl	800c3ec <strncmp>
 800b19c:	b378      	cbz	r0, 800b1fe <_strtod_l+0x1c6>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	9006      	str	r0, [sp, #24]
 800b1a8:	2a65      	cmp	r2, #101	@ 0x65
 800b1aa:	d001      	beq.n	800b1b0 <_strtod_l+0x178>
 800b1ac:	2a45      	cmp	r2, #69	@ 0x45
 800b1ae:	d117      	bne.n	800b1e0 <_strtod_l+0x1a8>
 800b1b0:	b91b      	cbnz	r3, 800b1ba <_strtod_l+0x182>
 800b1b2:	9b07      	ldr	r3, [sp, #28]
 800b1b4:	4303      	orrs	r3, r0
 800b1b6:	d096      	beq.n	800b0e6 <_strtod_l+0xae>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b1be:	f108 0201 	add.w	r2, r8, #1
 800b1c2:	9211      	str	r2, [sp, #68]	@ 0x44
 800b1c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b1c8:	2a2b      	cmp	r2, #43	@ 0x2b
 800b1ca:	d06b      	beq.n	800b2a4 <_strtod_l+0x26c>
 800b1cc:	2a2d      	cmp	r2, #45	@ 0x2d
 800b1ce:	d071      	beq.n	800b2b4 <_strtod_l+0x27c>
 800b1d0:	f04f 0e00 	mov.w	lr, #0
 800b1d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b1d8:	2c09      	cmp	r4, #9
 800b1da:	d979      	bls.n	800b2d0 <_strtod_l+0x298>
 800b1dc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b1e0:	2400      	movs	r4, #0
 800b1e2:	e094      	b.n	800b30e <_strtod_l+0x2d6>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e7c7      	b.n	800b178 <_strtod_l+0x140>
 800b1e8:	2d08      	cmp	r5, #8
 800b1ea:	f100 0001 	add.w	r0, r0, #1
 800b1ee:	bfd4      	ite	le
 800b1f0:	fb02 3909 	mlale	r9, r2, r9, r3
 800b1f4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b1f8:	3501      	adds	r5, #1
 800b1fa:	9011      	str	r0, [sp, #68]	@ 0x44
 800b1fc:	e7c3      	b.n	800b186 <_strtod_l+0x14e>
 800b1fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	9211      	str	r2, [sp, #68]	@ 0x44
 800b204:	785a      	ldrb	r2, [r3, #1]
 800b206:	b375      	cbz	r5, 800b266 <_strtod_l+0x22e>
 800b208:	4607      	mov	r7, r0
 800b20a:	462b      	mov	r3, r5
 800b20c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b210:	2909      	cmp	r1, #9
 800b212:	d913      	bls.n	800b23c <_strtod_l+0x204>
 800b214:	2101      	movs	r1, #1
 800b216:	9106      	str	r1, [sp, #24]
 800b218:	e7c6      	b.n	800b1a8 <_strtod_l+0x170>
 800b21a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	9211      	str	r2, [sp, #68]	@ 0x44
 800b220:	785a      	ldrb	r2, [r3, #1]
 800b222:	3001      	adds	r0, #1
 800b224:	2a30      	cmp	r2, #48	@ 0x30
 800b226:	d0f8      	beq.n	800b21a <_strtod_l+0x1e2>
 800b228:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b22c:	2b08      	cmp	r3, #8
 800b22e:	f200 8476 	bhi.w	800bb1e <_strtod_l+0xae6>
 800b232:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b234:	930a      	str	r3, [sp, #40]	@ 0x28
 800b236:	4607      	mov	r7, r0
 800b238:	2000      	movs	r0, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	3a30      	subs	r2, #48	@ 0x30
 800b23e:	f100 0101 	add.w	r1, r0, #1
 800b242:	d023      	beq.n	800b28c <_strtod_l+0x254>
 800b244:	440f      	add	r7, r1
 800b246:	eb00 0c03 	add.w	ip, r0, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	240a      	movs	r4, #10
 800b24e:	4561      	cmp	r1, ip
 800b250:	d10b      	bne.n	800b26a <_strtod_l+0x232>
 800b252:	1c5c      	adds	r4, r3, #1
 800b254:	4403      	add	r3, r0
 800b256:	2b08      	cmp	r3, #8
 800b258:	4404      	add	r4, r0
 800b25a:	dc11      	bgt.n	800b280 <_strtod_l+0x248>
 800b25c:	230a      	movs	r3, #10
 800b25e:	fb03 2909 	mla	r9, r3, r9, r2
 800b262:	2100      	movs	r1, #0
 800b264:	e013      	b.n	800b28e <_strtod_l+0x256>
 800b266:	4628      	mov	r0, r5
 800b268:	e7dc      	b.n	800b224 <_strtod_l+0x1ec>
 800b26a:	2908      	cmp	r1, #8
 800b26c:	f101 0101 	add.w	r1, r1, #1
 800b270:	dc02      	bgt.n	800b278 <_strtod_l+0x240>
 800b272:	fb04 f909 	mul.w	r9, r4, r9
 800b276:	e7ea      	b.n	800b24e <_strtod_l+0x216>
 800b278:	2910      	cmp	r1, #16
 800b27a:	bfd8      	it	le
 800b27c:	4366      	mulle	r6, r4
 800b27e:	e7e6      	b.n	800b24e <_strtod_l+0x216>
 800b280:	2b0f      	cmp	r3, #15
 800b282:	dcee      	bgt.n	800b262 <_strtod_l+0x22a>
 800b284:	230a      	movs	r3, #10
 800b286:	fb03 2606 	mla	r6, r3, r6, r2
 800b28a:	e7ea      	b.n	800b262 <_strtod_l+0x22a>
 800b28c:	461c      	mov	r4, r3
 800b28e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	9211      	str	r2, [sp, #68]	@ 0x44
 800b294:	785a      	ldrb	r2, [r3, #1]
 800b296:	4608      	mov	r0, r1
 800b298:	4623      	mov	r3, r4
 800b29a:	e7b7      	b.n	800b20c <_strtod_l+0x1d4>
 800b29c:	2301      	movs	r3, #1
 800b29e:	2700      	movs	r7, #0
 800b2a0:	9306      	str	r3, [sp, #24]
 800b2a2:	e786      	b.n	800b1b2 <_strtod_l+0x17a>
 800b2a4:	f04f 0e00 	mov.w	lr, #0
 800b2a8:	f108 0202 	add.w	r2, r8, #2
 800b2ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800b2ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b2b2:	e78f      	b.n	800b1d4 <_strtod_l+0x19c>
 800b2b4:	f04f 0e01 	mov.w	lr, #1
 800b2b8:	e7f6      	b.n	800b2a8 <_strtod_l+0x270>
 800b2ba:	bf00      	nop
 800b2bc:	0800d600 	.word	0x0800d600
 800b2c0:	0800d5e8 	.word	0x0800d5e8
 800b2c4:	7ff00000 	.word	0x7ff00000
 800b2c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2ca:	1c54      	adds	r4, r2, #1
 800b2cc:	9411      	str	r4, [sp, #68]	@ 0x44
 800b2ce:	7852      	ldrb	r2, [r2, #1]
 800b2d0:	2a30      	cmp	r2, #48	@ 0x30
 800b2d2:	d0f9      	beq.n	800b2c8 <_strtod_l+0x290>
 800b2d4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b2d8:	2c08      	cmp	r4, #8
 800b2da:	d881      	bhi.n	800b1e0 <_strtod_l+0x1a8>
 800b2dc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b2e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2e6:	1c51      	adds	r1, r2, #1
 800b2e8:	9111      	str	r1, [sp, #68]	@ 0x44
 800b2ea:	7852      	ldrb	r2, [r2, #1]
 800b2ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b2f0:	2c09      	cmp	r4, #9
 800b2f2:	d938      	bls.n	800b366 <_strtod_l+0x32e>
 800b2f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b2f6:	1b0c      	subs	r4, r1, r4
 800b2f8:	2c08      	cmp	r4, #8
 800b2fa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b2fe:	dc02      	bgt.n	800b306 <_strtod_l+0x2ce>
 800b300:	4564      	cmp	r4, ip
 800b302:	bfa8      	it	ge
 800b304:	4664      	movge	r4, ip
 800b306:	f1be 0f00 	cmp.w	lr, #0
 800b30a:	d000      	beq.n	800b30e <_strtod_l+0x2d6>
 800b30c:	4264      	negs	r4, r4
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d14e      	bne.n	800b3b0 <_strtod_l+0x378>
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	4318      	orrs	r0, r3
 800b316:	f47f aeca 	bne.w	800b0ae <_strtod_l+0x76>
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f47f aee2 	bne.w	800b0e6 <_strtod_l+0xae>
 800b322:	2a69      	cmp	r2, #105	@ 0x69
 800b324:	d027      	beq.n	800b376 <_strtod_l+0x33e>
 800b326:	dc24      	bgt.n	800b372 <_strtod_l+0x33a>
 800b328:	2a49      	cmp	r2, #73	@ 0x49
 800b32a:	d024      	beq.n	800b376 <_strtod_l+0x33e>
 800b32c:	2a4e      	cmp	r2, #78	@ 0x4e
 800b32e:	f47f aeda 	bne.w	800b0e6 <_strtod_l+0xae>
 800b332:	4997      	ldr	r1, [pc, #604]	@ (800b590 <_strtod_l+0x558>)
 800b334:	a811      	add	r0, sp, #68	@ 0x44
 800b336:	f001 fb6f 	bl	800ca18 <__match>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aed3 	beq.w	800b0e6 <_strtod_l+0xae>
 800b340:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b28      	cmp	r3, #40	@ 0x28
 800b346:	d12d      	bne.n	800b3a4 <_strtod_l+0x36c>
 800b348:	4992      	ldr	r1, [pc, #584]	@ (800b594 <_strtod_l+0x55c>)
 800b34a:	aa14      	add	r2, sp, #80	@ 0x50
 800b34c:	a811      	add	r0, sp, #68	@ 0x44
 800b34e:	f001 fb77 	bl	800ca40 <__hexnan>
 800b352:	2805      	cmp	r0, #5
 800b354:	d126      	bne.n	800b3a4 <_strtod_l+0x36c>
 800b356:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b358:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b35c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b360:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b364:	e6a3      	b.n	800b0ae <_strtod_l+0x76>
 800b366:	240a      	movs	r4, #10
 800b368:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b36c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b370:	e7b8      	b.n	800b2e4 <_strtod_l+0x2ac>
 800b372:	2a6e      	cmp	r2, #110	@ 0x6e
 800b374:	e7db      	b.n	800b32e <_strtod_l+0x2f6>
 800b376:	4988      	ldr	r1, [pc, #544]	@ (800b598 <_strtod_l+0x560>)
 800b378:	a811      	add	r0, sp, #68	@ 0x44
 800b37a:	f001 fb4d 	bl	800ca18 <__match>
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f aeb1 	beq.w	800b0e6 <_strtod_l+0xae>
 800b384:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b386:	4985      	ldr	r1, [pc, #532]	@ (800b59c <_strtod_l+0x564>)
 800b388:	3b01      	subs	r3, #1
 800b38a:	a811      	add	r0, sp, #68	@ 0x44
 800b38c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b38e:	f001 fb43 	bl	800ca18 <__match>
 800b392:	b910      	cbnz	r0, 800b39a <_strtod_l+0x362>
 800b394:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b396:	3301      	adds	r3, #1
 800b398:	9311      	str	r3, [sp, #68]	@ 0x44
 800b39a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b5b0 <_strtod_l+0x578>
 800b39e:	f04f 0a00 	mov.w	sl, #0
 800b3a2:	e684      	b.n	800b0ae <_strtod_l+0x76>
 800b3a4:	487e      	ldr	r0, [pc, #504]	@ (800b5a0 <_strtod_l+0x568>)
 800b3a6:	f001 f873 	bl	800c490 <nan>
 800b3aa:	ec5b ab10 	vmov	sl, fp, d0
 800b3ae:	e67e      	b.n	800b0ae <_strtod_l+0x76>
 800b3b0:	ee07 9a90 	vmov	s15, r9
 800b3b4:	1be2      	subs	r2, r4, r7
 800b3b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	bf08      	it	eq
 800b3be:	461d      	moveq	r5, r3
 800b3c0:	2b10      	cmp	r3, #16
 800b3c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	bfa8      	it	ge
 800b3c8:	2210      	movge	r2, #16
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	ec5b ab17 	vmov	sl, fp, d7
 800b3d0:	dc15      	bgt.n	800b3fe <_strtod_l+0x3c6>
 800b3d2:	1be1      	subs	r1, r4, r7
 800b3d4:	2900      	cmp	r1, #0
 800b3d6:	f43f ae6a 	beq.w	800b0ae <_strtod_l+0x76>
 800b3da:	eba4 0107 	sub.w	r1, r4, r7
 800b3de:	dd72      	ble.n	800b4c6 <_strtod_l+0x48e>
 800b3e0:	2916      	cmp	r1, #22
 800b3e2:	dc59      	bgt.n	800b498 <_strtod_l+0x460>
 800b3e4:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a4 <_strtod_l+0x56c>)
 800b3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ec:	ed93 7b00 	vldr	d7, [r3]
 800b3f0:	ec4b ab16 	vmov	d6, sl, fp
 800b3f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3f8:	ec5b ab17 	vmov	sl, fp, d7
 800b3fc:	e657      	b.n	800b0ae <_strtod_l+0x76>
 800b3fe:	4969      	ldr	r1, [pc, #420]	@ (800b5a4 <_strtod_l+0x56c>)
 800b400:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b404:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b408:	ee06 6a90 	vmov	s13, r6
 800b40c:	2b0f      	cmp	r3, #15
 800b40e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b412:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b416:	ec5b ab16 	vmov	sl, fp, d6
 800b41a:	ddda      	ble.n	800b3d2 <_strtod_l+0x39a>
 800b41c:	1a9a      	subs	r2, r3, r2
 800b41e:	1be1      	subs	r1, r4, r7
 800b420:	440a      	add	r2, r1
 800b422:	2a00      	cmp	r2, #0
 800b424:	f340 8094 	ble.w	800b550 <_strtod_l+0x518>
 800b428:	f012 000f 	ands.w	r0, r2, #15
 800b42c:	d00a      	beq.n	800b444 <_strtod_l+0x40c>
 800b42e:	495d      	ldr	r1, [pc, #372]	@ (800b5a4 <_strtod_l+0x56c>)
 800b430:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b434:	ed91 7b00 	vldr	d7, [r1]
 800b438:	ec4b ab16 	vmov	d6, sl, fp
 800b43c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b440:	ec5b ab17 	vmov	sl, fp, d7
 800b444:	f032 020f 	bics.w	r2, r2, #15
 800b448:	d073      	beq.n	800b532 <_strtod_l+0x4fa>
 800b44a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b44e:	dd47      	ble.n	800b4e0 <_strtod_l+0x4a8>
 800b450:	2400      	movs	r4, #0
 800b452:	4625      	mov	r5, r4
 800b454:	9407      	str	r4, [sp, #28]
 800b456:	4626      	mov	r6, r4
 800b458:	9a05      	ldr	r2, [sp, #20]
 800b45a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b5b0 <_strtod_l+0x578>
 800b45e:	2322      	movs	r3, #34	@ 0x22
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	f04f 0a00 	mov.w	sl, #0
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f43f ae20 	beq.w	800b0ae <_strtod_l+0x76>
 800b46e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b470:	9805      	ldr	r0, [sp, #20]
 800b472:	f7ff f957 	bl	800a724 <_Bfree>
 800b476:	9805      	ldr	r0, [sp, #20]
 800b478:	4631      	mov	r1, r6
 800b47a:	f7ff f953 	bl	800a724 <_Bfree>
 800b47e:	9805      	ldr	r0, [sp, #20]
 800b480:	4629      	mov	r1, r5
 800b482:	f7ff f94f 	bl	800a724 <_Bfree>
 800b486:	9907      	ldr	r1, [sp, #28]
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	f7ff f94b 	bl	800a724 <_Bfree>
 800b48e:	9805      	ldr	r0, [sp, #20]
 800b490:	4621      	mov	r1, r4
 800b492:	f7ff f947 	bl	800a724 <_Bfree>
 800b496:	e60a      	b.n	800b0ae <_strtod_l+0x76>
 800b498:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b49c:	1be0      	subs	r0, r4, r7
 800b49e:	4281      	cmp	r1, r0
 800b4a0:	dbbc      	blt.n	800b41c <_strtod_l+0x3e4>
 800b4a2:	4a40      	ldr	r2, [pc, #256]	@ (800b5a4 <_strtod_l+0x56c>)
 800b4a4:	f1c3 030f 	rsb	r3, r3, #15
 800b4a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b4ac:	ed91 7b00 	vldr	d7, [r1]
 800b4b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4b2:	ec4b ab16 	vmov	d6, sl, fp
 800b4b6:	1acb      	subs	r3, r1, r3
 800b4b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b4bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4c0:	ed92 6b00 	vldr	d6, [r2]
 800b4c4:	e796      	b.n	800b3f4 <_strtod_l+0x3bc>
 800b4c6:	3116      	adds	r1, #22
 800b4c8:	dba8      	blt.n	800b41c <_strtod_l+0x3e4>
 800b4ca:	4b36      	ldr	r3, [pc, #216]	@ (800b5a4 <_strtod_l+0x56c>)
 800b4cc:	1b3c      	subs	r4, r7, r4
 800b4ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b4d2:	ed94 7b00 	vldr	d7, [r4]
 800b4d6:	ec4b ab16 	vmov	d6, sl, fp
 800b4da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b4de:	e78b      	b.n	800b3f8 <_strtod_l+0x3c0>
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	ec4b ab17 	vmov	d7, sl, fp
 800b4e6:	4e30      	ldr	r6, [pc, #192]	@ (800b5a8 <_strtod_l+0x570>)
 800b4e8:	1112      	asrs	r2, r2, #4
 800b4ea:	4601      	mov	r1, r0
 800b4ec:	2a01      	cmp	r2, #1
 800b4ee:	dc23      	bgt.n	800b538 <_strtod_l+0x500>
 800b4f0:	b108      	cbz	r0, 800b4f6 <_strtod_l+0x4be>
 800b4f2:	ec5b ab17 	vmov	sl, fp, d7
 800b4f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a8 <_strtod_l+0x570>)
 800b4f8:	482c      	ldr	r0, [pc, #176]	@ (800b5ac <_strtod_l+0x574>)
 800b4fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b4fe:	ed92 7b00 	vldr	d7, [r2]
 800b502:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b506:	ec4b ab16 	vmov	d6, sl, fp
 800b50a:	4a29      	ldr	r2, [pc, #164]	@ (800b5b0 <_strtod_l+0x578>)
 800b50c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b510:	ee17 1a90 	vmov	r1, s15
 800b514:	400a      	ands	r2, r1
 800b516:	4282      	cmp	r2, r0
 800b518:	ec5b ab17 	vmov	sl, fp, d7
 800b51c:	d898      	bhi.n	800b450 <_strtod_l+0x418>
 800b51e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b522:	4282      	cmp	r2, r0
 800b524:	bf86      	itte	hi
 800b526:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b5b4 <_strtod_l+0x57c>
 800b52a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b52e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b532:	2200      	movs	r2, #0
 800b534:	9206      	str	r2, [sp, #24]
 800b536:	e076      	b.n	800b626 <_strtod_l+0x5ee>
 800b538:	f012 0f01 	tst.w	r2, #1
 800b53c:	d004      	beq.n	800b548 <_strtod_l+0x510>
 800b53e:	ed96 6b00 	vldr	d6, [r6]
 800b542:	2001      	movs	r0, #1
 800b544:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b548:	3101      	adds	r1, #1
 800b54a:	1052      	asrs	r2, r2, #1
 800b54c:	3608      	adds	r6, #8
 800b54e:	e7cd      	b.n	800b4ec <_strtod_l+0x4b4>
 800b550:	d0ef      	beq.n	800b532 <_strtod_l+0x4fa>
 800b552:	4252      	negs	r2, r2
 800b554:	f012 000f 	ands.w	r0, r2, #15
 800b558:	d00a      	beq.n	800b570 <_strtod_l+0x538>
 800b55a:	4912      	ldr	r1, [pc, #72]	@ (800b5a4 <_strtod_l+0x56c>)
 800b55c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b560:	ed91 7b00 	vldr	d7, [r1]
 800b564:	ec4b ab16 	vmov	d6, sl, fp
 800b568:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b56c:	ec5b ab17 	vmov	sl, fp, d7
 800b570:	1112      	asrs	r2, r2, #4
 800b572:	d0de      	beq.n	800b532 <_strtod_l+0x4fa>
 800b574:	2a1f      	cmp	r2, #31
 800b576:	dd1f      	ble.n	800b5b8 <_strtod_l+0x580>
 800b578:	2400      	movs	r4, #0
 800b57a:	4625      	mov	r5, r4
 800b57c:	9407      	str	r4, [sp, #28]
 800b57e:	4626      	mov	r6, r4
 800b580:	9a05      	ldr	r2, [sp, #20]
 800b582:	2322      	movs	r3, #34	@ 0x22
 800b584:	f04f 0a00 	mov.w	sl, #0
 800b588:	f04f 0b00 	mov.w	fp, #0
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	e76a      	b.n	800b466 <_strtod_l+0x42e>
 800b590:	0800d3d5 	.word	0x0800d3d5
 800b594:	0800d5ec 	.word	0x0800d5ec
 800b598:	0800d3cd 	.word	0x0800d3cd
 800b59c:	0800d404 	.word	0x0800d404
 800b5a0:	0800d795 	.word	0x0800d795
 800b5a4:	0800d520 	.word	0x0800d520
 800b5a8:	0800d4f8 	.word	0x0800d4f8
 800b5ac:	7ca00000 	.word	0x7ca00000
 800b5b0:	7ff00000 	.word	0x7ff00000
 800b5b4:	7fefffff 	.word	0x7fefffff
 800b5b8:	f012 0110 	ands.w	r1, r2, #16
 800b5bc:	bf18      	it	ne
 800b5be:	216a      	movne	r1, #106	@ 0x6a
 800b5c0:	9106      	str	r1, [sp, #24]
 800b5c2:	ec4b ab17 	vmov	d7, sl, fp
 800b5c6:	49b0      	ldr	r1, [pc, #704]	@ (800b888 <_strtod_l+0x850>)
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	07d6      	lsls	r6, r2, #31
 800b5cc:	d504      	bpl.n	800b5d8 <_strtod_l+0x5a0>
 800b5ce:	ed91 6b00 	vldr	d6, [r1]
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5d8:	1052      	asrs	r2, r2, #1
 800b5da:	f101 0108 	add.w	r1, r1, #8
 800b5de:	d1f4      	bne.n	800b5ca <_strtod_l+0x592>
 800b5e0:	b108      	cbz	r0, 800b5e6 <_strtod_l+0x5ae>
 800b5e2:	ec5b ab17 	vmov	sl, fp, d7
 800b5e6:	9a06      	ldr	r2, [sp, #24]
 800b5e8:	b1b2      	cbz	r2, 800b618 <_strtod_l+0x5e0>
 800b5ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800b5ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	dd0f      	ble.n	800b618 <_strtod_l+0x5e0>
 800b5f8:	2a1f      	cmp	r2, #31
 800b5fa:	dd55      	ble.n	800b6a8 <_strtod_l+0x670>
 800b5fc:	2a34      	cmp	r2, #52	@ 0x34
 800b5fe:	bfde      	ittt	le
 800b600:	f04f 32ff 	movle.w	r2, #4294967295
 800b604:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800b608:	408a      	lslle	r2, r1
 800b60a:	f04f 0a00 	mov.w	sl, #0
 800b60e:	bfcc      	ite	gt
 800b610:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b614:	ea02 0b00 	andle.w	fp, r2, r0
 800b618:	ec4b ab17 	vmov	d7, sl, fp
 800b61c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b624:	d0a8      	beq.n	800b578 <_strtod_l+0x540>
 800b626:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b628:	9805      	ldr	r0, [sp, #20]
 800b62a:	f8cd 9000 	str.w	r9, [sp]
 800b62e:	462a      	mov	r2, r5
 800b630:	f7ff f8e0 	bl	800a7f4 <__s2b>
 800b634:	9007      	str	r0, [sp, #28]
 800b636:	2800      	cmp	r0, #0
 800b638:	f43f af0a 	beq.w	800b450 <_strtod_l+0x418>
 800b63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b63e:	1b3f      	subs	r7, r7, r4
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfb4      	ite	lt
 800b644:	463b      	movlt	r3, r7
 800b646:	2300      	movge	r3, #0
 800b648:	930a      	str	r3, [sp, #40]	@ 0x28
 800b64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b878 <_strtod_l+0x840>
 800b650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b654:	2400      	movs	r4, #0
 800b656:	930d      	str	r3, [sp, #52]	@ 0x34
 800b658:	4625      	mov	r5, r4
 800b65a:	9b07      	ldr	r3, [sp, #28]
 800b65c:	9805      	ldr	r0, [sp, #20]
 800b65e:	6859      	ldr	r1, [r3, #4]
 800b660:	f7ff f820 	bl	800a6a4 <_Balloc>
 800b664:	4606      	mov	r6, r0
 800b666:	2800      	cmp	r0, #0
 800b668:	f43f aef6 	beq.w	800b458 <_strtod_l+0x420>
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	691a      	ldr	r2, [r3, #16]
 800b670:	ec4b ab19 	vmov	d9, sl, fp
 800b674:	3202      	adds	r2, #2
 800b676:	f103 010c 	add.w	r1, r3, #12
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	300c      	adds	r0, #12
 800b67e:	f000 fef9 	bl	800c474 <memcpy>
 800b682:	eeb0 0b49 	vmov.f64	d0, d9
 800b686:	9805      	ldr	r0, [sp, #20]
 800b688:	aa14      	add	r2, sp, #80	@ 0x50
 800b68a:	a913      	add	r1, sp, #76	@ 0x4c
 800b68c:	f7ff fbee 	bl	800ae6c <__d2b>
 800b690:	9012      	str	r0, [sp, #72]	@ 0x48
 800b692:	2800      	cmp	r0, #0
 800b694:	f43f aee0 	beq.w	800b458 <_strtod_l+0x420>
 800b698:	9805      	ldr	r0, [sp, #20]
 800b69a:	2101      	movs	r1, #1
 800b69c:	f7ff f940 	bl	800a920 <__i2b>
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	b940      	cbnz	r0, 800b6b6 <_strtod_l+0x67e>
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	e6d7      	b.n	800b458 <_strtod_l+0x420>
 800b6a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ac:	fa01 f202 	lsl.w	r2, r1, r2
 800b6b0:	ea02 0a0a 	and.w	sl, r2, sl
 800b6b4:	e7b0      	b.n	800b618 <_strtod_l+0x5e0>
 800b6b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b6b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6ba:	2f00      	cmp	r7, #0
 800b6bc:	bfab      	itete	ge
 800b6be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b6c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b6c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b6c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b6ca:	bfac      	ite	ge
 800b6cc:	eb07 0903 	addge.w	r9, r7, r3
 800b6d0:	eba3 0807 	sublt.w	r8, r3, r7
 800b6d4:	9b06      	ldr	r3, [sp, #24]
 800b6d6:	1aff      	subs	r7, r7, r3
 800b6d8:	4417      	add	r7, r2
 800b6da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b6de:	4a6b      	ldr	r2, [pc, #428]	@ (800b88c <_strtod_l+0x854>)
 800b6e0:	3f01      	subs	r7, #1
 800b6e2:	4297      	cmp	r7, r2
 800b6e4:	da51      	bge.n	800b78a <_strtod_l+0x752>
 800b6e6:	1bd1      	subs	r1, r2, r7
 800b6e8:	291f      	cmp	r1, #31
 800b6ea:	eba3 0301 	sub.w	r3, r3, r1
 800b6ee:	f04f 0201 	mov.w	r2, #1
 800b6f2:	dc3e      	bgt.n	800b772 <_strtod_l+0x73a>
 800b6f4:	408a      	lsls	r2, r1
 800b6f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b6fc:	eb09 0703 	add.w	r7, r9, r3
 800b700:	4498      	add	r8, r3
 800b702:	9b06      	ldr	r3, [sp, #24]
 800b704:	45b9      	cmp	r9, r7
 800b706:	4498      	add	r8, r3
 800b708:	464b      	mov	r3, r9
 800b70a:	bfa8      	it	ge
 800b70c:	463b      	movge	r3, r7
 800b70e:	4543      	cmp	r3, r8
 800b710:	bfa8      	it	ge
 800b712:	4643      	movge	r3, r8
 800b714:	2b00      	cmp	r3, #0
 800b716:	bfc2      	ittt	gt
 800b718:	1aff      	subgt	r7, r7, r3
 800b71a:	eba8 0803 	subgt.w	r8, r8, r3
 800b71e:	eba9 0903 	subgt.w	r9, r9, r3
 800b722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd16      	ble.n	800b756 <_strtod_l+0x71e>
 800b728:	4629      	mov	r1, r5
 800b72a:	9805      	ldr	r0, [sp, #20]
 800b72c:	461a      	mov	r2, r3
 800b72e:	f7ff f9b7 	bl	800aaa0 <__pow5mult>
 800b732:	4605      	mov	r5, r0
 800b734:	2800      	cmp	r0, #0
 800b736:	d0b5      	beq.n	800b6a4 <_strtod_l+0x66c>
 800b738:	4601      	mov	r1, r0
 800b73a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b73c:	9805      	ldr	r0, [sp, #20]
 800b73e:	f7ff f905 	bl	800a94c <__multiply>
 800b742:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b744:	2800      	cmp	r0, #0
 800b746:	f43f ae87 	beq.w	800b458 <_strtod_l+0x420>
 800b74a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b74c:	9805      	ldr	r0, [sp, #20]
 800b74e:	f7fe ffe9 	bl	800a724 <_Bfree>
 800b752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b754:	9312      	str	r3, [sp, #72]	@ 0x48
 800b756:	2f00      	cmp	r7, #0
 800b758:	dc1b      	bgt.n	800b792 <_strtod_l+0x75a>
 800b75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd21      	ble.n	800b7a4 <_strtod_l+0x76c>
 800b760:	4631      	mov	r1, r6
 800b762:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	f7ff f99b 	bl	800aaa0 <__pow5mult>
 800b76a:	4606      	mov	r6, r0
 800b76c:	b9d0      	cbnz	r0, 800b7a4 <_strtod_l+0x76c>
 800b76e:	2600      	movs	r6, #0
 800b770:	e672      	b.n	800b458 <_strtod_l+0x420>
 800b772:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b776:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b77a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b77e:	37e2      	adds	r7, #226	@ 0xe2
 800b780:	fa02 f107 	lsl.w	r1, r2, r7
 800b784:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b786:	920c      	str	r2, [sp, #48]	@ 0x30
 800b788:	e7b8      	b.n	800b6fc <_strtod_l+0x6c4>
 800b78a:	2200      	movs	r2, #0
 800b78c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b78e:	2201      	movs	r2, #1
 800b790:	e7f9      	b.n	800b786 <_strtod_l+0x74e>
 800b792:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b794:	9805      	ldr	r0, [sp, #20]
 800b796:	463a      	mov	r2, r7
 800b798:	f7ff f9dc 	bl	800ab54 <__lshift>
 800b79c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d1db      	bne.n	800b75a <_strtod_l+0x722>
 800b7a2:	e659      	b.n	800b458 <_strtod_l+0x420>
 800b7a4:	f1b8 0f00 	cmp.w	r8, #0
 800b7a8:	dd07      	ble.n	800b7ba <_strtod_l+0x782>
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	9805      	ldr	r0, [sp, #20]
 800b7ae:	4642      	mov	r2, r8
 800b7b0:	f7ff f9d0 	bl	800ab54 <__lshift>
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0d9      	beq.n	800b76e <_strtod_l+0x736>
 800b7ba:	f1b9 0f00 	cmp.w	r9, #0
 800b7be:	dd08      	ble.n	800b7d2 <_strtod_l+0x79a>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	9805      	ldr	r0, [sp, #20]
 800b7c4:	464a      	mov	r2, r9
 800b7c6:	f7ff f9c5 	bl	800ab54 <__lshift>
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f43f ae43 	beq.w	800b458 <_strtod_l+0x420>
 800b7d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	4632      	mov	r2, r6
 800b7d8:	f7ff fa44 	bl	800ac64 <__mdiff>
 800b7dc:	4604      	mov	r4, r0
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f43f ae3a 	beq.w	800b458 <_strtod_l+0x420>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b7ea:	60c3      	str	r3, [r0, #12]
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7ff fa1d 	bl	800ac2c <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	da4e      	bge.n	800b894 <_strtod_l+0x85c>
 800b7f6:	ea58 080a 	orrs.w	r8, r8, sl
 800b7fa:	d174      	bne.n	800b8e6 <_strtod_l+0x8ae>
 800b7fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b800:	2b00      	cmp	r3, #0
 800b802:	d170      	bne.n	800b8e6 <_strtod_l+0x8ae>
 800b804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b808:	0d1b      	lsrs	r3, r3, #20
 800b80a:	051b      	lsls	r3, r3, #20
 800b80c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b810:	d969      	bls.n	800b8e6 <_strtod_l+0x8ae>
 800b812:	6963      	ldr	r3, [r4, #20]
 800b814:	b913      	cbnz	r3, 800b81c <_strtod_l+0x7e4>
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	dd64      	ble.n	800b8e6 <_strtod_l+0x8ae>
 800b81c:	4621      	mov	r1, r4
 800b81e:	2201      	movs	r2, #1
 800b820:	9805      	ldr	r0, [sp, #20]
 800b822:	f7ff f997 	bl	800ab54 <__lshift>
 800b826:	4629      	mov	r1, r5
 800b828:	4604      	mov	r4, r0
 800b82a:	f7ff f9ff 	bl	800ac2c <__mcmp>
 800b82e:	2800      	cmp	r0, #0
 800b830:	dd59      	ble.n	800b8e6 <_strtod_l+0x8ae>
 800b832:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b836:	9a06      	ldr	r2, [sp, #24]
 800b838:	0d1b      	lsrs	r3, r3, #20
 800b83a:	051b      	lsls	r3, r3, #20
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	d070      	beq.n	800b922 <_strtod_l+0x8ea>
 800b840:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b844:	d86d      	bhi.n	800b922 <_strtod_l+0x8ea>
 800b846:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b84a:	f67f ae99 	bls.w	800b580 <_strtod_l+0x548>
 800b84e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b880 <_strtod_l+0x848>
 800b852:	ec4b ab16 	vmov	d6, sl, fp
 800b856:	4b0e      	ldr	r3, [pc, #56]	@ (800b890 <_strtod_l+0x858>)
 800b858:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b85c:	ee17 2a90 	vmov	r2, s15
 800b860:	4013      	ands	r3, r2
 800b862:	ec5b ab17 	vmov	sl, fp, d7
 800b866:	2b00      	cmp	r3, #0
 800b868:	f47f ae01 	bne.w	800b46e <_strtod_l+0x436>
 800b86c:	9a05      	ldr	r2, [sp, #20]
 800b86e:	2322      	movs	r3, #34	@ 0x22
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	e5fc      	b.n	800b46e <_strtod_l+0x436>
 800b874:	f3af 8000 	nop.w
 800b878:	ffc00000 	.word	0xffc00000
 800b87c:	41dfffff 	.word	0x41dfffff
 800b880:	00000000 	.word	0x00000000
 800b884:	39500000 	.word	0x39500000
 800b888:	0800d618 	.word	0x0800d618
 800b88c:	fffffc02 	.word	0xfffffc02
 800b890:	7ff00000 	.word	0x7ff00000
 800b894:	46d9      	mov	r9, fp
 800b896:	d15d      	bne.n	800b954 <_strtod_l+0x91c>
 800b898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89c:	f1b8 0f00 	cmp.w	r8, #0
 800b8a0:	d02a      	beq.n	800b8f8 <_strtod_l+0x8c0>
 800b8a2:	4aab      	ldr	r2, [pc, #684]	@ (800bb50 <_strtod_l+0xb18>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d12a      	bne.n	800b8fe <_strtod_l+0x8c6>
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	b1fb      	cbz	r3, 800b8ee <_strtod_l+0x8b6>
 800b8ae:	4ba9      	ldr	r3, [pc, #676]	@ (800bb54 <_strtod_l+0xb1c>)
 800b8b0:	ea0b 0303 	and.w	r3, fp, r3
 800b8b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b8b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b8bc:	d81a      	bhi.n	800b8f4 <_strtod_l+0x8bc>
 800b8be:	0d1b      	lsrs	r3, r3, #20
 800b8c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d118      	bne.n	800b8fe <_strtod_l+0x8c6>
 800b8cc:	4ba2      	ldr	r3, [pc, #648]	@ (800bb58 <_strtod_l+0xb20>)
 800b8ce:	4599      	cmp	r9, r3
 800b8d0:	d102      	bne.n	800b8d8 <_strtod_l+0x8a0>
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	f43f adc0 	beq.w	800b458 <_strtod_l+0x420>
 800b8d8:	4b9e      	ldr	r3, [pc, #632]	@ (800bb54 <_strtod_l+0xb1c>)
 800b8da:	ea09 0303 	and.w	r3, r9, r3
 800b8de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b8e2:	f04f 0a00 	mov.w	sl, #0
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1b0      	bne.n	800b84e <_strtod_l+0x816>
 800b8ec:	e5bf      	b.n	800b46e <_strtod_l+0x436>
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f2:	e7e9      	b.n	800b8c8 <_strtod_l+0x890>
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	e7e7      	b.n	800b8c8 <_strtod_l+0x890>
 800b8f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b8fc:	d099      	beq.n	800b832 <_strtod_l+0x7fa>
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b900:	b1c3      	cbz	r3, 800b934 <_strtod_l+0x8fc>
 800b902:	ea13 0f09 	tst.w	r3, r9
 800b906:	d0ee      	beq.n	800b8e6 <_strtod_l+0x8ae>
 800b908:	9a06      	ldr	r2, [sp, #24]
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f1b8 0f00 	cmp.w	r8, #0
 800b912:	d013      	beq.n	800b93c <_strtod_l+0x904>
 800b914:	f7ff fb75 	bl	800b002 <sulp>
 800b918:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b91c:	ec5b ab17 	vmov	sl, fp, d7
 800b920:	e7e1      	b.n	800b8e6 <_strtod_l+0x8ae>
 800b922:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b926:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b92a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b92e:	f04f 3aff 	mov.w	sl, #4294967295
 800b932:	e7d8      	b.n	800b8e6 <_strtod_l+0x8ae>
 800b934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b936:	ea13 0f0a 	tst.w	r3, sl
 800b93a:	e7e4      	b.n	800b906 <_strtod_l+0x8ce>
 800b93c:	f7ff fb61 	bl	800b002 <sulp>
 800b940:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b944:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94c:	ec5b ab10 	vmov	sl, fp, d0
 800b950:	d1c9      	bne.n	800b8e6 <_strtod_l+0x8ae>
 800b952:	e615      	b.n	800b580 <_strtod_l+0x548>
 800b954:	4629      	mov	r1, r5
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff fae0 	bl	800af1c <__ratio>
 800b95c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b960:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	d85d      	bhi.n	800ba26 <_strtod_l+0x9ee>
 800b96a:	f1b8 0f00 	cmp.w	r8, #0
 800b96e:	d164      	bne.n	800ba3a <_strtod_l+0xa02>
 800b970:	f1ba 0f00 	cmp.w	sl, #0
 800b974:	d14b      	bne.n	800ba0e <_strtod_l+0x9d6>
 800b976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b97a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d160      	bne.n	800ba44 <_strtod_l+0xa0c>
 800b982:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b986:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	d401      	bmi.n	800b994 <_strtod_l+0x95c>
 800b990:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b994:	eeb1 ab48 	vneg.f64	d10, d8
 800b998:	486e      	ldr	r0, [pc, #440]	@ (800bb54 <_strtod_l+0xb1c>)
 800b99a:	4970      	ldr	r1, [pc, #448]	@ (800bb5c <_strtod_l+0xb24>)
 800b99c:	ea09 0700 	and.w	r7, r9, r0
 800b9a0:	428f      	cmp	r7, r1
 800b9a2:	ec53 2b1a 	vmov	r2, r3, d10
 800b9a6:	d17d      	bne.n	800baa4 <_strtod_l+0xa6c>
 800b9a8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b9ac:	ec4b ab1c 	vmov	d12, sl, fp
 800b9b0:	eeb0 0b4c 	vmov.f64	d0, d12
 800b9b4:	f7ff f9ea 	bl	800ad8c <__ulp>
 800b9b8:	4866      	ldr	r0, [pc, #408]	@ (800bb54 <_strtod_l+0xb1c>)
 800b9ba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b9be:	ee1c 3a90 	vmov	r3, s25
 800b9c2:	4a67      	ldr	r2, [pc, #412]	@ (800bb60 <_strtod_l+0xb28>)
 800b9c4:	ea03 0100 	and.w	r1, r3, r0
 800b9c8:	4291      	cmp	r1, r2
 800b9ca:	ec5b ab1c 	vmov	sl, fp, d12
 800b9ce:	d93c      	bls.n	800ba4a <_strtod_l+0xa12>
 800b9d0:	ee19 2a90 	vmov	r2, s19
 800b9d4:	4b60      	ldr	r3, [pc, #384]	@ (800bb58 <_strtod_l+0xb20>)
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d104      	bne.n	800b9e4 <_strtod_l+0x9ac>
 800b9da:	ee19 3a10 	vmov	r3, s18
 800b9de:	3301      	adds	r3, #1
 800b9e0:	f43f ad3a 	beq.w	800b458 <_strtod_l+0x420>
 800b9e4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800bb58 <_strtod_l+0xb20>
 800b9e8:	f04f 3aff 	mov.w	sl, #4294967295
 800b9ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b9ee:	9805      	ldr	r0, [sp, #20]
 800b9f0:	f7fe fe98 	bl	800a724 <_Bfree>
 800b9f4:	9805      	ldr	r0, [sp, #20]
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	f7fe fe94 	bl	800a724 <_Bfree>
 800b9fc:	9805      	ldr	r0, [sp, #20]
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7fe fe90 	bl	800a724 <_Bfree>
 800ba04:	9805      	ldr	r0, [sp, #20]
 800ba06:	4621      	mov	r1, r4
 800ba08:	f7fe fe8c 	bl	800a724 <_Bfree>
 800ba0c:	e625      	b.n	800b65a <_strtod_l+0x622>
 800ba0e:	f1ba 0f01 	cmp.w	sl, #1
 800ba12:	d103      	bne.n	800ba1c <_strtod_l+0x9e4>
 800ba14:	f1bb 0f00 	cmp.w	fp, #0
 800ba18:	f43f adb2 	beq.w	800b580 <_strtod_l+0x548>
 800ba1c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ba20:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ba24:	e7b8      	b.n	800b998 <_strtod_l+0x960>
 800ba26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ba2a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ba2e:	f1b8 0f00 	cmp.w	r8, #0
 800ba32:	d0af      	beq.n	800b994 <_strtod_l+0x95c>
 800ba34:	eeb0 ab48 	vmov.f64	d10, d8
 800ba38:	e7ae      	b.n	800b998 <_strtod_l+0x960>
 800ba3a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ba3e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ba42:	e7a9      	b.n	800b998 <_strtod_l+0x960>
 800ba44:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ba48:	e7a6      	b.n	800b998 <_strtod_l+0x960>
 800ba4a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	46d9      	mov	r9, fp
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1ca      	bne.n	800b9ec <_strtod_l+0x9b4>
 800ba56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba5a:	0d1b      	lsrs	r3, r3, #20
 800ba5c:	051b      	lsls	r3, r3, #20
 800ba5e:	429f      	cmp	r7, r3
 800ba60:	d1c4      	bne.n	800b9ec <_strtod_l+0x9b4>
 800ba62:	ec51 0b18 	vmov	r0, r1, d8
 800ba66:	f7f4 fe67 	bl	8000738 <__aeabi_d2lz>
 800ba6a:	f7f4 fe1f 	bl	80006ac <__aeabi_l2d>
 800ba6e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ba72:	ec41 0b17 	vmov	d7, r0, r1
 800ba76:	ea49 090a 	orr.w	r9, r9, sl
 800ba7a:	ea59 0908 	orrs.w	r9, r9, r8
 800ba7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ba82:	d03c      	beq.n	800bafe <_strtod_l+0xac6>
 800ba84:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800bb38 <_strtod_l+0xb00>
 800ba88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ba8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba90:	f53f aced 	bmi.w	800b46e <_strtod_l+0x436>
 800ba94:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bb40 <_strtod_l+0xb08>
 800ba98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ba9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa0:	dda4      	ble.n	800b9ec <_strtod_l+0x9b4>
 800baa2:	e4e4      	b.n	800b46e <_strtod_l+0x436>
 800baa4:	9906      	ldr	r1, [sp, #24]
 800baa6:	b1e1      	cbz	r1, 800bae2 <_strtod_l+0xaaa>
 800baa8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800baac:	d819      	bhi.n	800bae2 <_strtod_l+0xaaa>
 800baae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab6:	d811      	bhi.n	800badc <_strtod_l+0xaa4>
 800bab8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800babc:	ee18 3a10 	vmov	r3, s16
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	bf38      	it	cc
 800bac4:	2301      	movcc	r3, #1
 800bac6:	ee08 3a10 	vmov	s16, r3
 800baca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800bace:	f1b8 0f00 	cmp.w	r8, #0
 800bad2:	d111      	bne.n	800baf8 <_strtod_l+0xac0>
 800bad4:	eeb1 7b48 	vneg.f64	d7, d8
 800bad8:	ec53 2b17 	vmov	r2, r3, d7
 800badc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800bae0:	1bcb      	subs	r3, r1, r7
 800bae2:	eeb0 0b49 	vmov.f64	d0, d9
 800bae6:	ec43 2b1a 	vmov	d10, r2, r3
 800baea:	f7ff f94f 	bl	800ad8c <__ulp>
 800baee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800baf2:	ec5b ab19 	vmov	sl, fp, d9
 800baf6:	e7aa      	b.n	800ba4e <_strtod_l+0xa16>
 800baf8:	eeb0 7b48 	vmov.f64	d7, d8
 800bafc:	e7ec      	b.n	800bad8 <_strtod_l+0xaa0>
 800bafe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800bb48 <_strtod_l+0xb10>
 800bb02:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0a:	f57f af6f 	bpl.w	800b9ec <_strtod_l+0x9b4>
 800bb0e:	e4ae      	b.n	800b46e <_strtod_l+0x436>
 800bb10:	2300      	movs	r3, #0
 800bb12:	9308      	str	r3, [sp, #32]
 800bb14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	f7ff bacc 	b.w	800b0b6 <_strtod_l+0x7e>
 800bb1e:	2a65      	cmp	r2, #101	@ 0x65
 800bb20:	f43f abbc 	beq.w	800b29c <_strtod_l+0x264>
 800bb24:	2a45      	cmp	r2, #69	@ 0x45
 800bb26:	f43f abb9 	beq.w	800b29c <_strtod_l+0x264>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	9306      	str	r3, [sp, #24]
 800bb2e:	f7ff bbf0 	b.w	800b312 <_strtod_l+0x2da>
 800bb32:	bf00      	nop
 800bb34:	f3af 8000 	nop.w
 800bb38:	94a03595 	.word	0x94a03595
 800bb3c:	3fdfffff 	.word	0x3fdfffff
 800bb40:	35afe535 	.word	0x35afe535
 800bb44:	3fe00000 	.word	0x3fe00000
 800bb48:	94a03595 	.word	0x94a03595
 800bb4c:	3fcfffff 	.word	0x3fcfffff
 800bb50:	000fffff 	.word	0x000fffff
 800bb54:	7ff00000 	.word	0x7ff00000
 800bb58:	7fefffff 	.word	0x7fefffff
 800bb5c:	7fe00000 	.word	0x7fe00000
 800bb60:	7c9fffff 	.word	0x7c9fffff

0800bb64 <_strtod_r>:
 800bb64:	4b01      	ldr	r3, [pc, #4]	@ (800bb6c <_strtod_r+0x8>)
 800bb66:	f7ff ba67 	b.w	800b038 <_strtod_l>
 800bb6a:	bf00      	nop
 800bb6c:	2400006c 	.word	0x2400006c

0800bb70 <_strtol_l.constprop.0>:
 800bb70:	2b24      	cmp	r3, #36	@ 0x24
 800bb72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb76:	4686      	mov	lr, r0
 800bb78:	4690      	mov	r8, r2
 800bb7a:	d801      	bhi.n	800bb80 <_strtol_l.constprop.0+0x10>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d106      	bne.n	800bb8e <_strtol_l.constprop.0+0x1e>
 800bb80:	f7fd fe7e 	bl	8009880 <__errno>
 800bb84:	2316      	movs	r3, #22
 800bb86:	6003      	str	r3, [r0, #0]
 800bb88:	2000      	movs	r0, #0
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8e:	4834      	ldr	r0, [pc, #208]	@ (800bc60 <_strtol_l.constprop.0+0xf0>)
 800bb90:	460d      	mov	r5, r1
 800bb92:	462a      	mov	r2, r5
 800bb94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb98:	5d06      	ldrb	r6, [r0, r4]
 800bb9a:	f016 0608 	ands.w	r6, r6, #8
 800bb9e:	d1f8      	bne.n	800bb92 <_strtol_l.constprop.0+0x22>
 800bba0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bba2:	d12d      	bne.n	800bc00 <_strtol_l.constprop.0+0x90>
 800bba4:	782c      	ldrb	r4, [r5, #0]
 800bba6:	2601      	movs	r6, #1
 800bba8:	1c95      	adds	r5, r2, #2
 800bbaa:	f033 0210 	bics.w	r2, r3, #16
 800bbae:	d109      	bne.n	800bbc4 <_strtol_l.constprop.0+0x54>
 800bbb0:	2c30      	cmp	r4, #48	@ 0x30
 800bbb2:	d12a      	bne.n	800bc0a <_strtol_l.constprop.0+0x9a>
 800bbb4:	782a      	ldrb	r2, [r5, #0]
 800bbb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bbba:	2a58      	cmp	r2, #88	@ 0x58
 800bbbc:	d125      	bne.n	800bc0a <_strtol_l.constprop.0+0x9a>
 800bbbe:	786c      	ldrb	r4, [r5, #1]
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	3502      	adds	r5, #2
 800bbc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bbc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bbcc:	2200      	movs	r2, #0
 800bbce:	fbbc f9f3 	udiv	r9, ip, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	fb03 ca19 	mls	sl, r3, r9, ip
 800bbd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bbdc:	2f09      	cmp	r7, #9
 800bbde:	d81b      	bhi.n	800bc18 <_strtol_l.constprop.0+0xa8>
 800bbe0:	463c      	mov	r4, r7
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	dd27      	ble.n	800bc36 <_strtol_l.constprop.0+0xc6>
 800bbe6:	1c57      	adds	r7, r2, #1
 800bbe8:	d007      	beq.n	800bbfa <_strtol_l.constprop.0+0x8a>
 800bbea:	4581      	cmp	r9, r0
 800bbec:	d320      	bcc.n	800bc30 <_strtol_l.constprop.0+0xc0>
 800bbee:	d101      	bne.n	800bbf4 <_strtol_l.constprop.0+0x84>
 800bbf0:	45a2      	cmp	sl, r4
 800bbf2:	db1d      	blt.n	800bc30 <_strtol_l.constprop.0+0xc0>
 800bbf4:	fb00 4003 	mla	r0, r0, r3, r4
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbfe:	e7eb      	b.n	800bbd8 <_strtol_l.constprop.0+0x68>
 800bc00:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc02:	bf04      	itt	eq
 800bc04:	782c      	ldrbeq	r4, [r5, #0]
 800bc06:	1c95      	addeq	r5, r2, #2
 800bc08:	e7cf      	b.n	800bbaa <_strtol_l.constprop.0+0x3a>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1da      	bne.n	800bbc4 <_strtol_l.constprop.0+0x54>
 800bc0e:	2c30      	cmp	r4, #48	@ 0x30
 800bc10:	bf0c      	ite	eq
 800bc12:	2308      	moveq	r3, #8
 800bc14:	230a      	movne	r3, #10
 800bc16:	e7d5      	b.n	800bbc4 <_strtol_l.constprop.0+0x54>
 800bc18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bc1c:	2f19      	cmp	r7, #25
 800bc1e:	d801      	bhi.n	800bc24 <_strtol_l.constprop.0+0xb4>
 800bc20:	3c37      	subs	r4, #55	@ 0x37
 800bc22:	e7de      	b.n	800bbe2 <_strtol_l.constprop.0+0x72>
 800bc24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bc28:	2f19      	cmp	r7, #25
 800bc2a:	d804      	bhi.n	800bc36 <_strtol_l.constprop.0+0xc6>
 800bc2c:	3c57      	subs	r4, #87	@ 0x57
 800bc2e:	e7d8      	b.n	800bbe2 <_strtol_l.constprop.0+0x72>
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	e7e1      	b.n	800bbfa <_strtol_l.constprop.0+0x8a>
 800bc36:	1c53      	adds	r3, r2, #1
 800bc38:	d108      	bne.n	800bc4c <_strtol_l.constprop.0+0xdc>
 800bc3a:	2322      	movs	r3, #34	@ 0x22
 800bc3c:	f8ce 3000 	str.w	r3, [lr]
 800bc40:	4660      	mov	r0, ip
 800bc42:	f1b8 0f00 	cmp.w	r8, #0
 800bc46:	d0a0      	beq.n	800bb8a <_strtol_l.constprop.0+0x1a>
 800bc48:	1e69      	subs	r1, r5, #1
 800bc4a:	e006      	b.n	800bc5a <_strtol_l.constprop.0+0xea>
 800bc4c:	b106      	cbz	r6, 800bc50 <_strtol_l.constprop.0+0xe0>
 800bc4e:	4240      	negs	r0, r0
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	d099      	beq.n	800bb8a <_strtol_l.constprop.0+0x1a>
 800bc56:	2a00      	cmp	r2, #0
 800bc58:	d1f6      	bne.n	800bc48 <_strtol_l.constprop.0+0xd8>
 800bc5a:	f8c8 1000 	str.w	r1, [r8]
 800bc5e:	e794      	b.n	800bb8a <_strtol_l.constprop.0+0x1a>
 800bc60:	0800d641 	.word	0x0800d641

0800bc64 <_strtol_r>:
 800bc64:	f7ff bf84 	b.w	800bb70 <_strtol_l.constprop.0>

0800bc68 <__ssputs_r>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	688e      	ldr	r6, [r1, #8]
 800bc6e:	461f      	mov	r7, r3
 800bc70:	42be      	cmp	r6, r7
 800bc72:	680b      	ldr	r3, [r1, #0]
 800bc74:	4682      	mov	sl, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4690      	mov	r8, r2
 800bc7a:	d82d      	bhi.n	800bcd8 <__ssputs_r+0x70>
 800bc7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc84:	d026      	beq.n	800bcd4 <__ssputs_r+0x6c>
 800bc86:	6965      	ldr	r5, [r4, #20]
 800bc88:	6909      	ldr	r1, [r1, #16]
 800bc8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc8e:	eba3 0901 	sub.w	r9, r3, r1
 800bc92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc96:	1c7b      	adds	r3, r7, #1
 800bc98:	444b      	add	r3, r9
 800bc9a:	106d      	asrs	r5, r5, #1
 800bc9c:	429d      	cmp	r5, r3
 800bc9e:	bf38      	it	cc
 800bca0:	461d      	movcc	r5, r3
 800bca2:	0553      	lsls	r3, r2, #21
 800bca4:	d527      	bpl.n	800bcf6 <__ssputs_r+0x8e>
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7fe fc70 	bl	800a58c <_malloc_r>
 800bcac:	4606      	mov	r6, r0
 800bcae:	b360      	cbz	r0, 800bd0a <__ssputs_r+0xa2>
 800bcb0:	6921      	ldr	r1, [r4, #16]
 800bcb2:	464a      	mov	r2, r9
 800bcb4:	f000 fbde 	bl	800c474 <memcpy>
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	6126      	str	r6, [r4, #16]
 800bcc6:	6165      	str	r5, [r4, #20]
 800bcc8:	444e      	add	r6, r9
 800bcca:	eba5 0509 	sub.w	r5, r5, r9
 800bcce:	6026      	str	r6, [r4, #0]
 800bcd0:	60a5      	str	r5, [r4, #8]
 800bcd2:	463e      	mov	r6, r7
 800bcd4:	42be      	cmp	r6, r7
 800bcd6:	d900      	bls.n	800bcda <__ssputs_r+0x72>
 800bcd8:	463e      	mov	r6, r7
 800bcda:	6820      	ldr	r0, [r4, #0]
 800bcdc:	4632      	mov	r2, r6
 800bcde:	4641      	mov	r1, r8
 800bce0:	f000 fb6a 	bl	800c3b8 <memmove>
 800bce4:	68a3      	ldr	r3, [r4, #8]
 800bce6:	1b9b      	subs	r3, r3, r6
 800bce8:	60a3      	str	r3, [r4, #8]
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	4433      	add	r3, r6
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	f000 ff4f 	bl	800cb9a <_realloc_r>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d1e0      	bne.n	800bcc4 <__ssputs_r+0x5c>
 800bd02:	6921      	ldr	r1, [r4, #16]
 800bd04:	4650      	mov	r0, sl
 800bd06:	f7fe fbcd 	bl	800a4a4 <_free_r>
 800bd0a:	230c      	movs	r3, #12
 800bd0c:	f8ca 3000 	str.w	r3, [sl]
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	e7e9      	b.n	800bcf2 <__ssputs_r+0x8a>
	...

0800bd20 <_svfiprintf_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4698      	mov	r8, r3
 800bd26:	898b      	ldrh	r3, [r1, #12]
 800bd28:	061b      	lsls	r3, r3, #24
 800bd2a:	b09d      	sub	sp, #116	@ 0x74
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	4614      	mov	r4, r2
 800bd32:	d510      	bpl.n	800bd56 <_svfiprintf_r+0x36>
 800bd34:	690b      	ldr	r3, [r1, #16]
 800bd36:	b973      	cbnz	r3, 800bd56 <_svfiprintf_r+0x36>
 800bd38:	2140      	movs	r1, #64	@ 0x40
 800bd3a:	f7fe fc27 	bl	800a58c <_malloc_r>
 800bd3e:	6028      	str	r0, [r5, #0]
 800bd40:	6128      	str	r0, [r5, #16]
 800bd42:	b930      	cbnz	r0, 800bd52 <_svfiprintf_r+0x32>
 800bd44:	230c      	movs	r3, #12
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	b01d      	add	sp, #116	@ 0x74
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd52:	2340      	movs	r3, #64	@ 0x40
 800bd54:	616b      	str	r3, [r5, #20]
 800bd56:	2300      	movs	r3, #0
 800bd58:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5a:	2320      	movs	r3, #32
 800bd5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd64:	2330      	movs	r3, #48	@ 0x30
 800bd66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf04 <_svfiprintf_r+0x1e4>
 800bd6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd6e:	f04f 0901 	mov.w	r9, #1
 800bd72:	4623      	mov	r3, r4
 800bd74:	469a      	mov	sl, r3
 800bd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7a:	b10a      	cbz	r2, 800bd80 <_svfiprintf_r+0x60>
 800bd7c:	2a25      	cmp	r2, #37	@ 0x25
 800bd7e:	d1f9      	bne.n	800bd74 <_svfiprintf_r+0x54>
 800bd80:	ebba 0b04 	subs.w	fp, sl, r4
 800bd84:	d00b      	beq.n	800bd9e <_svfiprintf_r+0x7e>
 800bd86:	465b      	mov	r3, fp
 800bd88:	4622      	mov	r2, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	f7ff ff6b 	bl	800bc68 <__ssputs_r>
 800bd92:	3001      	adds	r0, #1
 800bd94:	f000 80a7 	beq.w	800bee6 <_svfiprintf_r+0x1c6>
 800bd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd9a:	445a      	add	r2, fp
 800bd9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 809f 	beq.w	800bee6 <_svfiprintf_r+0x1c6>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb2:	f10a 0a01 	add.w	sl, sl, #1
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	9307      	str	r3, [sp, #28]
 800bdba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdc0:	4654      	mov	r4, sl
 800bdc2:	2205      	movs	r2, #5
 800bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc8:	484e      	ldr	r0, [pc, #312]	@ (800bf04 <_svfiprintf_r+0x1e4>)
 800bdca:	f7f4 fa89 	bl	80002e0 <memchr>
 800bdce:	9a04      	ldr	r2, [sp, #16]
 800bdd0:	b9d8      	cbnz	r0, 800be0a <_svfiprintf_r+0xea>
 800bdd2:	06d0      	lsls	r0, r2, #27
 800bdd4:	bf44      	itt	mi
 800bdd6:	2320      	movmi	r3, #32
 800bdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bddc:	0711      	lsls	r1, r2, #28
 800bdde:	bf44      	itt	mi
 800bde0:	232b      	movmi	r3, #43	@ 0x2b
 800bde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdea:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdec:	d015      	beq.n	800be1a <_svfiprintf_r+0xfa>
 800bdee:	9a07      	ldr	r2, [sp, #28]
 800bdf0:	4654      	mov	r4, sl
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f04f 0c0a 	mov.w	ip, #10
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdfe:	3b30      	subs	r3, #48	@ 0x30
 800be00:	2b09      	cmp	r3, #9
 800be02:	d94b      	bls.n	800be9c <_svfiprintf_r+0x17c>
 800be04:	b1b0      	cbz	r0, 800be34 <_svfiprintf_r+0x114>
 800be06:	9207      	str	r2, [sp, #28]
 800be08:	e014      	b.n	800be34 <_svfiprintf_r+0x114>
 800be0a:	eba0 0308 	sub.w	r3, r0, r8
 800be0e:	fa09 f303 	lsl.w	r3, r9, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	46a2      	mov	sl, r4
 800be18:	e7d2      	b.n	800bdc0 <_svfiprintf_r+0xa0>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	1d19      	adds	r1, r3, #4
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	9103      	str	r1, [sp, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	bfbb      	ittet	lt
 800be26:	425b      	neglt	r3, r3
 800be28:	f042 0202 	orrlt.w	r2, r2, #2
 800be2c:	9307      	strge	r3, [sp, #28]
 800be2e:	9307      	strlt	r3, [sp, #28]
 800be30:	bfb8      	it	lt
 800be32:	9204      	strlt	r2, [sp, #16]
 800be34:	7823      	ldrb	r3, [r4, #0]
 800be36:	2b2e      	cmp	r3, #46	@ 0x2e
 800be38:	d10a      	bne.n	800be50 <_svfiprintf_r+0x130>
 800be3a:	7863      	ldrb	r3, [r4, #1]
 800be3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be3e:	d132      	bne.n	800bea6 <_svfiprintf_r+0x186>
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	1d1a      	adds	r2, r3, #4
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	9203      	str	r2, [sp, #12]
 800be48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be4c:	3402      	adds	r4, #2
 800be4e:	9305      	str	r3, [sp, #20]
 800be50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf14 <_svfiprintf_r+0x1f4>
 800be54:	7821      	ldrb	r1, [r4, #0]
 800be56:	2203      	movs	r2, #3
 800be58:	4650      	mov	r0, sl
 800be5a:	f7f4 fa41 	bl	80002e0 <memchr>
 800be5e:	b138      	cbz	r0, 800be70 <_svfiprintf_r+0x150>
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	eba0 000a 	sub.w	r0, r0, sl
 800be66:	2240      	movs	r2, #64	@ 0x40
 800be68:	4082      	lsls	r2, r0
 800be6a:	4313      	orrs	r3, r2
 800be6c:	3401      	adds	r4, #1
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be74:	4824      	ldr	r0, [pc, #144]	@ (800bf08 <_svfiprintf_r+0x1e8>)
 800be76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be7a:	2206      	movs	r2, #6
 800be7c:	f7f4 fa30 	bl	80002e0 <memchr>
 800be80:	2800      	cmp	r0, #0
 800be82:	d036      	beq.n	800bef2 <_svfiprintf_r+0x1d2>
 800be84:	4b21      	ldr	r3, [pc, #132]	@ (800bf0c <_svfiprintf_r+0x1ec>)
 800be86:	bb1b      	cbnz	r3, 800bed0 <_svfiprintf_r+0x1b0>
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	3307      	adds	r3, #7
 800be8c:	f023 0307 	bic.w	r3, r3, #7
 800be90:	3308      	adds	r3, #8
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be96:	4433      	add	r3, r6
 800be98:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9a:	e76a      	b.n	800bd72 <_svfiprintf_r+0x52>
 800be9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea0:	460c      	mov	r4, r1
 800bea2:	2001      	movs	r0, #1
 800bea4:	e7a8      	b.n	800bdf8 <_svfiprintf_r+0xd8>
 800bea6:	2300      	movs	r3, #0
 800bea8:	3401      	adds	r4, #1
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	4619      	mov	r1, r3
 800beae:	f04f 0c0a 	mov.w	ip, #10
 800beb2:	4620      	mov	r0, r4
 800beb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb8:	3a30      	subs	r2, #48	@ 0x30
 800beba:	2a09      	cmp	r2, #9
 800bebc:	d903      	bls.n	800bec6 <_svfiprintf_r+0x1a6>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0c6      	beq.n	800be50 <_svfiprintf_r+0x130>
 800bec2:	9105      	str	r1, [sp, #20]
 800bec4:	e7c4      	b.n	800be50 <_svfiprintf_r+0x130>
 800bec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beca:	4604      	mov	r4, r0
 800becc:	2301      	movs	r3, #1
 800bece:	e7f0      	b.n	800beb2 <_svfiprintf_r+0x192>
 800bed0:	ab03      	add	r3, sp, #12
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	462a      	mov	r2, r5
 800bed6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf10 <_svfiprintf_r+0x1f0>)
 800bed8:	a904      	add	r1, sp, #16
 800beda:	4638      	mov	r0, r7
 800bedc:	f7fc fca0 	bl	8008820 <_printf_float>
 800bee0:	1c42      	adds	r2, r0, #1
 800bee2:	4606      	mov	r6, r0
 800bee4:	d1d6      	bne.n	800be94 <_svfiprintf_r+0x174>
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	065b      	lsls	r3, r3, #25
 800beea:	f53f af2d 	bmi.w	800bd48 <_svfiprintf_r+0x28>
 800beee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef0:	e72c      	b.n	800bd4c <_svfiprintf_r+0x2c>
 800bef2:	ab03      	add	r3, sp, #12
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	462a      	mov	r2, r5
 800bef8:	4b05      	ldr	r3, [pc, #20]	@ (800bf10 <_svfiprintf_r+0x1f0>)
 800befa:	a904      	add	r1, sp, #16
 800befc:	4638      	mov	r0, r7
 800befe:	f7fc ff17 	bl	8008d30 <_printf_i>
 800bf02:	e7ed      	b.n	800bee0 <_svfiprintf_r+0x1c0>
 800bf04:	0800d741 	.word	0x0800d741
 800bf08:	0800d74b 	.word	0x0800d74b
 800bf0c:	08008821 	.word	0x08008821
 800bf10:	0800bc69 	.word	0x0800bc69
 800bf14:	0800d747 	.word	0x0800d747

0800bf18 <__sfputc_r>:
 800bf18:	6893      	ldr	r3, [r2, #8]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	b410      	push	{r4}
 800bf20:	6093      	str	r3, [r2, #8]
 800bf22:	da08      	bge.n	800bf36 <__sfputc_r+0x1e>
 800bf24:	6994      	ldr	r4, [r2, #24]
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	db01      	blt.n	800bf2e <__sfputc_r+0x16>
 800bf2a:	290a      	cmp	r1, #10
 800bf2c:	d103      	bne.n	800bf36 <__sfputc_r+0x1e>
 800bf2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf32:	f7fd bbbe 	b.w	80096b2 <__swbuf_r>
 800bf36:	6813      	ldr	r3, [r2, #0]
 800bf38:	1c58      	adds	r0, r3, #1
 800bf3a:	6010      	str	r0, [r2, #0]
 800bf3c:	7019      	strb	r1, [r3, #0]
 800bf3e:	4608      	mov	r0, r1
 800bf40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <__sfputs_r>:
 800bf46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	18d5      	adds	r5, r2, r3
 800bf50:	42ac      	cmp	r4, r5
 800bf52:	d101      	bne.n	800bf58 <__sfputs_r+0x12>
 800bf54:	2000      	movs	r0, #0
 800bf56:	e007      	b.n	800bf68 <__sfputs_r+0x22>
 800bf58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5c:	463a      	mov	r2, r7
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f7ff ffda 	bl	800bf18 <__sfputc_r>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d1f3      	bne.n	800bf50 <__sfputs_r+0xa>
 800bf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf6c <_vfiprintf_r>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	460d      	mov	r5, r1
 800bf72:	b09d      	sub	sp, #116	@ 0x74
 800bf74:	4614      	mov	r4, r2
 800bf76:	4698      	mov	r8, r3
 800bf78:	4606      	mov	r6, r0
 800bf7a:	b118      	cbz	r0, 800bf84 <_vfiprintf_r+0x18>
 800bf7c:	6a03      	ldr	r3, [r0, #32]
 800bf7e:	b90b      	cbnz	r3, 800bf84 <_vfiprintf_r+0x18>
 800bf80:	f7fd fa8e 	bl	80094a0 <__sinit>
 800bf84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf86:	07d9      	lsls	r1, r3, #31
 800bf88:	d405      	bmi.n	800bf96 <_vfiprintf_r+0x2a>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	059a      	lsls	r2, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_vfiprintf_r+0x2a>
 800bf90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf92:	f7fd fca0 	bl	80098d6 <__retarget_lock_acquire_recursive>
 800bf96:	89ab      	ldrh	r3, [r5, #12]
 800bf98:	071b      	lsls	r3, r3, #28
 800bf9a:	d501      	bpl.n	800bfa0 <_vfiprintf_r+0x34>
 800bf9c:	692b      	ldr	r3, [r5, #16]
 800bf9e:	b99b      	cbnz	r3, 800bfc8 <_vfiprintf_r+0x5c>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7fd fbc4 	bl	8009730 <__swsetup_r>
 800bfa8:	b170      	cbz	r0, 800bfc8 <_vfiprintf_r+0x5c>
 800bfaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfac:	07dc      	lsls	r4, r3, #31
 800bfae:	d504      	bpl.n	800bfba <_vfiprintf_r+0x4e>
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb4:	b01d      	add	sp, #116	@ 0x74
 800bfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	0598      	lsls	r0, r3, #22
 800bfbe:	d4f7      	bmi.n	800bfb0 <_vfiprintf_r+0x44>
 800bfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfc2:	f7fd fc89 	bl	80098d8 <__retarget_lock_release_recursive>
 800bfc6:	e7f3      	b.n	800bfb0 <_vfiprintf_r+0x44>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfcc:	2320      	movs	r3, #32
 800bfce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfd6:	2330      	movs	r3, #48	@ 0x30
 800bfd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c188 <_vfiprintf_r+0x21c>
 800bfdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfe0:	f04f 0901 	mov.w	r9, #1
 800bfe4:	4623      	mov	r3, r4
 800bfe6:	469a      	mov	sl, r3
 800bfe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfec:	b10a      	cbz	r2, 800bff2 <_vfiprintf_r+0x86>
 800bfee:	2a25      	cmp	r2, #37	@ 0x25
 800bff0:	d1f9      	bne.n	800bfe6 <_vfiprintf_r+0x7a>
 800bff2:	ebba 0b04 	subs.w	fp, sl, r4
 800bff6:	d00b      	beq.n	800c010 <_vfiprintf_r+0xa4>
 800bff8:	465b      	mov	r3, fp
 800bffa:	4622      	mov	r2, r4
 800bffc:	4629      	mov	r1, r5
 800bffe:	4630      	mov	r0, r6
 800c000:	f7ff ffa1 	bl	800bf46 <__sfputs_r>
 800c004:	3001      	adds	r0, #1
 800c006:	f000 80a7 	beq.w	800c158 <_vfiprintf_r+0x1ec>
 800c00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c00c:	445a      	add	r2, fp
 800c00e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c010:	f89a 3000 	ldrb.w	r3, [sl]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 809f 	beq.w	800c158 <_vfiprintf_r+0x1ec>
 800c01a:	2300      	movs	r3, #0
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295
 800c020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c024:	f10a 0a01 	add.w	sl, sl, #1
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	9307      	str	r3, [sp, #28]
 800c02c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c030:	931a      	str	r3, [sp, #104]	@ 0x68
 800c032:	4654      	mov	r4, sl
 800c034:	2205      	movs	r2, #5
 800c036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c03a:	4853      	ldr	r0, [pc, #332]	@ (800c188 <_vfiprintf_r+0x21c>)
 800c03c:	f7f4 f950 	bl	80002e0 <memchr>
 800c040:	9a04      	ldr	r2, [sp, #16]
 800c042:	b9d8      	cbnz	r0, 800c07c <_vfiprintf_r+0x110>
 800c044:	06d1      	lsls	r1, r2, #27
 800c046:	bf44      	itt	mi
 800c048:	2320      	movmi	r3, #32
 800c04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c04e:	0713      	lsls	r3, r2, #28
 800c050:	bf44      	itt	mi
 800c052:	232b      	movmi	r3, #43	@ 0x2b
 800c054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c058:	f89a 3000 	ldrb.w	r3, [sl]
 800c05c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c05e:	d015      	beq.n	800c08c <_vfiprintf_r+0x120>
 800c060:	9a07      	ldr	r2, [sp, #28]
 800c062:	4654      	mov	r4, sl
 800c064:	2000      	movs	r0, #0
 800c066:	f04f 0c0a 	mov.w	ip, #10
 800c06a:	4621      	mov	r1, r4
 800c06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c070:	3b30      	subs	r3, #48	@ 0x30
 800c072:	2b09      	cmp	r3, #9
 800c074:	d94b      	bls.n	800c10e <_vfiprintf_r+0x1a2>
 800c076:	b1b0      	cbz	r0, 800c0a6 <_vfiprintf_r+0x13a>
 800c078:	9207      	str	r2, [sp, #28]
 800c07a:	e014      	b.n	800c0a6 <_vfiprintf_r+0x13a>
 800c07c:	eba0 0308 	sub.w	r3, r0, r8
 800c080:	fa09 f303 	lsl.w	r3, r9, r3
 800c084:	4313      	orrs	r3, r2
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	46a2      	mov	sl, r4
 800c08a:	e7d2      	b.n	800c032 <_vfiprintf_r+0xc6>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	1d19      	adds	r1, r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	9103      	str	r1, [sp, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfbb      	ittet	lt
 800c098:	425b      	neglt	r3, r3
 800c09a:	f042 0202 	orrlt.w	r2, r2, #2
 800c09e:	9307      	strge	r3, [sp, #28]
 800c0a0:	9307      	strlt	r3, [sp, #28]
 800c0a2:	bfb8      	it	lt
 800c0a4:	9204      	strlt	r2, [sp, #16]
 800c0a6:	7823      	ldrb	r3, [r4, #0]
 800c0a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0aa:	d10a      	bne.n	800c0c2 <_vfiprintf_r+0x156>
 800c0ac:	7863      	ldrb	r3, [r4, #1]
 800c0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0b0:	d132      	bne.n	800c118 <_vfiprintf_r+0x1ac>
 800c0b2:	9b03      	ldr	r3, [sp, #12]
 800c0b4:	1d1a      	adds	r2, r3, #4
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	9203      	str	r2, [sp, #12]
 800c0ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0be:	3402      	adds	r4, #2
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c198 <_vfiprintf_r+0x22c>
 800c0c6:	7821      	ldrb	r1, [r4, #0]
 800c0c8:	2203      	movs	r2, #3
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	f7f4 f908 	bl	80002e0 <memchr>
 800c0d0:	b138      	cbz	r0, 800c0e2 <_vfiprintf_r+0x176>
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	eba0 000a 	sub.w	r0, r0, sl
 800c0d8:	2240      	movs	r2, #64	@ 0x40
 800c0da:	4082      	lsls	r2, r0
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	3401      	adds	r4, #1
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4829      	ldr	r0, [pc, #164]	@ (800c18c <_vfiprintf_r+0x220>)
 800c0e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	f7f4 f8f7 	bl	80002e0 <memchr>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d03f      	beq.n	800c176 <_vfiprintf_r+0x20a>
 800c0f6:	4b26      	ldr	r3, [pc, #152]	@ (800c190 <_vfiprintf_r+0x224>)
 800c0f8:	bb1b      	cbnz	r3, 800c142 <_vfiprintf_r+0x1d6>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	3307      	adds	r3, #7
 800c0fe:	f023 0307 	bic.w	r3, r3, #7
 800c102:	3308      	adds	r3, #8
 800c104:	9303      	str	r3, [sp, #12]
 800c106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c108:	443b      	add	r3, r7
 800c10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c10c:	e76a      	b.n	800bfe4 <_vfiprintf_r+0x78>
 800c10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c112:	460c      	mov	r4, r1
 800c114:	2001      	movs	r0, #1
 800c116:	e7a8      	b.n	800c06a <_vfiprintf_r+0xfe>
 800c118:	2300      	movs	r3, #0
 800c11a:	3401      	adds	r4, #1
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	4619      	mov	r1, r3
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4620      	mov	r0, r4
 800c126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c12a:	3a30      	subs	r2, #48	@ 0x30
 800c12c:	2a09      	cmp	r2, #9
 800c12e:	d903      	bls.n	800c138 <_vfiprintf_r+0x1cc>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0c6      	beq.n	800c0c2 <_vfiprintf_r+0x156>
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	e7c4      	b.n	800c0c2 <_vfiprintf_r+0x156>
 800c138:	fb0c 2101 	mla	r1, ip, r1, r2
 800c13c:	4604      	mov	r4, r0
 800c13e:	2301      	movs	r3, #1
 800c140:	e7f0      	b.n	800c124 <_vfiprintf_r+0x1b8>
 800c142:	ab03      	add	r3, sp, #12
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	462a      	mov	r2, r5
 800c148:	4b12      	ldr	r3, [pc, #72]	@ (800c194 <_vfiprintf_r+0x228>)
 800c14a:	a904      	add	r1, sp, #16
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7fc fb67 	bl	8008820 <_printf_float>
 800c152:	4607      	mov	r7, r0
 800c154:	1c78      	adds	r0, r7, #1
 800c156:	d1d6      	bne.n	800c106 <_vfiprintf_r+0x19a>
 800c158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_vfiprintf_r+0x1fe>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	059a      	lsls	r2, r3, #22
 800c162:	d402      	bmi.n	800c16a <_vfiprintf_r+0x1fe>
 800c164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c166:	f7fd fbb7 	bl	80098d8 <__retarget_lock_release_recursive>
 800c16a:	89ab      	ldrh	r3, [r5, #12]
 800c16c:	065b      	lsls	r3, r3, #25
 800c16e:	f53f af1f 	bmi.w	800bfb0 <_vfiprintf_r+0x44>
 800c172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c174:	e71e      	b.n	800bfb4 <_vfiprintf_r+0x48>
 800c176:	ab03      	add	r3, sp, #12
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	462a      	mov	r2, r5
 800c17c:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <_vfiprintf_r+0x228>)
 800c17e:	a904      	add	r1, sp, #16
 800c180:	4630      	mov	r0, r6
 800c182:	f7fc fdd5 	bl	8008d30 <_printf_i>
 800c186:	e7e4      	b.n	800c152 <_vfiprintf_r+0x1e6>
 800c188:	0800d741 	.word	0x0800d741
 800c18c:	0800d74b 	.word	0x0800d74b
 800c190:	08008821 	.word	0x08008821
 800c194:	0800bf47 	.word	0x0800bf47
 800c198:	0800d747 	.word	0x0800d747

0800c19c <__sflush_r>:
 800c19c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a4:	0716      	lsls	r6, r2, #28
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	d454      	bmi.n	800c256 <__sflush_r+0xba>
 800c1ac:	684b      	ldr	r3, [r1, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dc02      	bgt.n	800c1b8 <__sflush_r+0x1c>
 800c1b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd48      	ble.n	800c24a <__sflush_r+0xae>
 800c1b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d045      	beq.n	800c24a <__sflush_r+0xae>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1c4:	682f      	ldr	r7, [r5, #0]
 800c1c6:	6a21      	ldr	r1, [r4, #32]
 800c1c8:	602b      	str	r3, [r5, #0]
 800c1ca:	d030      	beq.n	800c22e <__sflush_r+0x92>
 800c1cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	0759      	lsls	r1, r3, #29
 800c1d2:	d505      	bpl.n	800c1e0 <__sflush_r+0x44>
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	1ad2      	subs	r2, r2, r3
 800c1d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1da:	b10b      	cbz	r3, 800c1e0 <__sflush_r+0x44>
 800c1dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1e4:	6a21      	ldr	r1, [r4, #32]
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b0      	blx	r6
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	d106      	bne.n	800c1fe <__sflush_r+0x62>
 800c1f0:	6829      	ldr	r1, [r5, #0]
 800c1f2:	291d      	cmp	r1, #29
 800c1f4:	d82b      	bhi.n	800c24e <__sflush_r+0xb2>
 800c1f6:	4a2a      	ldr	r2, [pc, #168]	@ (800c2a0 <__sflush_r+0x104>)
 800c1f8:	410a      	asrs	r2, r1
 800c1fa:	07d6      	lsls	r6, r2, #31
 800c1fc:	d427      	bmi.n	800c24e <__sflush_r+0xb2>
 800c1fe:	2200      	movs	r2, #0
 800c200:	6062      	str	r2, [r4, #4]
 800c202:	04d9      	lsls	r1, r3, #19
 800c204:	6922      	ldr	r2, [r4, #16]
 800c206:	6022      	str	r2, [r4, #0]
 800c208:	d504      	bpl.n	800c214 <__sflush_r+0x78>
 800c20a:	1c42      	adds	r2, r0, #1
 800c20c:	d101      	bne.n	800c212 <__sflush_r+0x76>
 800c20e:	682b      	ldr	r3, [r5, #0]
 800c210:	b903      	cbnz	r3, 800c214 <__sflush_r+0x78>
 800c212:	6560      	str	r0, [r4, #84]	@ 0x54
 800c214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c216:	602f      	str	r7, [r5, #0]
 800c218:	b1b9      	cbz	r1, 800c24a <__sflush_r+0xae>
 800c21a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c21e:	4299      	cmp	r1, r3
 800c220:	d002      	beq.n	800c228 <__sflush_r+0x8c>
 800c222:	4628      	mov	r0, r5
 800c224:	f7fe f93e 	bl	800a4a4 <_free_r>
 800c228:	2300      	movs	r3, #0
 800c22a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c22c:	e00d      	b.n	800c24a <__sflush_r+0xae>
 800c22e:	2301      	movs	r3, #1
 800c230:	4628      	mov	r0, r5
 800c232:	47b0      	blx	r6
 800c234:	4602      	mov	r2, r0
 800c236:	1c50      	adds	r0, r2, #1
 800c238:	d1c9      	bne.n	800c1ce <__sflush_r+0x32>
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0c6      	beq.n	800c1ce <__sflush_r+0x32>
 800c240:	2b1d      	cmp	r3, #29
 800c242:	d001      	beq.n	800c248 <__sflush_r+0xac>
 800c244:	2b16      	cmp	r3, #22
 800c246:	d11e      	bne.n	800c286 <__sflush_r+0xea>
 800c248:	602f      	str	r7, [r5, #0]
 800c24a:	2000      	movs	r0, #0
 800c24c:	e022      	b.n	800c294 <__sflush_r+0xf8>
 800c24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c252:	b21b      	sxth	r3, r3
 800c254:	e01b      	b.n	800c28e <__sflush_r+0xf2>
 800c256:	690f      	ldr	r7, [r1, #16]
 800c258:	2f00      	cmp	r7, #0
 800c25a:	d0f6      	beq.n	800c24a <__sflush_r+0xae>
 800c25c:	0793      	lsls	r3, r2, #30
 800c25e:	680e      	ldr	r6, [r1, #0]
 800c260:	bf08      	it	eq
 800c262:	694b      	ldreq	r3, [r1, #20]
 800c264:	600f      	str	r7, [r1, #0]
 800c266:	bf18      	it	ne
 800c268:	2300      	movne	r3, #0
 800c26a:	eba6 0807 	sub.w	r8, r6, r7
 800c26e:	608b      	str	r3, [r1, #8]
 800c270:	f1b8 0f00 	cmp.w	r8, #0
 800c274:	dde9      	ble.n	800c24a <__sflush_r+0xae>
 800c276:	6a21      	ldr	r1, [r4, #32]
 800c278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c27a:	4643      	mov	r3, r8
 800c27c:	463a      	mov	r2, r7
 800c27e:	4628      	mov	r0, r5
 800c280:	47b0      	blx	r6
 800c282:	2800      	cmp	r0, #0
 800c284:	dc08      	bgt.n	800c298 <__sflush_r+0xfc>
 800c286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c28e:	81a3      	strh	r3, [r4, #12]
 800c290:	f04f 30ff 	mov.w	r0, #4294967295
 800c294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c298:	4407      	add	r7, r0
 800c29a:	eba8 0800 	sub.w	r8, r8, r0
 800c29e:	e7e7      	b.n	800c270 <__sflush_r+0xd4>
 800c2a0:	dfbffffe 	.word	0xdfbffffe

0800c2a4 <_fflush_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	690b      	ldr	r3, [r1, #16]
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	b913      	cbnz	r3, 800c2b4 <_fflush_r+0x10>
 800c2ae:	2500      	movs	r5, #0
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	b118      	cbz	r0, 800c2be <_fflush_r+0x1a>
 800c2b6:	6a03      	ldr	r3, [r0, #32]
 800c2b8:	b90b      	cbnz	r3, 800c2be <_fflush_r+0x1a>
 800c2ba:	f7fd f8f1 	bl	80094a0 <__sinit>
 800c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0f3      	beq.n	800c2ae <_fflush_r+0xa>
 800c2c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2c8:	07d0      	lsls	r0, r2, #31
 800c2ca:	d404      	bmi.n	800c2d6 <_fflush_r+0x32>
 800c2cc:	0599      	lsls	r1, r3, #22
 800c2ce:	d402      	bmi.n	800c2d6 <_fflush_r+0x32>
 800c2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2d2:	f7fd fb00 	bl	80098d6 <__retarget_lock_acquire_recursive>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f7ff ff5f 	bl	800c19c <__sflush_r>
 800c2de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2e0:	07da      	lsls	r2, r3, #31
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	d4e4      	bmi.n	800c2b0 <_fflush_r+0xc>
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	059b      	lsls	r3, r3, #22
 800c2ea:	d4e1      	bmi.n	800c2b0 <_fflush_r+0xc>
 800c2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ee:	f7fd faf3 	bl	80098d8 <__retarget_lock_release_recursive>
 800c2f2:	e7dd      	b.n	800c2b0 <_fflush_r+0xc>

0800c2f4 <__swhatbuf_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	b096      	sub	sp, #88	@ 0x58
 800c300:	4615      	mov	r5, r2
 800c302:	461e      	mov	r6, r3
 800c304:	da0d      	bge.n	800c322 <__swhatbuf_r+0x2e>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c30c:	f04f 0100 	mov.w	r1, #0
 800c310:	bf14      	ite	ne
 800c312:	2340      	movne	r3, #64	@ 0x40
 800c314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c318:	2000      	movs	r0, #0
 800c31a:	6031      	str	r1, [r6, #0]
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	b016      	add	sp, #88	@ 0x58
 800c320:	bd70      	pop	{r4, r5, r6, pc}
 800c322:	466a      	mov	r2, sp
 800c324:	f000 f874 	bl	800c410 <_fstat_r>
 800c328:	2800      	cmp	r0, #0
 800c32a:	dbec      	blt.n	800c306 <__swhatbuf_r+0x12>
 800c32c:	9901      	ldr	r1, [sp, #4]
 800c32e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c336:	4259      	negs	r1, r3
 800c338:	4159      	adcs	r1, r3
 800c33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c33e:	e7eb      	b.n	800c318 <__swhatbuf_r+0x24>

0800c340 <__smakebuf_r>:
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c344:	079d      	lsls	r5, r3, #30
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d507      	bpl.n	800c35c <__smakebuf_r+0x1c>
 800c34c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	2301      	movs	r3, #1
 800c356:	6163      	str	r3, [r4, #20]
 800c358:	b003      	add	sp, #12
 800c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	466a      	mov	r2, sp
 800c360:	f7ff ffc8 	bl	800c2f4 <__swhatbuf_r>
 800c364:	9f00      	ldr	r7, [sp, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	4639      	mov	r1, r7
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7fe f90e 	bl	800a58c <_malloc_r>
 800c370:	b948      	cbnz	r0, 800c386 <__smakebuf_r+0x46>
 800c372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c376:	059a      	lsls	r2, r3, #22
 800c378:	d4ee      	bmi.n	800c358 <__smakebuf_r+0x18>
 800c37a:	f023 0303 	bic.w	r3, r3, #3
 800c37e:	f043 0302 	orr.w	r3, r3, #2
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	e7e2      	b.n	800c34c <__smakebuf_r+0xc>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	6020      	str	r0, [r4, #0]
 800c38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c396:	b15b      	cbz	r3, 800c3b0 <__smakebuf_r+0x70>
 800c398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39c:	4630      	mov	r0, r6
 800c39e:	f000 f849 	bl	800c434 <_isatty_r>
 800c3a2:	b128      	cbz	r0, 800c3b0 <__smakebuf_r+0x70>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f023 0303 	bic.w	r3, r3, #3
 800c3aa:	f043 0301 	orr.w	r3, r3, #1
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	431d      	orrs	r5, r3
 800c3b4:	81a5      	strh	r5, [r4, #12]
 800c3b6:	e7cf      	b.n	800c358 <__smakebuf_r+0x18>

0800c3b8 <memmove>:
 800c3b8:	4288      	cmp	r0, r1
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	eb01 0402 	add.w	r4, r1, r2
 800c3c0:	d902      	bls.n	800c3c8 <memmove+0x10>
 800c3c2:	4284      	cmp	r4, r0
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	d807      	bhi.n	800c3d8 <memmove+0x20>
 800c3c8:	1e43      	subs	r3, r0, #1
 800c3ca:	42a1      	cmp	r1, r4
 800c3cc:	d008      	beq.n	800c3e0 <memmove+0x28>
 800c3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3d6:	e7f8      	b.n	800c3ca <memmove+0x12>
 800c3d8:	4402      	add	r2, r0
 800c3da:	4601      	mov	r1, r0
 800c3dc:	428a      	cmp	r2, r1
 800c3de:	d100      	bne.n	800c3e2 <memmove+0x2a>
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ea:	e7f7      	b.n	800c3dc <memmove+0x24>

0800c3ec <strncmp>:
 800c3ec:	b510      	push	{r4, lr}
 800c3ee:	b16a      	cbz	r2, 800c40c <strncmp+0x20>
 800c3f0:	3901      	subs	r1, #1
 800c3f2:	1884      	adds	r4, r0, r2
 800c3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d103      	bne.n	800c408 <strncmp+0x1c>
 800c400:	42a0      	cmp	r0, r4
 800c402:	d001      	beq.n	800c408 <strncmp+0x1c>
 800c404:	2a00      	cmp	r2, #0
 800c406:	d1f5      	bne.n	800c3f4 <strncmp+0x8>
 800c408:	1ad0      	subs	r0, r2, r3
 800c40a:	bd10      	pop	{r4, pc}
 800c40c:	4610      	mov	r0, r2
 800c40e:	e7fc      	b.n	800c40a <strncmp+0x1e>

0800c410 <_fstat_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d07      	ldr	r5, [pc, #28]	@ (800c430 <_fstat_r+0x20>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	4611      	mov	r1, r2
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	f7f5 f885 	bl	800152c <_fstat>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d102      	bne.n	800c42c <_fstat_r+0x1c>
 800c426:	682b      	ldr	r3, [r5, #0]
 800c428:	b103      	cbz	r3, 800c42c <_fstat_r+0x1c>
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	bf00      	nop
 800c430:	24000b44 	.word	0x24000b44

0800c434 <_isatty_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	@ (800c450 <_isatty_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f5 f884 	bl	800154c <_isatty>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_isatty_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_isatty_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	24000b44 	.word	0x24000b44

0800c454 <_sbrk_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4d06      	ldr	r5, [pc, #24]	@ (800c470 <_sbrk_r+0x1c>)
 800c458:	2300      	movs	r3, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	4608      	mov	r0, r1
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	f7f5 f88c 	bl	800157c <_sbrk>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_sbrk_r+0x1a>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_sbrk_r+0x1a>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	24000b44 	.word	0x24000b44

0800c474 <memcpy>:
 800c474:	440a      	add	r2, r1
 800c476:	4291      	cmp	r1, r2
 800c478:	f100 33ff 	add.w	r3, r0, #4294967295
 800c47c:	d100      	bne.n	800c480 <memcpy+0xc>
 800c47e:	4770      	bx	lr
 800c480:	b510      	push	{r4, lr}
 800c482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c48a:	4291      	cmp	r1, r2
 800c48c:	d1f9      	bne.n	800c482 <memcpy+0xe>
 800c48e:	bd10      	pop	{r4, pc}

0800c490 <nan>:
 800c490:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c498 <nan+0x8>
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	00000000 	.word	0x00000000
 800c49c:	7ff80000 	.word	0x7ff80000

0800c4a0 <__assert_func>:
 800c4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b09      	ldr	r3, [pc, #36]	@ (800c4cc <__assert_func+0x2c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	68d8      	ldr	r0, [r3, #12]
 800c4ae:	b954      	cbnz	r4, 800c4c6 <__assert_func+0x26>
 800c4b0:	4b07      	ldr	r3, [pc, #28]	@ (800c4d0 <__assert_func+0x30>)
 800c4b2:	461c      	mov	r4, r3
 800c4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4b8:	9100      	str	r1, [sp, #0]
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	4905      	ldr	r1, [pc, #20]	@ (800c4d4 <__assert_func+0x34>)
 800c4be:	f000 fba7 	bl	800cc10 <fiprintf>
 800c4c2:	f000 fbb7 	bl	800cc34 <abort>
 800c4c6:	4b04      	ldr	r3, [pc, #16]	@ (800c4d8 <__assert_func+0x38>)
 800c4c8:	e7f4      	b.n	800c4b4 <__assert_func+0x14>
 800c4ca:	bf00      	nop
 800c4cc:	2400001c 	.word	0x2400001c
 800c4d0:	0800d795 	.word	0x0800d795
 800c4d4:	0800d767 	.word	0x0800d767
 800c4d8:	0800d75a 	.word	0x0800d75a

0800c4dc <_calloc_r>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	fba1 5402 	umull	r5, r4, r1, r2
 800c4e2:	b93c      	cbnz	r4, 800c4f4 <_calloc_r+0x18>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	f7fe f851 	bl	800a58c <_malloc_r>
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	b928      	cbnz	r0, 800c4fa <_calloc_r+0x1e>
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	220c      	movs	r2, #12
 800c4f6:	6002      	str	r2, [r0, #0]
 800c4f8:	e7f9      	b.n	800c4ee <_calloc_r+0x12>
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	f7fd f96d 	bl	80097dc <memset>
 800c502:	e7f5      	b.n	800c4f0 <_calloc_r+0x14>

0800c504 <rshift>:
 800c504:	6903      	ldr	r3, [r0, #16]
 800c506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c50a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c512:	f100 0414 	add.w	r4, r0, #20
 800c516:	dd45      	ble.n	800c5a4 <rshift+0xa0>
 800c518:	f011 011f 	ands.w	r1, r1, #31
 800c51c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c524:	d10c      	bne.n	800c540 <rshift+0x3c>
 800c526:	f100 0710 	add.w	r7, r0, #16
 800c52a:	4629      	mov	r1, r5
 800c52c:	42b1      	cmp	r1, r6
 800c52e:	d334      	bcc.n	800c59a <rshift+0x96>
 800c530:	1a9b      	subs	r3, r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	1eea      	subs	r2, r5, #3
 800c536:	4296      	cmp	r6, r2
 800c538:	bf38      	it	cc
 800c53a:	2300      	movcc	r3, #0
 800c53c:	4423      	add	r3, r4
 800c53e:	e015      	b.n	800c56c <rshift+0x68>
 800c540:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c544:	f1c1 0820 	rsb	r8, r1, #32
 800c548:	40cf      	lsrs	r7, r1
 800c54a:	f105 0e04 	add.w	lr, r5, #4
 800c54e:	46a1      	mov	r9, r4
 800c550:	4576      	cmp	r6, lr
 800c552:	46f4      	mov	ip, lr
 800c554:	d815      	bhi.n	800c582 <rshift+0x7e>
 800c556:	1a9a      	subs	r2, r3, r2
 800c558:	0092      	lsls	r2, r2, #2
 800c55a:	3a04      	subs	r2, #4
 800c55c:	3501      	adds	r5, #1
 800c55e:	42ae      	cmp	r6, r5
 800c560:	bf38      	it	cc
 800c562:	2200      	movcc	r2, #0
 800c564:	18a3      	adds	r3, r4, r2
 800c566:	50a7      	str	r7, [r4, r2]
 800c568:	b107      	cbz	r7, 800c56c <rshift+0x68>
 800c56a:	3304      	adds	r3, #4
 800c56c:	1b1a      	subs	r2, r3, r4
 800c56e:	42a3      	cmp	r3, r4
 800c570:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c574:	bf08      	it	eq
 800c576:	2300      	moveq	r3, #0
 800c578:	6102      	str	r2, [r0, #16]
 800c57a:	bf08      	it	eq
 800c57c:	6143      	streq	r3, [r0, #20]
 800c57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c582:	f8dc c000 	ldr.w	ip, [ip]
 800c586:	fa0c fc08 	lsl.w	ip, ip, r8
 800c58a:	ea4c 0707 	orr.w	r7, ip, r7
 800c58e:	f849 7b04 	str.w	r7, [r9], #4
 800c592:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c596:	40cf      	lsrs	r7, r1
 800c598:	e7da      	b.n	800c550 <rshift+0x4c>
 800c59a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c59e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5a2:	e7c3      	b.n	800c52c <rshift+0x28>
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	e7e1      	b.n	800c56c <rshift+0x68>

0800c5a8 <__hexdig_fun>:
 800c5a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d802      	bhi.n	800c5b6 <__hexdig_fun+0xe>
 800c5b0:	3820      	subs	r0, #32
 800c5b2:	b2c0      	uxtb	r0, r0
 800c5b4:	4770      	bx	lr
 800c5b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c5ba:	2b05      	cmp	r3, #5
 800c5bc:	d801      	bhi.n	800c5c2 <__hexdig_fun+0x1a>
 800c5be:	3847      	subs	r0, #71	@ 0x47
 800c5c0:	e7f7      	b.n	800c5b2 <__hexdig_fun+0xa>
 800c5c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c5c6:	2b05      	cmp	r3, #5
 800c5c8:	d801      	bhi.n	800c5ce <__hexdig_fun+0x26>
 800c5ca:	3827      	subs	r0, #39	@ 0x27
 800c5cc:	e7f1      	b.n	800c5b2 <__hexdig_fun+0xa>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <__gethex>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	468a      	mov	sl, r1
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	680b      	ldr	r3, [r1, #0]
 800c5e0:	9001      	str	r0, [sp, #4]
 800c5e2:	4690      	mov	r8, r2
 800c5e4:	1c9c      	adds	r4, r3, #2
 800c5e6:	46a1      	mov	r9, r4
 800c5e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5ec:	2830      	cmp	r0, #48	@ 0x30
 800c5ee:	d0fa      	beq.n	800c5e6 <__gethex+0x12>
 800c5f0:	eba9 0303 	sub.w	r3, r9, r3
 800c5f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5f8:	f7ff ffd6 	bl	800c5a8 <__hexdig_fun>
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d168      	bne.n	800c6d4 <__gethex+0x100>
 800c602:	49a0      	ldr	r1, [pc, #640]	@ (800c884 <__gethex+0x2b0>)
 800c604:	2201      	movs	r2, #1
 800c606:	4648      	mov	r0, r9
 800c608:	f7ff fef0 	bl	800c3ec <strncmp>
 800c60c:	4607      	mov	r7, r0
 800c60e:	2800      	cmp	r0, #0
 800c610:	d167      	bne.n	800c6e2 <__gethex+0x10e>
 800c612:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c616:	4626      	mov	r6, r4
 800c618:	f7ff ffc6 	bl	800c5a8 <__hexdig_fun>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d062      	beq.n	800c6e6 <__gethex+0x112>
 800c620:	4623      	mov	r3, r4
 800c622:	7818      	ldrb	r0, [r3, #0]
 800c624:	2830      	cmp	r0, #48	@ 0x30
 800c626:	4699      	mov	r9, r3
 800c628:	f103 0301 	add.w	r3, r3, #1
 800c62c:	d0f9      	beq.n	800c622 <__gethex+0x4e>
 800c62e:	f7ff ffbb 	bl	800c5a8 <__hexdig_fun>
 800c632:	fab0 f580 	clz	r5, r0
 800c636:	096d      	lsrs	r5, r5, #5
 800c638:	f04f 0b01 	mov.w	fp, #1
 800c63c:	464a      	mov	r2, r9
 800c63e:	4616      	mov	r6, r2
 800c640:	3201      	adds	r2, #1
 800c642:	7830      	ldrb	r0, [r6, #0]
 800c644:	f7ff ffb0 	bl	800c5a8 <__hexdig_fun>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1f8      	bne.n	800c63e <__gethex+0x6a>
 800c64c:	498d      	ldr	r1, [pc, #564]	@ (800c884 <__gethex+0x2b0>)
 800c64e:	2201      	movs	r2, #1
 800c650:	4630      	mov	r0, r6
 800c652:	f7ff fecb 	bl	800c3ec <strncmp>
 800c656:	2800      	cmp	r0, #0
 800c658:	d13f      	bne.n	800c6da <__gethex+0x106>
 800c65a:	b944      	cbnz	r4, 800c66e <__gethex+0x9a>
 800c65c:	1c74      	adds	r4, r6, #1
 800c65e:	4622      	mov	r2, r4
 800c660:	4616      	mov	r6, r2
 800c662:	3201      	adds	r2, #1
 800c664:	7830      	ldrb	r0, [r6, #0]
 800c666:	f7ff ff9f 	bl	800c5a8 <__hexdig_fun>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d1f8      	bne.n	800c660 <__gethex+0x8c>
 800c66e:	1ba4      	subs	r4, r4, r6
 800c670:	00a7      	lsls	r7, r4, #2
 800c672:	7833      	ldrb	r3, [r6, #0]
 800c674:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c678:	2b50      	cmp	r3, #80	@ 0x50
 800c67a:	d13e      	bne.n	800c6fa <__gethex+0x126>
 800c67c:	7873      	ldrb	r3, [r6, #1]
 800c67e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c680:	d033      	beq.n	800c6ea <__gethex+0x116>
 800c682:	2b2d      	cmp	r3, #45	@ 0x2d
 800c684:	d034      	beq.n	800c6f0 <__gethex+0x11c>
 800c686:	1c71      	adds	r1, r6, #1
 800c688:	2400      	movs	r4, #0
 800c68a:	7808      	ldrb	r0, [r1, #0]
 800c68c:	f7ff ff8c 	bl	800c5a8 <__hexdig_fun>
 800c690:	1e43      	subs	r3, r0, #1
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b18      	cmp	r3, #24
 800c696:	d830      	bhi.n	800c6fa <__gethex+0x126>
 800c698:	f1a0 0210 	sub.w	r2, r0, #16
 800c69c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6a0:	f7ff ff82 	bl	800c5a8 <__hexdig_fun>
 800c6a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c6a8:	fa5f fc8c 	uxtb.w	ip, ip
 800c6ac:	f1bc 0f18 	cmp.w	ip, #24
 800c6b0:	f04f 030a 	mov.w	r3, #10
 800c6b4:	d91e      	bls.n	800c6f4 <__gethex+0x120>
 800c6b6:	b104      	cbz	r4, 800c6ba <__gethex+0xe6>
 800c6b8:	4252      	negs	r2, r2
 800c6ba:	4417      	add	r7, r2
 800c6bc:	f8ca 1000 	str.w	r1, [sl]
 800c6c0:	b1ed      	cbz	r5, 800c6fe <__gethex+0x12a>
 800c6c2:	f1bb 0f00 	cmp.w	fp, #0
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2506      	moveq	r5, #6
 800c6ca:	2500      	movne	r5, #0
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	b005      	add	sp, #20
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	2500      	movs	r5, #0
 800c6d6:	462c      	mov	r4, r5
 800c6d8:	e7b0      	b.n	800c63c <__gethex+0x68>
 800c6da:	2c00      	cmp	r4, #0
 800c6dc:	d1c7      	bne.n	800c66e <__gethex+0x9a>
 800c6de:	4627      	mov	r7, r4
 800c6e0:	e7c7      	b.n	800c672 <__gethex+0x9e>
 800c6e2:	464e      	mov	r6, r9
 800c6e4:	462f      	mov	r7, r5
 800c6e6:	2501      	movs	r5, #1
 800c6e8:	e7c3      	b.n	800c672 <__gethex+0x9e>
 800c6ea:	2400      	movs	r4, #0
 800c6ec:	1cb1      	adds	r1, r6, #2
 800c6ee:	e7cc      	b.n	800c68a <__gethex+0xb6>
 800c6f0:	2401      	movs	r4, #1
 800c6f2:	e7fb      	b.n	800c6ec <__gethex+0x118>
 800c6f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c6f8:	e7ce      	b.n	800c698 <__gethex+0xc4>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	e7de      	b.n	800c6bc <__gethex+0xe8>
 800c6fe:	eba6 0309 	sub.w	r3, r6, r9
 800c702:	3b01      	subs	r3, #1
 800c704:	4629      	mov	r1, r5
 800c706:	2b07      	cmp	r3, #7
 800c708:	dc0a      	bgt.n	800c720 <__gethex+0x14c>
 800c70a:	9801      	ldr	r0, [sp, #4]
 800c70c:	f7fd ffca 	bl	800a6a4 <_Balloc>
 800c710:	4604      	mov	r4, r0
 800c712:	b940      	cbnz	r0, 800c726 <__gethex+0x152>
 800c714:	4b5c      	ldr	r3, [pc, #368]	@ (800c888 <__gethex+0x2b4>)
 800c716:	4602      	mov	r2, r0
 800c718:	21e4      	movs	r1, #228	@ 0xe4
 800c71a:	485c      	ldr	r0, [pc, #368]	@ (800c88c <__gethex+0x2b8>)
 800c71c:	f7ff fec0 	bl	800c4a0 <__assert_func>
 800c720:	3101      	adds	r1, #1
 800c722:	105b      	asrs	r3, r3, #1
 800c724:	e7ef      	b.n	800c706 <__gethex+0x132>
 800c726:	f100 0a14 	add.w	sl, r0, #20
 800c72a:	2300      	movs	r3, #0
 800c72c:	4655      	mov	r5, sl
 800c72e:	469b      	mov	fp, r3
 800c730:	45b1      	cmp	r9, r6
 800c732:	d337      	bcc.n	800c7a4 <__gethex+0x1d0>
 800c734:	f845 bb04 	str.w	fp, [r5], #4
 800c738:	eba5 050a 	sub.w	r5, r5, sl
 800c73c:	10ad      	asrs	r5, r5, #2
 800c73e:	6125      	str	r5, [r4, #16]
 800c740:	4658      	mov	r0, fp
 800c742:	f7fe f8a1 	bl	800a888 <__hi0bits>
 800c746:	016d      	lsls	r5, r5, #5
 800c748:	f8d8 6000 	ldr.w	r6, [r8]
 800c74c:	1a2d      	subs	r5, r5, r0
 800c74e:	42b5      	cmp	r5, r6
 800c750:	dd54      	ble.n	800c7fc <__gethex+0x228>
 800c752:	1bad      	subs	r5, r5, r6
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	f7fe fc32 	bl	800afc0 <__any_on>
 800c75c:	4681      	mov	r9, r0
 800c75e:	b178      	cbz	r0, 800c780 <__gethex+0x1ac>
 800c760:	1e6b      	subs	r3, r5, #1
 800c762:	1159      	asrs	r1, r3, #5
 800c764:	f003 021f 	and.w	r2, r3, #31
 800c768:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c76c:	f04f 0901 	mov.w	r9, #1
 800c770:	fa09 f202 	lsl.w	r2, r9, r2
 800c774:	420a      	tst	r2, r1
 800c776:	d003      	beq.n	800c780 <__gethex+0x1ac>
 800c778:	454b      	cmp	r3, r9
 800c77a:	dc36      	bgt.n	800c7ea <__gethex+0x216>
 800c77c:	f04f 0902 	mov.w	r9, #2
 800c780:	4629      	mov	r1, r5
 800c782:	4620      	mov	r0, r4
 800c784:	f7ff febe 	bl	800c504 <rshift>
 800c788:	442f      	add	r7, r5
 800c78a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c78e:	42bb      	cmp	r3, r7
 800c790:	da42      	bge.n	800c818 <__gethex+0x244>
 800c792:	9801      	ldr	r0, [sp, #4]
 800c794:	4621      	mov	r1, r4
 800c796:	f7fd ffc5 	bl	800a724 <_Bfree>
 800c79a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c79c:	2300      	movs	r3, #0
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	25a3      	movs	r5, #163	@ 0xa3
 800c7a2:	e793      	b.n	800c6cc <__gethex+0xf8>
 800c7a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c7a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c7aa:	d012      	beq.n	800c7d2 <__gethex+0x1fe>
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	d104      	bne.n	800c7ba <__gethex+0x1e6>
 800c7b0:	f845 bb04 	str.w	fp, [r5], #4
 800c7b4:	f04f 0b00 	mov.w	fp, #0
 800c7b8:	465b      	mov	r3, fp
 800c7ba:	7830      	ldrb	r0, [r6, #0]
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	f7ff fef3 	bl	800c5a8 <__hexdig_fun>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	f000 000f 	and.w	r0, r0, #15
 800c7c8:	4098      	lsls	r0, r3
 800c7ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	e7ae      	b.n	800c730 <__gethex+0x15c>
 800c7d2:	45b1      	cmp	r9, r6
 800c7d4:	d8ea      	bhi.n	800c7ac <__gethex+0x1d8>
 800c7d6:	492b      	ldr	r1, [pc, #172]	@ (800c884 <__gethex+0x2b0>)
 800c7d8:	9303      	str	r3, [sp, #12]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff fe05 	bl	800c3ec <strncmp>
 800c7e2:	9b03      	ldr	r3, [sp, #12]
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d1e1      	bne.n	800c7ac <__gethex+0x1d8>
 800c7e8:	e7a2      	b.n	800c730 <__gethex+0x15c>
 800c7ea:	1ea9      	subs	r1, r5, #2
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7fe fbe7 	bl	800afc0 <__any_on>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d0c2      	beq.n	800c77c <__gethex+0x1a8>
 800c7f6:	f04f 0903 	mov.w	r9, #3
 800c7fa:	e7c1      	b.n	800c780 <__gethex+0x1ac>
 800c7fc:	da09      	bge.n	800c812 <__gethex+0x23e>
 800c7fe:	1b75      	subs	r5, r6, r5
 800c800:	4621      	mov	r1, r4
 800c802:	9801      	ldr	r0, [sp, #4]
 800c804:	462a      	mov	r2, r5
 800c806:	f7fe f9a5 	bl	800ab54 <__lshift>
 800c80a:	1b7f      	subs	r7, r7, r5
 800c80c:	4604      	mov	r4, r0
 800c80e:	f100 0a14 	add.w	sl, r0, #20
 800c812:	f04f 0900 	mov.w	r9, #0
 800c816:	e7b8      	b.n	800c78a <__gethex+0x1b6>
 800c818:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c81c:	42bd      	cmp	r5, r7
 800c81e:	dd6f      	ble.n	800c900 <__gethex+0x32c>
 800c820:	1bed      	subs	r5, r5, r7
 800c822:	42ae      	cmp	r6, r5
 800c824:	dc34      	bgt.n	800c890 <__gethex+0x2bc>
 800c826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d022      	beq.n	800c874 <__gethex+0x2a0>
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d024      	beq.n	800c87c <__gethex+0x2a8>
 800c832:	2b01      	cmp	r3, #1
 800c834:	d115      	bne.n	800c862 <__gethex+0x28e>
 800c836:	42ae      	cmp	r6, r5
 800c838:	d113      	bne.n	800c862 <__gethex+0x28e>
 800c83a:	2e01      	cmp	r6, #1
 800c83c:	d10b      	bne.n	800c856 <__gethex+0x282>
 800c83e:	9a02      	ldr	r2, [sp, #8]
 800c840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	2301      	movs	r3, #1
 800c848:	6123      	str	r3, [r4, #16]
 800c84a:	f8ca 3000 	str.w	r3, [sl]
 800c84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c850:	2562      	movs	r5, #98	@ 0x62
 800c852:	601c      	str	r4, [r3, #0]
 800c854:	e73a      	b.n	800c6cc <__gethex+0xf8>
 800c856:	1e71      	subs	r1, r6, #1
 800c858:	4620      	mov	r0, r4
 800c85a:	f7fe fbb1 	bl	800afc0 <__any_on>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d1ed      	bne.n	800c83e <__gethex+0x26a>
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	4621      	mov	r1, r4
 800c866:	f7fd ff5d 	bl	800a724 <_Bfree>
 800c86a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c86c:	2300      	movs	r3, #0
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	2550      	movs	r5, #80	@ 0x50
 800c872:	e72b      	b.n	800c6cc <__gethex+0xf8>
 800c874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1f3      	bne.n	800c862 <__gethex+0x28e>
 800c87a:	e7e0      	b.n	800c83e <__gethex+0x26a>
 800c87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1dd      	bne.n	800c83e <__gethex+0x26a>
 800c882:	e7ee      	b.n	800c862 <__gethex+0x28e>
 800c884:	0800d5e8 	.word	0x0800d5e8
 800c888:	0800d47d 	.word	0x0800d47d
 800c88c:	0800d796 	.word	0x0800d796
 800c890:	1e6f      	subs	r7, r5, #1
 800c892:	f1b9 0f00 	cmp.w	r9, #0
 800c896:	d130      	bne.n	800c8fa <__gethex+0x326>
 800c898:	b127      	cbz	r7, 800c8a4 <__gethex+0x2d0>
 800c89a:	4639      	mov	r1, r7
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7fe fb8f 	bl	800afc0 <__any_on>
 800c8a2:	4681      	mov	r9, r0
 800c8a4:	117a      	asrs	r2, r7, #5
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c8ac:	f007 071f 	and.w	r7, r7, #31
 800c8b0:	40bb      	lsls	r3, r7
 800c8b2:	4213      	tst	r3, r2
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	bf18      	it	ne
 800c8ba:	f049 0902 	orrne.w	r9, r9, #2
 800c8be:	f7ff fe21 	bl	800c504 <rshift>
 800c8c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c8c6:	1b76      	subs	r6, r6, r5
 800c8c8:	2502      	movs	r5, #2
 800c8ca:	f1b9 0f00 	cmp.w	r9, #0
 800c8ce:	d047      	beq.n	800c960 <__gethex+0x38c>
 800c8d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d015      	beq.n	800c904 <__gethex+0x330>
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d017      	beq.n	800c90c <__gethex+0x338>
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d109      	bne.n	800c8f4 <__gethex+0x320>
 800c8e0:	f019 0f02 	tst.w	r9, #2
 800c8e4:	d006      	beq.n	800c8f4 <__gethex+0x320>
 800c8e6:	f8da 3000 	ldr.w	r3, [sl]
 800c8ea:	ea49 0903 	orr.w	r9, r9, r3
 800c8ee:	f019 0f01 	tst.w	r9, #1
 800c8f2:	d10e      	bne.n	800c912 <__gethex+0x33e>
 800c8f4:	f045 0510 	orr.w	r5, r5, #16
 800c8f8:	e032      	b.n	800c960 <__gethex+0x38c>
 800c8fa:	f04f 0901 	mov.w	r9, #1
 800c8fe:	e7d1      	b.n	800c8a4 <__gethex+0x2d0>
 800c900:	2501      	movs	r5, #1
 800c902:	e7e2      	b.n	800c8ca <__gethex+0x2f6>
 800c904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c906:	f1c3 0301 	rsb	r3, r3, #1
 800c90a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0f0      	beq.n	800c8f4 <__gethex+0x320>
 800c912:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c916:	f104 0314 	add.w	r3, r4, #20
 800c91a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c91e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c922:	f04f 0c00 	mov.w	ip, #0
 800c926:	4618      	mov	r0, r3
 800c928:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c930:	d01b      	beq.n	800c96a <__gethex+0x396>
 800c932:	3201      	adds	r2, #1
 800c934:	6002      	str	r2, [r0, #0]
 800c936:	2d02      	cmp	r5, #2
 800c938:	f104 0314 	add.w	r3, r4, #20
 800c93c:	d13c      	bne.n	800c9b8 <__gethex+0x3e4>
 800c93e:	f8d8 2000 	ldr.w	r2, [r8]
 800c942:	3a01      	subs	r2, #1
 800c944:	42b2      	cmp	r2, r6
 800c946:	d109      	bne.n	800c95c <__gethex+0x388>
 800c948:	1171      	asrs	r1, r6, #5
 800c94a:	2201      	movs	r2, #1
 800c94c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c950:	f006 061f 	and.w	r6, r6, #31
 800c954:	fa02 f606 	lsl.w	r6, r2, r6
 800c958:	421e      	tst	r6, r3
 800c95a:	d13a      	bne.n	800c9d2 <__gethex+0x3fe>
 800c95c:	f045 0520 	orr.w	r5, r5, #32
 800c960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c962:	601c      	str	r4, [r3, #0]
 800c964:	9b02      	ldr	r3, [sp, #8]
 800c966:	601f      	str	r7, [r3, #0]
 800c968:	e6b0      	b.n	800c6cc <__gethex+0xf8>
 800c96a:	4299      	cmp	r1, r3
 800c96c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c970:	d8d9      	bhi.n	800c926 <__gethex+0x352>
 800c972:	68a3      	ldr	r3, [r4, #8]
 800c974:	459b      	cmp	fp, r3
 800c976:	db17      	blt.n	800c9a8 <__gethex+0x3d4>
 800c978:	6861      	ldr	r1, [r4, #4]
 800c97a:	9801      	ldr	r0, [sp, #4]
 800c97c:	3101      	adds	r1, #1
 800c97e:	f7fd fe91 	bl	800a6a4 <_Balloc>
 800c982:	4681      	mov	r9, r0
 800c984:	b918      	cbnz	r0, 800c98e <__gethex+0x3ba>
 800c986:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <__gethex+0x41c>)
 800c988:	4602      	mov	r2, r0
 800c98a:	2184      	movs	r1, #132	@ 0x84
 800c98c:	e6c5      	b.n	800c71a <__gethex+0x146>
 800c98e:	6922      	ldr	r2, [r4, #16]
 800c990:	3202      	adds	r2, #2
 800c992:	f104 010c 	add.w	r1, r4, #12
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	300c      	adds	r0, #12
 800c99a:	f7ff fd6b 	bl	800c474 <memcpy>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	9801      	ldr	r0, [sp, #4]
 800c9a2:	f7fd febf 	bl	800a724 <_Bfree>
 800c9a6:	464c      	mov	r4, r9
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9b0:	6122      	str	r2, [r4, #16]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	615a      	str	r2, [r3, #20]
 800c9b6:	e7be      	b.n	800c936 <__gethex+0x362>
 800c9b8:	6922      	ldr	r2, [r4, #16]
 800c9ba:	455a      	cmp	r2, fp
 800c9bc:	dd0b      	ble.n	800c9d6 <__gethex+0x402>
 800c9be:	2101      	movs	r1, #1
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f7ff fd9f 	bl	800c504 <rshift>
 800c9c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9ca:	3701      	adds	r7, #1
 800c9cc:	42bb      	cmp	r3, r7
 800c9ce:	f6ff aee0 	blt.w	800c792 <__gethex+0x1be>
 800c9d2:	2501      	movs	r5, #1
 800c9d4:	e7c2      	b.n	800c95c <__gethex+0x388>
 800c9d6:	f016 061f 	ands.w	r6, r6, #31
 800c9da:	d0fa      	beq.n	800c9d2 <__gethex+0x3fe>
 800c9dc:	4453      	add	r3, sl
 800c9de:	f1c6 0620 	rsb	r6, r6, #32
 800c9e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c9e6:	f7fd ff4f 	bl	800a888 <__hi0bits>
 800c9ea:	42b0      	cmp	r0, r6
 800c9ec:	dbe7      	blt.n	800c9be <__gethex+0x3ea>
 800c9ee:	e7f0      	b.n	800c9d2 <__gethex+0x3fe>
 800c9f0:	0800d47d 	.word	0x0800d47d

0800c9f4 <L_shift>:
 800c9f4:	f1c2 0208 	rsb	r2, r2, #8
 800c9f8:	0092      	lsls	r2, r2, #2
 800c9fa:	b570      	push	{r4, r5, r6, lr}
 800c9fc:	f1c2 0620 	rsb	r6, r2, #32
 800ca00:	6843      	ldr	r3, [r0, #4]
 800ca02:	6804      	ldr	r4, [r0, #0]
 800ca04:	fa03 f506 	lsl.w	r5, r3, r6
 800ca08:	432c      	orrs	r4, r5
 800ca0a:	40d3      	lsrs	r3, r2
 800ca0c:	6004      	str	r4, [r0, #0]
 800ca0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca12:	4288      	cmp	r0, r1
 800ca14:	d3f4      	bcc.n	800ca00 <L_shift+0xc>
 800ca16:	bd70      	pop	{r4, r5, r6, pc}

0800ca18 <__match>:
 800ca18:	b530      	push	{r4, r5, lr}
 800ca1a:	6803      	ldr	r3, [r0, #0]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca22:	b914      	cbnz	r4, 800ca2a <__match+0x12>
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	2001      	movs	r0, #1
 800ca28:	bd30      	pop	{r4, r5, pc}
 800ca2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ca32:	2d19      	cmp	r5, #25
 800ca34:	bf98      	it	ls
 800ca36:	3220      	addls	r2, #32
 800ca38:	42a2      	cmp	r2, r4
 800ca3a:	d0f0      	beq.n	800ca1e <__match+0x6>
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e7f3      	b.n	800ca28 <__match+0x10>

0800ca40 <__hexnan>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	680b      	ldr	r3, [r1, #0]
 800ca46:	6801      	ldr	r1, [r0, #0]
 800ca48:	115e      	asrs	r6, r3, #5
 800ca4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca4e:	f013 031f 	ands.w	r3, r3, #31
 800ca52:	b087      	sub	sp, #28
 800ca54:	bf18      	it	ne
 800ca56:	3604      	addne	r6, #4
 800ca58:	2500      	movs	r5, #0
 800ca5a:	1f37      	subs	r7, r6, #4
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	4690      	mov	r8, r2
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca66:	46b9      	mov	r9, r7
 800ca68:	463c      	mov	r4, r7
 800ca6a:	9502      	str	r5, [sp, #8]
 800ca6c:	46ab      	mov	fp, r5
 800ca6e:	784a      	ldrb	r2, [r1, #1]
 800ca70:	1c4b      	adds	r3, r1, #1
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	b342      	cbz	r2, 800cac8 <__hexnan+0x88>
 800ca76:	4610      	mov	r0, r2
 800ca78:	9105      	str	r1, [sp, #20]
 800ca7a:	9204      	str	r2, [sp, #16]
 800ca7c:	f7ff fd94 	bl	800c5a8 <__hexdig_fun>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d151      	bne.n	800cb28 <__hexnan+0xe8>
 800ca84:	9a04      	ldr	r2, [sp, #16]
 800ca86:	9905      	ldr	r1, [sp, #20]
 800ca88:	2a20      	cmp	r2, #32
 800ca8a:	d818      	bhi.n	800cabe <__hexnan+0x7e>
 800ca8c:	9b02      	ldr	r3, [sp, #8]
 800ca8e:	459b      	cmp	fp, r3
 800ca90:	dd13      	ble.n	800caba <__hexnan+0x7a>
 800ca92:	454c      	cmp	r4, r9
 800ca94:	d206      	bcs.n	800caa4 <__hexnan+0x64>
 800ca96:	2d07      	cmp	r5, #7
 800ca98:	dc04      	bgt.n	800caa4 <__hexnan+0x64>
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7ff ffa8 	bl	800c9f4 <L_shift>
 800caa4:	4544      	cmp	r4, r8
 800caa6:	d952      	bls.n	800cb4e <__hexnan+0x10e>
 800caa8:	2300      	movs	r3, #0
 800caaa:	f1a4 0904 	sub.w	r9, r4, #4
 800caae:	f844 3c04 	str.w	r3, [r4, #-4]
 800cab2:	f8cd b008 	str.w	fp, [sp, #8]
 800cab6:	464c      	mov	r4, r9
 800cab8:	461d      	mov	r5, r3
 800caba:	9903      	ldr	r1, [sp, #12]
 800cabc:	e7d7      	b.n	800ca6e <__hexnan+0x2e>
 800cabe:	2a29      	cmp	r2, #41	@ 0x29
 800cac0:	d157      	bne.n	800cb72 <__hexnan+0x132>
 800cac2:	3102      	adds	r1, #2
 800cac4:	f8ca 1000 	str.w	r1, [sl]
 800cac8:	f1bb 0f00 	cmp.w	fp, #0
 800cacc:	d051      	beq.n	800cb72 <__hexnan+0x132>
 800cace:	454c      	cmp	r4, r9
 800cad0:	d206      	bcs.n	800cae0 <__hexnan+0xa0>
 800cad2:	2d07      	cmp	r5, #7
 800cad4:	dc04      	bgt.n	800cae0 <__hexnan+0xa0>
 800cad6:	462a      	mov	r2, r5
 800cad8:	4649      	mov	r1, r9
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff ff8a 	bl	800c9f4 <L_shift>
 800cae0:	4544      	cmp	r4, r8
 800cae2:	d936      	bls.n	800cb52 <__hexnan+0x112>
 800cae4:	f1a8 0204 	sub.w	r2, r8, #4
 800cae8:	4623      	mov	r3, r4
 800caea:	f853 1b04 	ldr.w	r1, [r3], #4
 800caee:	f842 1f04 	str.w	r1, [r2, #4]!
 800caf2:	429f      	cmp	r7, r3
 800caf4:	d2f9      	bcs.n	800caea <__hexnan+0xaa>
 800caf6:	1b3b      	subs	r3, r7, r4
 800caf8:	f023 0303 	bic.w	r3, r3, #3
 800cafc:	3304      	adds	r3, #4
 800cafe:	3401      	adds	r4, #1
 800cb00:	3e03      	subs	r6, #3
 800cb02:	42b4      	cmp	r4, r6
 800cb04:	bf88      	it	hi
 800cb06:	2304      	movhi	r3, #4
 800cb08:	4443      	add	r3, r8
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f843 2b04 	str.w	r2, [r3], #4
 800cb10:	429f      	cmp	r7, r3
 800cb12:	d2fb      	bcs.n	800cb0c <__hexnan+0xcc>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	b91b      	cbnz	r3, 800cb20 <__hexnan+0xe0>
 800cb18:	4547      	cmp	r7, r8
 800cb1a:	d128      	bne.n	800cb6e <__hexnan+0x12e>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	603b      	str	r3, [r7, #0]
 800cb20:	2005      	movs	r0, #5
 800cb22:	b007      	add	sp, #28
 800cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb28:	3501      	adds	r5, #1
 800cb2a:	2d08      	cmp	r5, #8
 800cb2c:	f10b 0b01 	add.w	fp, fp, #1
 800cb30:	dd06      	ble.n	800cb40 <__hexnan+0x100>
 800cb32:	4544      	cmp	r4, r8
 800cb34:	d9c1      	bls.n	800caba <__hexnan+0x7a>
 800cb36:	2300      	movs	r3, #0
 800cb38:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb3c:	2501      	movs	r5, #1
 800cb3e:	3c04      	subs	r4, #4
 800cb40:	6822      	ldr	r2, [r4, #0]
 800cb42:	f000 000f 	and.w	r0, r0, #15
 800cb46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb4a:	6020      	str	r0, [r4, #0]
 800cb4c:	e7b5      	b.n	800caba <__hexnan+0x7a>
 800cb4e:	2508      	movs	r5, #8
 800cb50:	e7b3      	b.n	800caba <__hexnan+0x7a>
 800cb52:	9b01      	ldr	r3, [sp, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d0dd      	beq.n	800cb14 <__hexnan+0xd4>
 800cb58:	f1c3 0320 	rsb	r3, r3, #32
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	40da      	lsrs	r2, r3
 800cb62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb66:	4013      	ands	r3, r2
 800cb68:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb6c:	e7d2      	b.n	800cb14 <__hexnan+0xd4>
 800cb6e:	3f04      	subs	r7, #4
 800cb70:	e7d0      	b.n	800cb14 <__hexnan+0xd4>
 800cb72:	2004      	movs	r0, #4
 800cb74:	e7d5      	b.n	800cb22 <__hexnan+0xe2>

0800cb76 <__ascii_mbtowc>:
 800cb76:	b082      	sub	sp, #8
 800cb78:	b901      	cbnz	r1, 800cb7c <__ascii_mbtowc+0x6>
 800cb7a:	a901      	add	r1, sp, #4
 800cb7c:	b142      	cbz	r2, 800cb90 <__ascii_mbtowc+0x1a>
 800cb7e:	b14b      	cbz	r3, 800cb94 <__ascii_mbtowc+0x1e>
 800cb80:	7813      	ldrb	r3, [r2, #0]
 800cb82:	600b      	str	r3, [r1, #0]
 800cb84:	7812      	ldrb	r2, [r2, #0]
 800cb86:	1e10      	subs	r0, r2, #0
 800cb88:	bf18      	it	ne
 800cb8a:	2001      	movne	r0, #1
 800cb8c:	b002      	add	sp, #8
 800cb8e:	4770      	bx	lr
 800cb90:	4610      	mov	r0, r2
 800cb92:	e7fb      	b.n	800cb8c <__ascii_mbtowc+0x16>
 800cb94:	f06f 0001 	mvn.w	r0, #1
 800cb98:	e7f8      	b.n	800cb8c <__ascii_mbtowc+0x16>

0800cb9a <_realloc_r>:
 800cb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9e:	4680      	mov	r8, r0
 800cba0:	4615      	mov	r5, r2
 800cba2:	460c      	mov	r4, r1
 800cba4:	b921      	cbnz	r1, 800cbb0 <_realloc_r+0x16>
 800cba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	4611      	mov	r1, r2
 800cbac:	f7fd bcee 	b.w	800a58c <_malloc_r>
 800cbb0:	b92a      	cbnz	r2, 800cbbe <_realloc_r+0x24>
 800cbb2:	f7fd fc77 	bl	800a4a4 <_free_r>
 800cbb6:	2400      	movs	r4, #0
 800cbb8:	4620      	mov	r0, r4
 800cbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbe:	f000 f840 	bl	800cc42 <_malloc_usable_size_r>
 800cbc2:	4285      	cmp	r5, r0
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	d802      	bhi.n	800cbce <_realloc_r+0x34>
 800cbc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbcc:	d8f4      	bhi.n	800cbb8 <_realloc_r+0x1e>
 800cbce:	4629      	mov	r1, r5
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	f7fd fcdb 	bl	800a58c <_malloc_r>
 800cbd6:	4607      	mov	r7, r0
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d0ec      	beq.n	800cbb6 <_realloc_r+0x1c>
 800cbdc:	42b5      	cmp	r5, r6
 800cbde:	462a      	mov	r2, r5
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	bf28      	it	cs
 800cbe4:	4632      	movcs	r2, r6
 800cbe6:	f7ff fc45 	bl	800c474 <memcpy>
 800cbea:	4621      	mov	r1, r4
 800cbec:	4640      	mov	r0, r8
 800cbee:	f7fd fc59 	bl	800a4a4 <_free_r>
 800cbf2:	463c      	mov	r4, r7
 800cbf4:	e7e0      	b.n	800cbb8 <_realloc_r+0x1e>

0800cbf6 <__ascii_wctomb>:
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	b141      	cbz	r1, 800cc0e <__ascii_wctomb+0x18>
 800cbfc:	2aff      	cmp	r2, #255	@ 0xff
 800cbfe:	d904      	bls.n	800cc0a <__ascii_wctomb+0x14>
 800cc00:	228a      	movs	r2, #138	@ 0x8a
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	4770      	bx	lr
 800cc0a:	700a      	strb	r2, [r1, #0]
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	4770      	bx	lr

0800cc10 <fiprintf>:
 800cc10:	b40e      	push	{r1, r2, r3}
 800cc12:	b503      	push	{r0, r1, lr}
 800cc14:	4601      	mov	r1, r0
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	4805      	ldr	r0, [pc, #20]	@ (800cc30 <fiprintf+0x20>)
 800cc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1e:	6800      	ldr	r0, [r0, #0]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f7ff f9a3 	bl	800bf6c <_vfiprintf_r>
 800cc26:	b002      	add	sp, #8
 800cc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc2c:	b003      	add	sp, #12
 800cc2e:	4770      	bx	lr
 800cc30:	2400001c 	.word	0x2400001c

0800cc34 <abort>:
 800cc34:	b508      	push	{r3, lr}
 800cc36:	2006      	movs	r0, #6
 800cc38:	f000 f834 	bl	800cca4 <raise>
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f7f4 fc25 	bl	800148c <_exit>

0800cc42 <_malloc_usable_size_r>:
 800cc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc46:	1f18      	subs	r0, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfbc      	itt	lt
 800cc4c:	580b      	ldrlt	r3, [r1, r0]
 800cc4e:	18c0      	addlt	r0, r0, r3
 800cc50:	4770      	bx	lr

0800cc52 <_raise_r>:
 800cc52:	291f      	cmp	r1, #31
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4605      	mov	r5, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	d904      	bls.n	800cc66 <_raise_r+0x14>
 800cc5c:	2316      	movs	r3, #22
 800cc5e:	6003      	str	r3, [r0, #0]
 800cc60:	f04f 30ff 	mov.w	r0, #4294967295
 800cc64:	bd38      	pop	{r3, r4, r5, pc}
 800cc66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc68:	b112      	cbz	r2, 800cc70 <_raise_r+0x1e>
 800cc6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc6e:	b94b      	cbnz	r3, 800cc84 <_raise_r+0x32>
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f831 	bl	800ccd8 <_getpid_r>
 800cc76:	4622      	mov	r2, r4
 800cc78:	4601      	mov	r1, r0
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc80:	f000 b818 	b.w	800ccb4 <_kill_r>
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d00a      	beq.n	800cc9e <_raise_r+0x4c>
 800cc88:	1c59      	adds	r1, r3, #1
 800cc8a:	d103      	bne.n	800cc94 <_raise_r+0x42>
 800cc8c:	2316      	movs	r3, #22
 800cc8e:	6003      	str	r3, [r0, #0]
 800cc90:	2001      	movs	r0, #1
 800cc92:	e7e7      	b.n	800cc64 <_raise_r+0x12>
 800cc94:	2100      	movs	r1, #0
 800cc96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	4798      	blx	r3
 800cc9e:	2000      	movs	r0, #0
 800cca0:	e7e0      	b.n	800cc64 <_raise_r+0x12>
	...

0800cca4 <raise>:
 800cca4:	4b02      	ldr	r3, [pc, #8]	@ (800ccb0 <raise+0xc>)
 800cca6:	4601      	mov	r1, r0
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	f7ff bfd2 	b.w	800cc52 <_raise_r>
 800ccae:	bf00      	nop
 800ccb0:	2400001c 	.word	0x2400001c

0800ccb4 <_kill_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d07      	ldr	r5, [pc, #28]	@ (800ccd4 <_kill_r+0x20>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	f7f4 fbd3 	bl	800146c <_kill>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	d102      	bne.n	800ccd0 <_kill_r+0x1c>
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	b103      	cbz	r3, 800ccd0 <_kill_r+0x1c>
 800ccce:	6023      	str	r3, [r4, #0]
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	bf00      	nop
 800ccd4:	24000b44 	.word	0x24000b44

0800ccd8 <_getpid_r>:
 800ccd8:	f7f4 bbc0 	b.w	800145c <_getpid>

0800ccdc <checkint>:
 800ccdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cce0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800cce4:	429a      	cmp	r2, r3
 800cce6:	b570      	push	{r4, r5, r6, lr}
 800cce8:	dd2a      	ble.n	800cd40 <checkint+0x64>
 800ccea:	f240 4333 	movw	r3, #1075	@ 0x433
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	dc24      	bgt.n	800cd3c <checkint+0x60>
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	f1a3 0620 	sub.w	r6, r3, #32
 800ccf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccfc:	fa02 f403 	lsl.w	r4, r2, r3
 800cd00:	fa02 f606 	lsl.w	r6, r2, r6
 800cd04:	f1c3 0520 	rsb	r5, r3, #32
 800cd08:	fa22 f505 	lsr.w	r5, r2, r5
 800cd0c:	4334      	orrs	r4, r6
 800cd0e:	432c      	orrs	r4, r5
 800cd10:	409a      	lsls	r2, r3
 800cd12:	ea20 0202 	bic.w	r2, r0, r2
 800cd16:	ea21 0404 	bic.w	r4, r1, r4
 800cd1a:	4322      	orrs	r2, r4
 800cd1c:	f1a3 0420 	sub.w	r4, r3, #32
 800cd20:	f1c3 0220 	rsb	r2, r3, #32
 800cd24:	d10c      	bne.n	800cd40 <checkint+0x64>
 800cd26:	40d8      	lsrs	r0, r3
 800cd28:	fa01 f302 	lsl.w	r3, r1, r2
 800cd2c:	4318      	orrs	r0, r3
 800cd2e:	40e1      	lsrs	r1, r4
 800cd30:	4308      	orrs	r0, r1
 800cd32:	f000 0001 	and.w	r0, r0, #1
 800cd36:	f1d0 0002 	rsbs	r0, r0, #2
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	2002      	movs	r0, #2
 800cd3e:	e7fc      	b.n	800cd3a <checkint+0x5e>
 800cd40:	2000      	movs	r0, #0
 800cd42:	e7fa      	b.n	800cd3a <checkint+0x5e>
 800cd44:	0000      	movs	r0, r0
	...

0800cd48 <pow>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	ee10 4a90 	vmov	r4, s1
 800cd50:	ed2d 8b0a 	vpush	{d8-d12}
 800cd54:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800cd58:	ee11 aa90 	vmov	sl, s3
 800cd5c:	f108 32ff 	add.w	r2, r8, #4294967295
 800cd60:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800cd64:	429a      	cmp	r2, r3
 800cd66:	ee10 5a10 	vmov	r5, s0
 800cd6a:	ee11 0a10 	vmov	r0, s2
 800cd6e:	b087      	sub	sp, #28
 800cd70:	46c4      	mov	ip, r8
 800cd72:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800cd76:	d806      	bhi.n	800cd86 <pow+0x3e>
 800cd78:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800cd7c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800cd80:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd82:	f240 8157 	bls.w	800d034 <pow+0x2ec>
 800cd86:	1802      	adds	r2, r0, r0
 800cd88:	eb4a 010a 	adc.w	r1, sl, sl
 800cd8c:	f06f 0b01 	mvn.w	fp, #1
 800cd90:	1e57      	subs	r7, r2, #1
 800cd92:	f141 33ff 	adc.w	r3, r1, #4294967295
 800cd96:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800cd9a:	45bb      	cmp	fp, r7
 800cd9c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cda0:	d242      	bcs.n	800ce28 <pow+0xe0>
 800cda2:	ea52 0301 	orrs.w	r3, r2, r1
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	d10c      	bne.n	800cdc6 <pow+0x7e>
 800cdac:	196d      	adds	r5, r5, r5
 800cdae:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800cdb2:	4164      	adcs	r4, r4
 800cdb4:	42ab      	cmp	r3, r5
 800cdb6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdba:	41a3      	sbcs	r3, r4
 800cdbc:	f0c0 808f 	bcc.w	800cede <pow+0x196>
 800cdc0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cdc4:	e02b      	b.n	800ce1e <pow+0xd6>
 800cdc6:	4ed4      	ldr	r6, [pc, #848]	@ (800d118 <pow+0x3d0>)
 800cdc8:	42b4      	cmp	r4, r6
 800cdca:	bf08      	it	eq
 800cdcc:	429d      	cmpeq	r5, r3
 800cdce:	d109      	bne.n	800cde4 <pow+0x9c>
 800cdd0:	1800      	adds	r0, r0, r0
 800cdd2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800cdd6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800cdda:	4283      	cmp	r3, r0
 800cddc:	4bcf      	ldr	r3, [pc, #828]	@ (800d11c <pow+0x3d4>)
 800cdde:	eb73 030a 	sbcs.w	r3, r3, sl
 800cde2:	e7eb      	b.n	800cdbc <pow+0x74>
 800cde4:	196d      	adds	r5, r5, r5
 800cde6:	48ce      	ldr	r0, [pc, #824]	@ (800d120 <pow+0x3d8>)
 800cde8:	4164      	adcs	r4, r4
 800cdea:	42ab      	cmp	r3, r5
 800cdec:	eb70 0604 	sbcs.w	r6, r0, r4
 800cdf0:	d375      	bcc.n	800cede <pow+0x196>
 800cdf2:	4281      	cmp	r1, r0
 800cdf4:	bf08      	it	eq
 800cdf6:	429a      	cmpeq	r2, r3
 800cdf8:	d171      	bne.n	800cede <pow+0x196>
 800cdfa:	4aca      	ldr	r2, [pc, #808]	@ (800d124 <pow+0x3dc>)
 800cdfc:	4294      	cmp	r4, r2
 800cdfe:	bf08      	it	eq
 800ce00:	429d      	cmpeq	r5, r3
 800ce02:	d0dd      	beq.n	800cdc0 <pow+0x78>
 800ce04:	4294      	cmp	r4, r2
 800ce06:	ea6f 0a0a 	mvn.w	sl, sl
 800ce0a:	bf34      	ite	cc
 800ce0c:	2400      	movcc	r4, #0
 800ce0e:	2401      	movcs	r4, #1
 800ce10:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ce14:	4554      	cmp	r4, sl
 800ce16:	f040 81dc 	bne.w	800d1d2 <pow+0x48a>
 800ce1a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800ce1e:	b007      	add	sp, #28
 800ce20:	ecbd 8b0a 	vpop	{d8-d12}
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	196f      	adds	r7, r5, r5
 800ce2a:	eb44 0904 	adc.w	r9, r4, r4
 800ce2e:	1e7a      	subs	r2, r7, #1
 800ce30:	f169 0300 	sbc.w	r3, r9, #0
 800ce34:	4593      	cmp	fp, r2
 800ce36:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ce3a:	d225      	bcs.n	800ce88 <pow+0x140>
 800ce3c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ce40:	2c00      	cmp	r4, #0
 800ce42:	da13      	bge.n	800ce6c <pow+0x124>
 800ce44:	4651      	mov	r1, sl
 800ce46:	f7ff ff49 	bl	800ccdc <checkint>
 800ce4a:	2801      	cmp	r0, #1
 800ce4c:	d10e      	bne.n	800ce6c <pow+0x124>
 800ce4e:	eeb1 0b40 	vneg.f64	d0, d0
 800ce52:	ea57 0909 	orrs.w	r9, r7, r9
 800ce56:	d10b      	bne.n	800ce70 <pow+0x128>
 800ce58:	f1ba 0f00 	cmp.w	sl, #0
 800ce5c:	dadf      	bge.n	800ce1e <pow+0xd6>
 800ce5e:	b007      	add	sp, #28
 800ce60:	ecbd 8b0a 	vpop	{d8-d12}
 800ce64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce68:	f000 b9ee 	b.w	800d248 <__math_divzero>
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e7f0      	b.n	800ce52 <pow+0x10a>
 800ce70:	f1ba 0f00 	cmp.w	sl, #0
 800ce74:	dad3      	bge.n	800ce1e <pow+0xd6>
 800ce76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ce7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ce7e:	ed8d 7b00 	vstr	d7, [sp]
 800ce82:	ed9d 0b00 	vldr	d0, [sp]
 800ce86:	e7ca      	b.n	800ce1e <pow+0xd6>
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	da2b      	bge.n	800cee4 <pow+0x19c>
 800ce8c:	4651      	mov	r1, sl
 800ce8e:	f7ff ff25 	bl	800ccdc <checkint>
 800ce92:	b930      	cbnz	r0, 800cea2 <pow+0x15a>
 800ce94:	b007      	add	sp, #28
 800ce96:	ecbd 8b0a 	vpop	{d8-d12}
 800ce9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9e:	f000 b9eb 	b.w	800d278 <__math_invalid>
 800cea2:	1e41      	subs	r1, r0, #1
 800cea4:	4248      	negs	r0, r1
 800cea6:	4148      	adcs	r0, r1
 800cea8:	0480      	lsls	r0, r0, #18
 800ceaa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ceae:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800ceb2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800ceb6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800ceba:	2b7f      	cmp	r3, #127	@ 0x7f
 800cebc:	d92d      	bls.n	800cf1a <pow+0x1d2>
 800cebe:	4b96      	ldr	r3, [pc, #600]	@ (800d118 <pow+0x3d0>)
 800cec0:	2000      	movs	r0, #0
 800cec2:	429c      	cmp	r4, r3
 800cec4:	bf08      	it	eq
 800cec6:	4285      	cmpeq	r5, r0
 800cec8:	f43f af7a 	beq.w	800cdc0 <pow+0x78>
 800cecc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800ced0:	428a      	cmp	r2, r1
 800ced2:	d80c      	bhi.n	800ceee <pow+0x1a6>
 800ced4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ced8:	42a8      	cmp	r0, r5
 800ceda:	41a3      	sbcs	r3, r4
 800cedc:	d204      	bcs.n	800cee8 <pow+0x1a0>
 800cede:	ee31 0b00 	vadd.f64	d0, d1, d0
 800cee2:	e79c      	b.n	800ce1e <pow+0xd6>
 800cee4:	2000      	movs	r0, #0
 800cee6:	e7e4      	b.n	800ceb2 <pow+0x16a>
 800cee8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ceec:	e797      	b.n	800ce1e <pow+0xd6>
 800ceee:	2d01      	cmp	r5, #1
 800cef0:	eb74 0303 	sbcs.w	r3, r4, r3
 800cef4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cef8:	bf34      	ite	cc
 800cefa:	2301      	movcc	r3, #1
 800cefc:	2300      	movcs	r3, #0
 800cefe:	4296      	cmp	r6, r2
 800cf00:	bf8c      	ite	hi
 800cf02:	2600      	movhi	r6, #0
 800cf04:	2601      	movls	r6, #1
 800cf06:	42b3      	cmp	r3, r6
 800cf08:	f000 809c 	beq.w	800d044 <pow+0x2fc>
 800cf0c:	b007      	add	sp, #28
 800cf0e:	ecbd 8b0a 	vpop	{d8-d12}
 800cf12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf16:	f000 b98f 	b.w	800d238 <__math_oflow>
 800cf1a:	f1bc 0f00 	cmp.w	ip, #0
 800cf1e:	d10a      	bne.n	800cf36 <pow+0x1ee>
 800cf20:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800d108 <pow+0x3c0>
 800cf24:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cf28:	ec53 2b17 	vmov	r2, r3, d7
 800cf2c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800cf30:	4615      	mov	r5, r2
 800cf32:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800cf36:	4a7c      	ldr	r2, [pc, #496]	@ (800d128 <pow+0x3e0>)
 800cf38:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800cf3c:	4422      	add	r2, r4
 800cf3e:	1513      	asrs	r3, r2, #20
 800cf40:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800cf44:	ee03 3a10 	vmov	s6, r3
 800cf48:	0d12      	lsrs	r2, r2, #20
 800cf4a:	4b78      	ldr	r3, [pc, #480]	@ (800d12c <pow+0x3e4>)
 800cf4c:	0512      	lsls	r2, r2, #20
 800cf4e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800cf52:	1aa7      	subs	r7, r4, r2
 800cf54:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800cf58:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800cf5c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800cf60:	1e2e      	subs	r6, r5, #0
 800cf62:	ec47 6b14 	vmov	d4, r6, r7
 800cf66:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800cf6a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800cf6e:	ed93 5b00 	vldr	d5, [r3]
 800cf72:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800cf76:	eea3 2b05 	vfma.f64	d2, d3, d5
 800cf7a:	ed93 5b02 	vldr	d5, [r3, #8]
 800cf7e:	ee36 4b02 	vadd.f64	d4, d6, d2
 800cf82:	ee32 2b44 	vsub.f64	d2, d2, d4
 800cf86:	eea3 7b05 	vfma.f64	d7, d3, d5
 800cf8a:	ed93 5b04 	vldr	d5, [r3, #16]
 800cf8e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800cf92:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cf96:	ee26 5b05 	vmul.f64	d5, d6, d5
 800cf9a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800cf9e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cfa2:	eeb0 9b40 	vmov.f64	d9, d0
 800cfa6:	ee34 4b48 	vsub.f64	d4, d4, d8
 800cfaa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800cfae:	ee34 ab00 	vadd.f64	d10, d4, d0
 800cfb2:	ed93 5b06 	vldr	d5, [r3, #24]
 800cfb6:	ee26 bb00 	vmul.f64	d11, d6, d0
 800cfba:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cfbe:	ed93 4b08 	vldr	d4, [r3, #32]
 800cfc2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cfc6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800cfca:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cfce:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800cfd2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800cfd6:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cfda:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800cfde:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cfe2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cfe6:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cfea:	eeab 7b05 	vfma.f64	d7, d11, d5
 800cfee:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cff2:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cff6:	ee16 3a90 	vmov	r3, s13
 800cffa:	eeb0 5b46 	vmov.f64	d5, d6
 800cffe:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d002:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800d006:	18b2      	adds	r2, r6, r2
 800d008:	2a3e      	cmp	r2, #62	@ 0x3e
 800d00a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800d00e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800d012:	ee38 8b07 	vadd.f64	d8, d8, d7
 800d016:	eea1 5b08 	vfma.f64	d5, d1, d8
 800d01a:	d91b      	bls.n	800d054 <pow+0x30c>
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	da0b      	bge.n	800d038 <pow+0x2f0>
 800d020:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d024:	ee36 0b00 	vadd.f64	d0, d6, d0
 800d028:	2800      	cmp	r0, #0
 800d02a:	f43f aef8 	beq.w	800ce1e <pow+0xd6>
 800d02e:	eeb1 0b40 	vneg.f64	d0, d0
 800d032:	e6f4      	b.n	800ce1e <pow+0xd6>
 800d034:	2000      	movs	r0, #0
 800d036:	e77e      	b.n	800cf36 <pow+0x1ee>
 800d038:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800d03c:	d909      	bls.n	800d052 <pow+0x30a>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f6bf af64 	bge.w	800cf0c <pow+0x1c4>
 800d044:	b007      	add	sp, #28
 800d046:	ecbd 8b0a 	vpop	{d8-d12}
 800d04a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04e:	f000 b8eb 	b.w	800d228 <__math_uflow>
 800d052:	2600      	movs	r6, #0
 800d054:	4936      	ldr	r1, [pc, #216]	@ (800d130 <pow+0x3e8>)
 800d056:	ed91 4b02 	vldr	d4, [r1, #8]
 800d05a:	ed91 3b00 	vldr	d3, [r1]
 800d05e:	eeb0 7b44 	vmov.f64	d7, d4
 800d062:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d066:	ee17 5a10 	vmov	r5, s14
 800d06a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d06e:	ed91 4b04 	vldr	d4, [r1, #16]
 800d072:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800d076:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d07a:	ed91 4b06 	vldr	d4, [r1, #24]
 800d07e:	18dc      	adds	r4, r3, r3
 800d080:	f104 030f 	add.w	r3, r4, #15
 800d084:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d088:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d08c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800d090:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d094:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d098:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800d09c:	ed91 4b08 	vldr	d4, [r1, #32]
 800d0a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d0a4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d0a8:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d0ac:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800d0b0:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d0b4:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d0b8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800d0bc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d0c0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d0c4:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d0c8:	1940      	adds	r0, r0, r5
 800d0ca:	2700      	movs	r7, #0
 800d0cc:	eb17 020c 	adds.w	r2, r7, ip
 800d0d0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d0d4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	d175      	bne.n	800d1c8 <pow+0x480>
 800d0dc:	42bd      	cmp	r5, r7
 800d0de:	db29      	blt.n	800d134 <pow+0x3ec>
 800d0e0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800d0e4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	ec41 0b10 	vmov	d0, r0, r1
 800d0ee:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d0f2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d110 <pow+0x3c8>
 800d0f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0fa:	b007      	add	sp, #28
 800d0fc:	ecbd 8b0a 	vpop	{d8-d12}
 800d100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	f000 b8d0 	b.w	800d2a8 <__math_check_oflow>
 800d108:	00000000 	.word	0x00000000
 800d10c:	43300000 	.word	0x43300000
 800d110:	00000000 	.word	0x00000000
 800d114:	7f000000 	.word	0x7f000000
 800d118:	3ff00000 	.word	0x3ff00000
 800d11c:	fff00000 	.word	0xfff00000
 800d120:	ffe00000 	.word	0xffe00000
 800d124:	7fe00000 	.word	0x7fe00000
 800d128:	c0196aab 	.word	0xc0196aab
 800d12c:	0800d7f8 	.word	0x0800d7f8
 800d130:	0800e840 	.word	0x0800e840
 800d134:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d138:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800d13c:	4610      	mov	r0, r2
 800d13e:	ec41 0b15 	vmov	d5, r0, r1
 800d142:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800d146:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d14a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d14e:	eeb0 4bc7 	vabs.f64	d4, d7
 800d152:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800d156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800d1d8 <pow+0x490>
 800d15e:	d52a      	bpl.n	800d1b6 <pow+0x46e>
 800d160:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d164:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d170:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800d174:	bf58      	it	pl
 800d176:	eeb0 4b43 	vmovpl.f64	d4, d3
 800d17a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d17e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d182:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d186:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d18a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d18e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800d192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19a:	d104      	bne.n	800d1a6 <pow+0x45e>
 800d19c:	4632      	mov	r2, r6
 800d19e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d1a2:	ec43 2b17 	vmov	d7, r2, r3
 800d1a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1ae:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d1b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d1b6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d1ba:	b007      	add	sp, #28
 800d1bc:	ecbd 8b0a 	vpop	{d8-d12}
 800d1c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	f000 b867 	b.w	800d296 <__math_check_uflow>
 800d1c8:	ec43 2b10 	vmov	d0, r2, r3
 800d1cc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d1d0:	e625      	b.n	800ce1e <pow+0xd6>
 800d1d2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800d1e0 <pow+0x498>
 800d1d6:	e622      	b.n	800ce1e <pow+0xd6>
 800d1d8:	00000000 	.word	0x00000000
 800d1dc:	00100000 	.word	0x00100000
	...

0800d1e8 <with_errno>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	ed2d 8b02 	vpush	{d8}
 800d1ee:	eeb0 8b40 	vmov.f64	d8, d0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	f7fc fb44 	bl	8009880 <__errno>
 800d1f8:	eeb0 0b48 	vmov.f64	d0, d8
 800d1fc:	ecbd 8b02 	vpop	{d8}
 800d200:	6004      	str	r4, [r0, #0]
 800d202:	bd10      	pop	{r4, pc}

0800d204 <xflow>:
 800d204:	b082      	sub	sp, #8
 800d206:	b158      	cbz	r0, 800d220 <xflow+0x1c>
 800d208:	eeb1 7b40 	vneg.f64	d7, d0
 800d20c:	ed8d 7b00 	vstr	d7, [sp]
 800d210:	ed9d 7b00 	vldr	d7, [sp]
 800d214:	2022      	movs	r0, #34	@ 0x22
 800d216:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d21a:	b002      	add	sp, #8
 800d21c:	f7ff bfe4 	b.w	800d1e8 <with_errno>
 800d220:	eeb0 7b40 	vmov.f64	d7, d0
 800d224:	e7f2      	b.n	800d20c <xflow+0x8>
	...

0800d228 <__math_uflow>:
 800d228:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d230 <__math_uflow+0x8>
 800d22c:	f7ff bfea 	b.w	800d204 <xflow>
 800d230:	00000000 	.word	0x00000000
 800d234:	10000000 	.word	0x10000000

0800d238 <__math_oflow>:
 800d238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d240 <__math_oflow+0x8>
 800d23c:	f7ff bfe2 	b.w	800d204 <xflow>
 800d240:	00000000 	.word	0x00000000
 800d244:	70000000 	.word	0x70000000

0800d248 <__math_divzero>:
 800d248:	b082      	sub	sp, #8
 800d24a:	2800      	cmp	r0, #0
 800d24c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d250:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800d254:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d258:	ed8d 7b00 	vstr	d7, [sp]
 800d25c:	ed9d 0b00 	vldr	d0, [sp]
 800d260:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800d270 <__math_divzero+0x28>
 800d264:	2022      	movs	r0, #34	@ 0x22
 800d266:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d26a:	b002      	add	sp, #8
 800d26c:	f7ff bfbc 	b.w	800d1e8 <with_errno>
	...

0800d278 <__math_invalid>:
 800d278:	eeb0 7b40 	vmov.f64	d7, d0
 800d27c:	eeb4 7b47 	vcmp.f64	d7, d7
 800d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d284:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d288:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d28c:	d602      	bvs.n	800d294 <__math_invalid+0x1c>
 800d28e:	2021      	movs	r0, #33	@ 0x21
 800d290:	f7ff bfaa 	b.w	800d1e8 <with_errno>
 800d294:	4770      	bx	lr

0800d296 <__math_check_uflow>:
 800d296:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29e:	d102      	bne.n	800d2a6 <__math_check_uflow+0x10>
 800d2a0:	2022      	movs	r0, #34	@ 0x22
 800d2a2:	f7ff bfa1 	b.w	800d1e8 <with_errno>
 800d2a6:	4770      	bx	lr

0800d2a8 <__math_check_oflow>:
 800d2a8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800d2c8 <__math_check_oflow+0x20>
 800d2ac:	eeb0 7bc0 	vabs.f64	d7, d0
 800d2b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b8:	dd02      	ble.n	800d2c0 <__math_check_oflow+0x18>
 800d2ba:	2022      	movs	r0, #34	@ 0x22
 800d2bc:	f7ff bf94 	b.w	800d1e8 <with_errno>
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	ffffffff 	.word	0xffffffff
 800d2cc:	7fefffff 	.word	0x7fefffff

0800d2d0 <_init>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	bf00      	nop
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr

0800d2dc <_fini>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	bf00      	nop
 800d2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e2:	bc08      	pop	{r3}
 800d2e4:	469e      	mov	lr, r3
 800d2e6:	4770      	bx	lr
